/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'GameClient'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct std::locale::facetVtbl;
struct std::locale;
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl;
struct BS_OutVtbl;
struct exceptionVtbl;
struct std::ios_baseVtbl;
struct std::ios_base::_Iosarray;
struct std::ios_base::_Fnarray;
struct std::basic_streambuf<char,std::char_traits<char> >Vtbl;
struct IUnknownVtbl;
struct tagVARIANT;
struct IRecordInfo;
struct tagTYPEDESC;
struct tagARRAYDESC;
struct tagPROPVARIANT;
struct BS_ThreadVtbl;
struct std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo>;
struct BS_RefCountVtbl;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct BS_PoolMgrVtbl;
struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node;
struct BS_PoolVtbl;
struct std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *>;
struct BS_ChunkList;
struct BS_Log;
struct type_infoVtbl;
struct BS_NetFrameVtbl;
struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node;
struct BS_Reference<BS_Session>Vtbl;
struct BS_Session;
struct BS_PacketDispatch;
struct BS_PacketDispatchVtbl;
struct BS_Reference<BS_Packet>Vtbl;
struct BS_Packet;
struct std::pair<unsigned int const ,BS_ChunkList *>;
struct BS_Buffer;
struct BS_Cipher;
struct BS_SessionContainerVtbl;
struct std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *>;
struct std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node;
struct BS_PacketAnalyzeVtbl;
struct std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node;
struct std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)>;
struct BS_SingleDispatch;
struct std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node;
struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node;
struct std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *>;
struct XiGameClientNetVtbl;
struct BS_AuthDispatch;
struct BS_LobbyDispatch;
struct BS_GameDispatch;
struct BS_AreaDispatch;
struct BS_TimerVtbl;
struct BS_LuaBindVtbl;
struct BS_Console;
struct BS_ServiceVtbl;
struct std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *>;
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl;
struct DNameNodeVtbl;

/* 1 */
enum std::_Uninitialized
{
  _Noinit = 0x0,
};

/* 2 */
enum $C7A66656BD20095141AF9DA597C58E36
{
  ok = 0x0,
  partial = 0x1,
  error = 0x2,
  noconv = 0x3,
};

/* 3 */
enum std::_Iosb<int>::_Dummy_enum
{
  _Dummy_enum_val = 0x1,
};

/* 4 */
enum std::_Iosb<int>::_Fmtflags
{
  _Fmtmask = 0xFFFF,
  _Fmtzero = 0x0,
};

/* 5 */
enum std::_Iosb<int>::_Iostate
{
  _Statmask = 0x17,
};

/* 6 */
enum std::_Iosb<int>::_Openmode
{
  _Openmask = 0xFF,
};

/* 7 */
enum std::_Iosb<int>::_Seekdir
{
  _Seekmask = 0x3,
};

/* 8 */
enum $1B536D8DAE2B40B148C77012225844FC
{
  _Openprot = 0x1B6,
};

/* 9 */
enum $4DECDA45625DB2763FC46D6F5CBF863C
{
  _BUF_SIZE = 0x10,
};

/* 10 */
enum $401D18D8561079E483BCFCFD960618EB
{
  _ALLOC_MASK = 0xF,
};

/* 11 */
enum $3065823E5191D2C998FA93C46B23A3F9
{
  alnum = 0x107,
  alpha = 0x103,
  cntrl = 0x20,
  digit = 0x4,
  graph = 0x117,
  lower = 0x2,
  print = 0x1D7,
  punct = 0x10,
  space = 0x48,
  upper = 0x1,
  xdigit = 0x80,
};

/* 12 */
enum std::ios_base::event
{
  erase_event = 0x0,
  imbue_event = 0x1,
  copyfmt_event = 0x2,
};

/* 13 */
enum $9ADEBD8A921918A39AFE0B81FE4AC4B2
{
  _Multi = 0x0,
};

/* 14 */
enum std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Redbl
{
  _Red = 0x0,
  _Black = 0x1,
};

/* 15 */
typedef $4DECDA45625DB2763FC46D6F5CBF863C $EC9BA13EE5DE622DC42F8B50EF830957;

/* 16 */
typedef $401D18D8561079E483BCFCFD960618EB $690B93E439A93BAF8A0A0961E46877FE;

/* 17 */
enum BS_StrUtils::Const
{
  DefaultMax = 0xFF,
};

/* 18 */
typedef $9ADEBD8A921918A39AFE0B81FE4AC4B2 $58DE2DA9E8DDE5DA2E2F36082422D5FD;

/* 19 */
typedef std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Redbl std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Redbl;

/* 20 */
enum BS_Stream::Const
{
  MaxTemporaryBuf = 0x200,
};

/* 21 */
enum BS_Config::Const
{
  ScriptNameLen = 0xFF,
  LogDirLen = 0xFF,
  LogNameLen = 0xFF,
  TCPIPLen = 0xFF,
};

/* 22 */
enum $84DE96EED7E672E0B136CB2279D396F8
{
  MaxTeamNameLen = 0x11,
};

/* 23 */
enum BS_PktUserAuth2::Const
{
  MaxNameLen = 0x28,
  MaxHashLen = 0x800,
};

/* 24 */
enum XiPvpRoomFilter
{
  XiPvpRoomFilter_Single = 0x1,
  XiPvpRoomFilter_Team = 0x2,
  XiPvpRoomFilter_Both = 0x3,
};

/* 25 */
typedef BS_PktUserAuth2::Const BS_PktFriendDelAck::Const;

/* 26 */
typedef $84DE96EED7E672E0B136CB2279D396F8 BS_PktOBSState::Const;

/* 27 */
enum BS_PktOBSState::Result
{
  UNKNOWNERROR = 0x0,
  ROOMOK = 0x1,
  NOROOM = 0x2,
  CLOSED = 0x3,
};

/* 28 */
typedef BS_PktUserAuth2::Const BS_PktOBSState::Unit::Const;

/* 29 */
typedef BS_PktUserAuth2::Const BS_PktFriendListAck::Unit::Const;

/* 30 */
typedef BS_PktUserAuth2::Const BS_PktPartyApply::Const;

/* 31 */
enum BS_PktRoomState::Const
{
  MaxRoomNameLen = 0x28,
};

/* 32 */
typedef BS_PktOBSState::Result BS_PktRoomState::Result;

/* 33 */
typedef BS_PktUserAuth2::Const BS_PktRoomState::Unit::Const;

/* 34 */
typedef BS_PktUserAuth2::Const $C9081AD5DF1DE1482E66F221242F2313;

/* 35 */
typedef BS_PktUserAuth2::Const BS_PktTeamMembersAck::Member::Const;

/* 36 */
typedef BS_PktUserAuth2::Const BS_PktFriendAddByName::Const;

/* 37 */
typedef BS_PktUserAuth2::Const BS_PktJoinChat::Const;

/* 38 */
enum $1BDB3FC9CBEA06BF59887F6E807A9A15
{
  BATTLE_BEGIN = 0x0,
  BATTLE_RESULT = 0x1,
  MaxTeamName = 0xD,
};

/* 39 */
enum BS_PktGameStream::Const
{
  MaxStreamLen = 0x32,
};

/* 40 */
typedef BS_PktUserAuth2::Const BS_PktRoomInvite::Const;

/* 41 */
typedef BS_PktUserAuth2::Const BS_PktSayAck::Const;

/* 42 */
typedef BS_PktUserAuth2::Const BS_PktUserAuth::Const;

/* 43 */
typedef BS_PktUserAuth2::Const BS_PktRoomJoin::Const;

/* 44 */
typedef BS_PktUserAuth2::Const BS_PktLeaveChat::Const;

/* 45 */
typedef BS_PktUserAuth2::Const BS_PktFriendDel::Const;

/* 46 */
enum $B79648944CE82E4BB301ECD71D10CAA8
{
  TEAMNAME_LEN = 0xD,
  TEAMDESC_LEN = 0x51,
  OWNCHANNEL_LEN = 0x18,
  TEAMSTATE_LEN = 0x2,
};

/* 47 */
typedef BS_PktUserAuth2::Const XiStrAssistID::Const;

/* 48 */
typedef BS_PktUserAuth2::Const XiStrChannelName::Const;

/* 49 */
enum $5DFDE45321D32B7E48A9328106A3FB87
{
  NORMAL_RESULT = 0x1,
  OBSERVE_RESULT = 0x2,
};

/* 50 */
typedef BS_PktUserAuth2::Const XiStrCharName::Const;

/* 51 */
typedef $B79648944CE82E4BB301ECD71D10CAA8 $BDCD8475F000C411B787194EA6C47E96;

/* 52 */
enum $DB7D5BD23599F3BA2FAF55052CB525DB
{
  MaxSubjectLen = 0x15,
};

/* 53 */
typedef BS_PktUserAuth2::Const BS_PktInviteeListAck::Unit::Const;

/* 54 */
typedef $84DE96EED7E672E0B136CB2279D396F8 $029453DE2C5C2D9059FE4EBF05675013;

/* 55 */
enum XiStrCharInfo::POSITION_STATE
{
  FIRST_POS = 0x0,
  NOTSAVED_POS = 0x1,
  HOUSESAVED_POS = 0x2,
  BASESAVED_POS = 0x3,
};

/* 56 */
typedef BS_PktRoomState::Const BS_PktRoomModify::Const;

/* 57 */
typedef BS_PktUserAuth2::Const XiStrPartyName::Const;

/* 58 */
typedef BS_PktUserAuth2::Const BS_PktOpenChat::Const;

/* 59 */
enum BS_PktPvpEnd::EndType
{
  Finished = 0x1,
  Retire = 0x2,
  UnearnedWin = 0x3,
};

/* 60 */
typedef BS_PktRoomState::Const BS_PktRoomCreate::Const;

/* 61 */
enum BS_PktUserAuthAck::Const
{
  MaxStringLen = 0x40,
};

/* 62 */
typedef BS_PktUserAuth2::Const BS_PktPartyReject::Const;

/* 63 */
typedef BS_PktUserAuth2::Const BS_PktJoinChannelAck::Const;

/* 64 */
enum $C339095ADF83CCBE3D584DD79C2BFC2A
{
  DELETE_MSG = 0x1,
};

/* 65 */
typedef BS_PktUserAuth2::Const BS_PktChatMsg::Const;

/* 66 */
typedef BS_PktUserAuth2::Const BS_PktChaseHit::Const;

/* 67 */
enum BS_PktPartyJoinResult::Const
{
  MaxPartyNameLen = 0x1E,
};

/* 68 */
typedef BS_PktUserAuth2::Const BS_PktPartyJoinResult::Unit::Const;

/* 69 */
typedef BS_PktUserAuth2::Const BS_PktCheckInLobby::Const;

/* 70 */
enum $EFB2E9BFAE9BE2B3B8E0F62AAE9637E6
{
  MAX = 0x20,
};

/* 71 */
typedef BS_PktUserAuth2::Const BS_PktFriendAddAck::Const;

/* 72 */
typedef BS_PktRoomState::Const XiPvpRoomInfo::Const;

/* 73 */
enum XiPvpRoomInfo::State
{
  WAIT = 0x0,
  RACING = 0x1,
};

/* 74 */
enum XiPvpRoomInfo::Flag
{
  Team = 0x1,
  Secure = 0x2,
};

/* 75 */
typedef BS_PktUserAuth2::Const XiStrItemID::Const;

/* 76 */
typedef BS_PktUserAuth2::Const BS_PktPartyAccept::Const;

/* 77 */
enum XiStrUserPermission::Const
{
  Administrator = 0x8000,
  PowerUser = 0x4000,
  RemoteClientUser = 0x2000,
  Developer = 0x1000,
  User = 0x0,
};

/* 78 */
typedef BS_PktUserAuth2::Const BS_PktJoinChannel::Const;

/* 79 */
typedef BS_PktUserAuth2::Const BS_PktJoinChatAck::Const;

/* 80 */
typedef XiPvpRoomInfo::State $D189645B5B98375DB64CAE986362AE72;

/* 81 */
typedef BS_PktUserAuth2::Const BS_PktCloseChat::Const;

/* 82 */
typedef BS_PktUserAuth2::Const BS_PktChatMsgAck::Const;

/* 83 */
enum $38636D0EA7AD20B267BDBB95270A9F80
{
  FINE = 0x0,
  CLOUDY = 0x1,
  FOGGY = 0x2,
  RAIN = 0x3,
  SUNSET = 0x4,
};

/* 84 */
typedef BS_PktUserAuth2::Const BS_PktRegisterChannelAdmin::Const;

/* 85 */
typedef BS_PktUserAuth2::Const BS_PktLeaveChatAck::Const;

/* 86 */
enum $4AB0B72EBB28BB1FAC18739ED56A1993
{
  MAX_SIZE = 0x20,
};

/* 87 */
enum BS_PktSay::Const
{
  MaxMsgLen = 0x32,
};

/* 88 */
typedef BS_PktUserAuth2::Const BS_PktWhisper::Const;

/* 89 */
typedef BS_PktUserAuth2::Const BS_PktAreaChat::Const;

/* 90 */
enum XiChaseResultInfo::Const
{
  NameLen = 0x20,
};

/* 91 */
typedef BS_PktUserAuth2::Const XiPlayerInfo::Const;

/* 92 */
typedef BS_PktRoomState::Const BS_PktRoomCreateAck::Const;

/* 93 */
typedef BS_PktUserAuth2::Const BS_PktRoomSecureJoin::Const;

/* 94 */
typedef BS_PktUserAuth2::Const BS_PktRoomReject::Const;

/* 95 */
typedef BS_PktUserAuth2::Const BS_PktLeaveChannel::Const;

/* 96 */
typedef BS_PktUserAuth2::Const BS_PktPartyJoin::Const;

/* 97 */
typedef BS_PktUserAuth2::Const BS_PktChannelListAck::Const;

/* 98 */
typedef BS_PktUserAuth2::Const BS_PktLeaveChannelAck::Const;

/* 99 */
enum BS_PktChasePropose::Const
{
  PosNameLen = 0x64,
};

/* 100 */
typedef BS_PktUserAuth2::Const BS_PktPartyInvite::Const;

/* 101 */
enum BS_PktHead::Const
{
  Compress = 0x8000,
  Encoding = 0x4000,
  CheckSum = 0x2000,
  FlagMask = 0xFFF,
  LenMask = 0xF000,
};

/* 102 */
enum CStreamCipher::CipherType
{
  NONE = 0x0,
  SIMPLE = 0x1,
  TEA = 0x2,
};

/* 103 */
enum BS_Session::BS_SessionState::State
{
  S_UnInitialized = 0x0,
  S_Listen = 0x1,
  S_Accepted = 0x2,
  S_Connected = 0x2,
  S_Disconnect = 0x3,
  S_Disconnected = 0x4,
  S_MaxState = 0x5,
};

/* 104 */
enum $FFC86625F08D718E246366BABA960B41
{
  NON_CIPHER = 0x1,
  SVR_SIM = 0x2,
  SVR_TEA = 0x4,
  CLI_SIM = 0x10,
  CLI_TEA = 0x20,
};

/* 105 */
enum $4B33F3037CF17A11BEEFD4DBF1005031
{
  BOTH_SIM = 0x12,
  BOTH_TEA = 0x24,
};

/* 106 */
enum $6782DE06074047787D11DA8696B92961
{
  INIT = 0x0,
  GENKEY = 0x1,
  EXCHANGEDKEY = 0x2,
};

/* 107 */
typedef std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Redbl std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Redbl;

/* 108 */
typedef std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Redbl std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Redbl;

/* 109 */
enum BS_PacketAnalyzeMachine::Const
{
  MaxProcessPacket = 0x14,
};

/* 110 */
enum BS_LuaFunc::Const
{
  ErrorBufferSize = 0xFF,
};

/* 111 */
enum BS_WinSocket::Const
{
  MAX_BACKLOG = 0x3F,
};

/* 112 */
enum $2F61BE20DFC10CAB424A8CC901352B0B
{
  _DEQUEMAPSIZ = 0x8,
  _DEQUESIZ = 0x4,
};

/* 113 */
typedef std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Redbl std::_Tree<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Redbl;

/* 114 */
enum BS_MessageDispatch::Const
{
  RecvBufferSize = 0x1000,
  SendBufferSize = 0x578,
};

/* 115 */
enum BS_String::Const
{
  TemporarySize = 0x400,
};

/* 116 */
enum BS_FileUtils::Const
{
  MinAutoCount = 0xA,
  MaxAutoCount = 0x64,
  MaxFileLen = 0xFF,
};

/* 117 */
enum BS_Console::Const
{
  DisplayWitdh = 0x46,
  DisplayHeight = 0x28,
};

/* 118 */
enum BS_ConsoleThread::Const
{
  MaxLineNum = 0x28,
  MaxLineSize = 0xFF,
};

/* 119 */
enum BS_Service::Const
{
  ServiceNameLen = 0x100,
};

/* 120 */
enum BS_SocketUtils::Const
{
  ErrorBufferLen = 0xFF,
};

/* 121 */
enum BS_GameDispatch::Const
{
  GameRecvBufferSize = 0x10000,
};

/* 122 */
typedef std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Redbl std::_Tree<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Redbl;

/* 123 */
enum BS_Pulse::Const
{
  DefaultTTP = 0xC8,
};

/* 124 */
typedef std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Redbl std::_Tree<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Redbl;

/* 125 */
typedef BS_MessageDispatch::Const BS_EchoDispatch::Const;

/* 126 */
typedef $3065823E5191D2C998FA93C46B23A3F9 $291F5BEB9C149347B4F02619FFC9078D;

/* 127 */
enum std::time_base::dateorder
{
  no_order = 0x0,
  dmy = 0x1,
  mdy = 0x2,
  ymd = 0x3,
  ydm = 0x4,
};

/* 128 */
enum std::basic_filebuf<unsigned short,std::char_traits<unsigned short> >::_Initfl
{
  _Newfl = 0x0,
  _Openfl = 0x1,
  _Closefl = 0x2,
};

/* 129 */
typedef std::basic_filebuf<unsigned short,std::char_traits<unsigned short> >::_Initfl std::basic_filebuf<char,std::char_traits<char> >::_Initfl;

/* 130 */
enum _FPIEEE_FORMAT
{
  _FpFormatFp32 = 0x0,
  _FpFormatFp64 = 0x1,
  _FpFormatFp80 = 0x2,
  _FpFormatFp128 = 0x3,
  _FpFormatI16 = 0x4,
  _FpFormatI32 = 0x5,
  _FpFormatI64 = 0x6,
  _FpFormatU16 = 0x7,
  _FpFormatU32 = 0x8,
  _FpFormatU64 = 0x9,
  _FpFormatBcd80 = 0xA,
  _FpFormatCompare = 0xB,
  _FpFormatString = 0xC,
};

/* 131 */
enum _FP_OPERATION_CODE
{
  _FpCodeUnspecified = 0x0,
  _FpCodeAdd = 0x1,
  _FpCodeSubtract = 0x2,
  _FpCodeMultiply = 0x3,
  _FpCodeDivide = 0x4,
  _FpCodeSquareRoot = 0x5,
  _FpCodeRemainder = 0x6,
  _FpCodeCompare = 0x7,
  _FpCodeConvert = 0x8,
  _FpCodeRound = 0x9,
  _FpCodeTruncate = 0xA,
  _FpCodeFloor = 0xB,
  _FpCodeCeil = 0xC,
  _FpCodeAcos = 0xD,
  _FpCodeAsin = 0xE,
  _FpCodeAtan = 0xF,
  _FpCodeAtan2 = 0x10,
  _FpCodeCabs = 0x11,
  _FpCodeCos = 0x12,
  _FpCodeCosh = 0x13,
  _FpCodeExp = 0x14,
  _FpCodeFabs = 0x15,
  _FpCodeFmod = 0x16,
  _FpCodeFrexp = 0x17,
  _FpCodeHypot = 0x18,
  _FpCodeLdexp = 0x19,
  _FpCodeLog = 0x1A,
  _FpCodeLog10 = 0x1B,
  _FpCodeModf = 0x1C,
  _FpCodePow = 0x1D,
  _FpCodeSin = 0x1E,
  _FpCodeSinh = 0x1F,
  _FpCodeTan = 0x20,
  _FpCodeTanh = 0x21,
  _FpCodeY0 = 0x22,
  _FpCodeY1 = 0x23,
  _FpCodeYn = 0x24,
  _FpCodeLogb = 0x25,
  _FpCodeNextafter = 0x26,
  _FpCodeNegate = 0x27,
  _FpCodeFmin = 0x28,
  _FpCodeFmax = 0x29,
  _FpCodeConvertTrunc = 0x2A,
  _XMMIAddps = 0x2B,
  _XMMIAddss = 0x2C,
  _XMMISubps = 0x2D,
  _XMMISubss = 0x2E,
  _XMMIMulps = 0x2F,
  _XMMIMulss = 0x30,
  _XMMIDivps = 0x31,
  _XMMIDivss = 0x32,
  _XMMISqrtps = 0x33,
  _XMMISqrtss = 0x34,
  _XMMIMaxps = 0x35,
  _XMMIMaxss = 0x36,
  _XMMIMinps = 0x37,
  _XMMIMinss = 0x38,
  _XMMICmpps = 0x39,
  _XMMICmpss = 0x3A,
  _XMMIComiss = 0x3B,
  _XMMIUComiss = 0x3C,
  _XMMICvtpi2ps = 0x3D,
  _XMMICvtsi2ss = 0x3E,
  _XMMICvtps2pi = 0x3F,
  _XMMICvtss2si = 0x40,
  _XMMICvttps2pi = 0x41,
  _XMMICvttss2si = 0x42,
  _XMMI2Addpd = 0x43,
  _XMMI2Addsd = 0x44,
  _XMMI2Subpd = 0x45,
  _XMMI2Subsd = 0x46,
  _XMMI2Mulpd = 0x47,
  _XMMI2Mulsd = 0x48,
  _XMMI2Divpd = 0x49,
  _XMMI2Divsd = 0x4A,
  _XMMI2Sqrtpd = 0x4B,
  _XMMI2Sqrtsd = 0x4C,
  _XMMI2Maxpd = 0x4D,
  _XMMI2Maxsd = 0x4E,
  _XMMI2Minpd = 0x4F,
  _XMMI2Minsd = 0x50,
  _XMMI2Cmppd = 0x51,
  _XMMI2Cmpsd = 0x52,
  _XMMI2Comisd = 0x53,
  _XMMI2UComisd = 0x54,
  _XMMI2Cvtpd2pi = 0x55,
  _XMMI2Cvtsd2si = 0x56,
  _XMMI2Cvttpd2pi = 0x57,
  _XMMI2Cvttsd2si = 0x58,
  _XMMI2Cvtps2pd = 0x59,
  _XMMI2Cvtss2sd = 0x5A,
  _XMMI2Cvtpd2ps = 0x5B,
  _XMMI2Cvtsd2ss = 0x5C,
  _XMMI2Cvtdq2ps = 0x5D,
  _XMMI2Cvttps2dq = 0x5E,
  _XMMI2Cvtps2dq = 0x5F,
  _XMMI2Cvttpd2dq = 0x60,
  _XMMI2Cvtpd2dq = 0x61,
};

/* 132 */
enum _FPIEEE_ROUNDING_MODE
{
  _FpRoundNearest = 0x0,
  _FpRoundMinusInfinity = 0x1,
  _FpRoundPlusInfinity = 0x2,
  _FpRoundChopped = 0x3,
};

/* 133 */
enum _FPIEEE_PRECISION
{
  _FpPrecisionFull = 0x0,
  _FpPrecision53 = 0x1,
  _FpPrecision24 = 0x2,
};

/* 134 */
enum INTRNCVT_STATUS
{
  INTRNCVT_OK = 0x0,
  INTRNCVT_OVERFLOW = 0x1,
  INTRNCVT_UNDERFLOW = 0x2,
};

/* 135 */
enum state_t
{
  S_INIT = 0x0,
  S_EAT0L = 0x1,
  S_SIGNM = 0x2,
  S_GETL = 0x3,
  S_GETR = 0x4,
  S_POINT = 0x5,
  S_E = 0x6,
  S_SIGNE = 0x7,
  S_EAT0E = 0x8,
  S_GETE = 0x9,
  S_END = 0xA,
  S_E_IMPLICIT = 0xB,
};

/* 136 */
enum STATE
{
  ST_NORMAL = 0x0,
  ST_PERCENT = 0x1,
  ST_FLAG = 0x2,
  ST_WIDTH = 0x3,
  ST_DOT = 0x4,
  ST_PRECIS = 0x5,
  ST_SIZE = 0x6,
  ST_TYPE = 0x7,
};

/* 137 */
enum CHARTYPE
{
  CH_OTHER = 0x0,
  CH_PERCENT = 0x1,
  CH_DOT = 0x2,
  CH_STAR = 0x3,
  CH_ZERO = 0x4,
  CH_DIGIT = 0x5,
  CH_FLAG = 0x6,
  CH_SIZE = 0x7,
  CH_TYPE = 0x8,
};

/* 138 */
enum $1DD7A03358E0D01DD359262876E6A0F0
{
  lkNormal = 0x0,
  lkPrealloc = 0x1,
  lkDeleted = 0x2,
};

/* 139 */
enum _RTC_ErrorNumber
{
  _RTC_CHKSTK = 0x0,
  _RTC_CVRT_LOSS_INFO = 0x1,
  _RTC_CORRUPT_STACK = 0x2,
  _RTC_UNINIT_LOCAL_USE = 0x3,
  _RTC_ILLEGAL = 0x4,
};

/* 140 */
enum Tokens
{
  TOK_basedLp = 0x0,
  TOK_cdecl = 0x1,
  TOK_pascal = 0x2,
  TOK_stdcall = 0x3,
  TOK_thiscall = 0x4,
  TOK_fastcall = 0x5,
  TOK_cocall = 0x6,
  TOK_ptr64 = 0x7,
  TOK_restrict = 0x8,
  TOK_unaligned = 0x9,
  TOK__last = 0xA,
};

/* 141 */
enum DNameStatus
{
  DN_valid = 0x0,
  DN_invalid = 0x1,
  DN_truncated = 0x2,
  DN_error = 0x3,
};

/* 156 */
struct std::_Mutex
{
  void *_Mtx;
};

/* 142 */
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >
{
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl *vfptr;
  std::_Mutex _Mylock;
  unsigned __int16 *_Gfirst;
  unsigned __int16 *_Pfirst;
  unsigned __int16 **_IGfirst;
  unsigned __int16 **_IPfirst;
  unsigned __int16 *_Gnext;
  unsigned __int16 *_Pnext;
  unsigned __int16 **_IGnext;
  unsigned __int16 **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 143 */
struct __declspec(align(8)) std::fpos<int>
{
  int _Myoff;
  __int64 _Fpos;
  int _Mystate;
};

/* 144 */
struct __cppobj std::_Locbase<int>
{
};

/* 145 */
struct std::locale::facet
{
  std::locale::facetVtbl *vfptr;
  unsigned int _Refs;
};

/* 146 */
struct std::locale::facetVtbl
{
  void *(__thiscall *__vecDelDtor)(std::locale::facet *this, unsigned int);
};

/* 147 */
struct __cppobj std::_String_base
{
};

/* 148 */
struct __cppobj std::_Allocator_base<char>
{
};

/* 149 */
struct __cppobj std::allocator<char> : std::_Allocator_base<char>
{
};

/* 150 */
struct __cppobj std::_String_val<char,std::allocator<char> > : std::_String_base
{
  std::allocator<char> _Alval;
};

/* 151 */
union std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Bxty
{
  char _Buf[16];
  char *_Ptr;
};

/* 152 */
struct __cppobj std::basic_string<char,std::char_traits<char>,std::allocator<char> > : std::_String_val<char,std::allocator<char> >
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Bxty _Bx;
  unsigned int _Mysize;
  unsigned int _Myres;
};

/* 153 */
struct __cppobj std::locale::_Locimp : std::locale::facet
{
  std::locale::facet **_Facetvec;
  unsigned int _Facetcount;
  int _Catmask;
  bool _Xparent;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Name;
};

/* 154 */
const struct __cppobj std::locale : std::_Locbase<int>
{
  std::locale::_Locimp *_Ptr;
};

/* 155 */
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl
{
  void *(__thiscall *__vecDelDtor)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned int);
  _BYTE gap4[4];
  unsigned __int16 (__thiscall *pbackfail)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16);
  int (__thiscall *showmanyc)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  unsigned __int16 (__thiscall *underflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  unsigned __int16 (__thiscall *uflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  int (__thiscall *xsgetn)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16 *, int);
  int (__thiscall *xsputn)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, const unsigned __int16 *, int);
  std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::fpos<int> *result, int, int, int);
  std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *(__thiscall *setbuf)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16 *, int);
  int (__thiscall *sync)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  void (__thiscall *imbue)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::locale *);
};

/* 157 */
struct __cppobj BS_StreamBuf : std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >
{
};

/* 158 */
struct BS_Out
{
  BS_OutVtbl *vfptr;
};

/* 1684 */
typedef unsigned __int16 wchar_t;

/* 159 */
union $F36175C7D3871117E5D1E6546BFD5D1B
{
  void (__thiscall *Write)(BS_Out *this, const wchar_t);
  unsigned int (__thiscall *Write)(BS_Out *this, const wchar_t *, unsigned int);
};

/* 160 */
struct BS_OutVtbl
{
  void *(__thiscall *__vecDelDtor)(BS_Out *this, unsigned int);
  __declspec(align(8)) $F36175C7D3871117E5D1E6546BFD5D1B ___u1;
  bool (__thiscall *Flush)(BS_Out *this);
};

/* 161 */
struct __cppobj BS_SingleStreamBuf : BS_StreamBuf
{
  BS_Out *m_pOut;
};

/* 162 */
struct __cppobj std::input_iterator_tag
{
};

/* 163 */
struct __cppobj std::forward_iterator_tag : std::input_iterator_tag
{
};

/* 164 */
struct __cppobj std::bidirectional_iterator_tag : std::forward_iterator_tag
{
};

/* 165 */
struct exception
{
  exceptionVtbl *vfptr;
  const char *_m_what;
  int _m_doFree;
};

/* 166 */
struct exceptionVtbl
{
  void *(__thiscall *__vecDelDtor)(exception *this, unsigned int);
  const char *(__thiscall *what)(exception *this);
};

/* 167 */
struct __cppobj std::logic_error : exception
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str;
};

/* 168 */
struct __cppobj std::length_error : std::logic_error
{
};

/* 169 */
struct __cppobj std::runtime_error : exception
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str;
};

/* 170 */
struct __cppobj std::ctype_base : std::locale::facet
{
};

/* 171 */
struct _Ctypevec
{
  unsigned int _Hand;
  unsigned int _Page;
  const __int16 *_Table;
  int _Delfl;
};

/* 172 */
struct __cppobj std::ctype<char> : std::ctype_base
{
  _Ctypevec _Ctype;
};

/* 173 */
struct std::locale::id
{
  unsigned int _Id;
};

/* 174 */
struct std::_Lockit
{
  int _Locktype;
};

/* 175 */
struct std::_Locinfo
{
  std::_Lockit _Lock;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Days;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Months;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Oldlocname;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Newlocname;
};

/* 176 */
struct __cppobj std::allocator<void>
{
};

/* 177 */
struct __cppobj std::_Iosb<int>
{
};

/* 178 */
struct __cppobj std::ios_base : std::_Iosb<int>
{
  std::ios_baseVtbl *vfptr;
  unsigned int _Stdstr;
  int _Mystate;
  int _Except;
  int _Fmtfl;
  int _Prec;
  int _Wide;
  std::ios_base::_Iosarray *_Arr;
  std::ios_base::_Fnarray *_Calls;
  std::locale *_Ploc;
};

/* 179 */
struct std::ios_baseVtbl
{
  void *(__thiscall *__vecDelDtor)(std::ios_base *this, unsigned int);
};

/* 180 */
struct std::ios_base::_Iosarray
{
  std::ios_base::_Iosarray *_Next;
  int _Index;
  int _Lo;
  void *_Vp;
};

/* 181 */
struct std::ios_base::_Fnarray
{
  std::ios_base::_Fnarray *_Next;
  int _Index;
  void (__cdecl *_Pfn)(std::ios_base::event, std::ios_base *, int);
};

/* 182 */
struct __cppobj std::basic_ostream<unsigned short,std::char_traits<unsigned short> >
{
  _BYTE gap0[56];
};

/* 183 */
struct __cppobj __declspec(align(4)) std::basic_ios<unsigned short,std::char_traits<unsigned short> > : std::ios_base
{
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *_Mystrbuf;
  std::basic_ostream<unsigned short,std::char_traits<unsigned short> > *_Tiestr;
  unsigned __int16 _Fillch;
};

/* 184 */
struct __declspec(align(4)) std::basic_istream<unsigned short,std::char_traits<unsigned short> >
{
  _BYTE gap0[4];
  int _Chcount;
  _BYTE gap8[52];
};

/* 185 */
struct __cppobj std::iterator<std::input_iterator_tag,unsigned short,long,unsigned short *,unsigned short &>
{
};

/* 186 */
struct __cppobj std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > : std::iterator<std::input_iterator_tag,unsigned short,long,unsigned short *,unsigned short &>
{
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *_Strbuf;
  bool _Got;
  unsigned __int16 _Val;
};

/* 187 */
struct _Cvtvec
{
  unsigned int _Hand;
  unsigned int _Page;
};

/* 188 */
struct __cppobj std::ctype<unsigned short> : std::ctype_base
{
  _Ctypevec _Ctype;
  _Cvtvec _Cvt;
};

/* 189 */
struct __cppobj std::num_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 190 */
struct std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  std::basic_istream<unsigned short,std::char_traits<unsigned short> > *_Myistr;
};

/* 191 */
struct __cppobj __declspec(align(4)) std::basic_istream<unsigned short,std::char_traits<unsigned short> >::sentry : std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  bool _Ok;
};

/* 192 */
struct __cppobj std::allocator<char>::rebind<char>
{
};

/* 193 */
struct std::basic_streambuf<char,std::char_traits<char> >
{
  std::basic_streambuf<char,std::char_traits<char> >Vtbl *vfptr;
  std::_Mutex _Mylock;
  char *_Gfirst;
  char *_Pfirst;
  char **_IGfirst;
  char **_IPfirst;
  char *_Gnext;
  char *_Pnext;
  char **_IGnext;
  char **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 194 */
struct std::basic_streambuf<char,std::char_traits<char> >Vtbl
{
  void *(__thiscall *__vecDelDtor)(std::basic_streambuf<char,std::char_traits<char> > *this, unsigned int);
  _BYTE gap4[4];
  int (__thiscall *pbackfail)(std::basic_streambuf<char,std::char_traits<char> > *this, int);
  int (__thiscall *showmanyc)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__thiscall *underflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__thiscall *uflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__thiscall *xsgetn)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, int);
  int (__thiscall *xsputn)(std::basic_streambuf<char,std::char_traits<char> > *this, const char *, int);
  std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, int, int, int);
  std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<char,std::char_traits<char> > *(__thiscall *setbuf)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, int);
  int (__thiscall *sync)(std::basic_streambuf<char,std::char_traits<char> > *this);
  void (__thiscall *imbue)(std::basic_streambuf<char,std::char_traits<char> > *this, std::locale *);
};

/* 195 */
struct __cppobj std::basic_ostream<char,std::char_traits<char> >
{
  _BYTE gap0[56];
};

/* 196 */
struct __cppobj __declspec(align(4)) std::basic_ios<char,std::char_traits<char> > : std::ios_base
{
  std::basic_streambuf<char,std::char_traits<char> > *_Mystrbuf;
  std::basic_ostream<char,std::char_traits<char> > *_Tiestr;
  char _Fillch;
};

/* 197 */
struct __cppobj std::iterator<std::output_iterator_tag,void,void,void,void>
{
};

/* 198 */
struct __cppobj std::_Outit : std::iterator<std::output_iterator_tag,void,void,void,void>
{
};

/* 199 */
struct __cppobj std::ostreambuf_iterator<char,std::char_traits<char> > : std::_Outit
{
  bool _Failed;
  std::basic_streambuf<char,std::char_traits<char> > *_Strbuf;
};

/* 200 */
struct __cppobj std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 201 */
struct std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  std::basic_ostream<char,std::char_traits<char> > *_Myostr;
};

/* 202 */
struct __cppobj __declspec(align(4)) std::basic_ostream<char,std::char_traits<char> >::sentry : std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  bool _Ok;
};

/* 203 */
struct __cppobj std::char_traits<char>
{
};

/* 204 */
struct __cppobj std::invalid_argument : std::logic_error
{
};

/* 205 */
struct __cppobj std::codecvt_base : std::locale::facet
{
};

/* 206 */
struct __cppobj std::underflow_error : std::runtime_error
{
};

/* 207 */
struct __cppobj std::bad_exception : exception
{
};

/* 208 */
struct __declspec(align(4)) std::basic_istream<char,std::char_traits<char> >
{
  _BYTE gap0[4];
  int _Chcount;
  _BYTE gap8[52];
};

/* 209 */
struct __cppobj std::iterator<std::input_iterator_tag,char,long,char *,char &>
{
};

/* 210 */
struct __cppobj __declspec(align(4)) std::istreambuf_iterator<char,std::char_traits<char> > : std::iterator<std::input_iterator_tag,char,long,char *,char &>
{
  std::basic_streambuf<char,std::char_traits<char> > *_Strbuf;
  bool _Got;
  char _Val;
};

/* 211 */
struct __cppobj std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 212 */
struct std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
  std::basic_istream<char,std::char_traits<char> > *_Myistr;
};

/* 213 */
struct __cppobj __declspec(align(4)) std::basic_istream<char,std::char_traits<char> >::sentry : std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
  bool _Ok;
};

/* 214 */
struct __cppobj std::random_access_iterator_tag : std::bidirectional_iterator_tag
{
};

/* 215 */
struct __cppobj std::iterator<std::random_access_iterator_tag,char,int,char const *,char const &>
{
};

/* 216 */
struct __cppobj std::codecvt<unsigned short,char,int> : std::codecvt_base
{
  _Cvtvec _Cvt;
};

/* 217 */
struct __cppobj std::char_traits<unsigned short>
{
};

/* 218 */
struct __cppobj std::domain_error : std::logic_error
{
};

/* 219 */
struct __cppobj std::overflow_error : std::runtime_error
{
};

/* 220 */
struct __cppobj std::range_error : std::runtime_error
{
};

/* 221 */
struct _Collvec
{
  unsigned int _Hand;
  unsigned int _Page;
};

/* 222 */
struct std::_Timevec
{
  void *_Timeptr;
};

/* 223 */
struct lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
};

/* 224 */
struct __cppobj std::out_of_range : std::logic_error
{
};

/* 225 */
struct __cppobj std::_Ranit<char,int,char const *,char const &> : std::iterator<std::random_access_iterator_tag,char,int,char const *,char const &>
{
};

/* 226 */
struct __cppobj std::basic_string<char,std::char_traits<char>,std::allocator<char> >::const_iterator : std::_Ranit<char,int,char const *,char const &>
{
  const char *_Myptr;
};

/* 227 */
struct __cppobj std::basic_string<char,std::char_traits<char>,std::allocator<char> >::iterator : std::basic_string<char,std::char_traits<char>,std::allocator<char> >::const_iterator
{
};

/* 228 */
struct __cppobj std::bad_alloc : exception
{
};

/* 229 */
struct __cppobj std::ios_base::failure : std::runtime_error
{
};

/* 230 */
struct __cppobj std::ios_base::Init
{
};

/* 231 */
struct __cppobj std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > : std::_Outit
{
  bool _Failed;
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *_Strbuf;
};

/* 232 */
struct __cppobj std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 233 */
struct std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  std::basic_ostream<unsigned short,std::char_traits<unsigned short> > *_Myostr;
};

/* 234 */
struct __cppobj __declspec(align(4)) std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::sentry : std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  bool _Ok;
};

/* 235 */
struct __cppobj std::_Scalar_ptr_iterator_tag
{
};

/* 236 */
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};

/* 237 */
struct __cppobj bad_cast : exception
{
};

/* 238 */
struct $983F061E0B702DD8AE0B4B955735A6A3
{
  unsigned int Lo;
  int Hi;
};

/* 239 */
union tagCY
{
  $983F061E0B702DD8AE0B4B955735A6A3 __s0;
  __int64 int64;
};

/* 240 */
const struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 241 */
struct IUnknown
{
  IUnknownVtbl *vfptr;
};

/* 1701 */
typedef int HRESULT;

/* 242 */
struct IUnknownVtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
};

/* 243 */
struct __cppobj IDispatch : IUnknown
{
};

/* 244 */
struct tagSAFEARRAYBOUND
{
  unsigned int cElements;
  int lLbound;
};

/* 245 */
struct tagSAFEARRAY
{
  unsigned __int16 cDims;
  unsigned __int16 fFeatures;
  unsigned int cbElements;
  unsigned int cLocks;
  void *pvData;
  tagSAFEARRAYBOUND rgsabound[1];
};

/* 253 */
struct $E2F13C0D8C7A5E44CBEA2DDC2BADB614
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  __int64 llVal;
};

/* 247 */
struct $5CC4D6FD2BF4E5B80FE1FD714DCA0CFA
{
  char scale;
  char sign;
};

/* 248 */
union $4E8106DCC232AF6C6FA0BB3F435A7B85
{
  $5CC4D6FD2BF4E5B80FE1FD714DCA0CFA __s0;
  unsigned __int16 signscale;
};

/* 249 */
struct $A04CD8C0331024E133CCEC4B0AB36956
{
  unsigned int Lo32;
  unsigned int Mid32;
};

/* 250 */
union $187F5956209287B9E1464A89F5CD1FE6
{
  $A04CD8C0331024E133CCEC4B0AB36956 __s0;
  unsigned __int64 Lo64;
};

/* 251 */
struct tagDEC
{
  unsigned __int16 wReserved;
  $4E8106DCC232AF6C6FA0BB3F435A7B85 ___u1;
  unsigned int Hi32;
  $187F5956209287B9E1464A89F5CD1FE6 ___u3;
};

/* 254 */
struct $9E6623914B6DFB5A91167371A62B792F
{
  _BYTE gap0[8];
  int lVal;
  IRecordInfo *pRecInfo;
};

/* 255 */
struct $F28A51B4B40B0D33C72915D739D42B4B
{
  _BYTE gap0[8];
  char bVal;
};

/* 256 */
struct $31126B8528A05AF3606C6D495FD178E8
{
  _BYTE gap0[8];
  __int16 iVal;
};

/* 257 */
struct $50230A970D9734D4E9774CFC619DF0F6
{
  _BYTE gap0[8];
  float fltVal;
};

/* 258 */
struct $4C0EC2258454B893CE739DAE89D8DB7B
{
  _BYTE gap0[8];
  long double dblVal;
};

/* 259 */
struct $6DB36323059316E675433BB10D285009
{
  _BYTE gap0[8];
  __int16 boolVal;
};

/* 260 */
struct $8E3C8731874D1B3BC66617C4DD3163A6
{
  _BYTE gap0[8];
  int scode;
};

/* 261 */
struct $6CF10659D06BF7F1EE2F2C7455ACC2BC
{
  _BYTE gap0[8];
  tagCY cyVal;
};

/* 262 */
struct $E94952165EEA9EEA990FEB33603E1B19
{
  _BYTE gap0[8];
  long double date;
};

/* 263 */
struct $C854646156F6772BF5D6F8470C9CCFAF
{
  _BYTE gap0[8];
  unsigned __int16 *bstrVal;
};

/* 264 */
struct $A02AB14CE0F4DC190603D5E1183695A1
{
  _BYTE gap0[8];
  IUnknown *punkVal;
};

/* 265 */
struct $3AE66050BAE3A79C678D8DC5D056C6FC
{
  _BYTE gap0[8];
  IDispatch *pdispVal;
};

/* 266 */
struct $67DA28E1FE082D41D68FC67AD62E0993
{
  _BYTE gap0[8];
  tagSAFEARRAY *parray;
};

/* 267 */
struct $166B1F81F6EA96F97683A65F38FB1A59
{
  _BYTE gap0[8];
  char *pbVal;
};

/* 268 */
struct $76732A64405C0E287FCB302687644550
{
  _BYTE gap0[8];
  __int16 *piVal;
};

/* 269 */
struct $E5FC128E66C26C95254032BA69D36E74
{
  _BYTE gap0[8];
  int *plVal;
};

/* 270 */
struct $E9CDCC48CD0BB58E8F361AA17BFDA76E
{
  _BYTE gap0[8];
  __int64 *pllVal;
};

/* 271 */
struct $BF8CC88CDF129BD6E4FA4ABA13F521AD
{
  _BYTE gap0[8];
  float *pfltVal;
};

/* 272 */
struct $2CABE618CF1C2625A4479554E4967E0A
{
  _BYTE gap0[8];
  long double *pdblVal;
};

/* 273 */
struct $AAA92DA1D6E1B0E8462F69216B62027C
{
  _BYTE gap0[8];
  __int16 *pboolVal;
};

/* 274 */
struct $F7167AE7A8ABA03C094C204FB1564A28
{
  _BYTE gap0[8];
  int *pscode;
};

/* 275 */
struct $A9BCADB6CD82258F427DB205438EB5D4
{
  _BYTE gap0[8];
  tagCY *pcyVal;
};

/* 276 */
struct $6857AE69DB7C952EEFD665431A7B503A
{
  _BYTE gap0[8];
  long double *pdate;
};

/* 277 */
struct $0878F16B0390542D20060EB711608720
{
  _BYTE gap0[8];
  unsigned __int16 **pbstrVal;
};

/* 278 */
struct $B662DE24A3A6D217A4484FCAEA9FBA62
{
  _BYTE gap0[8];
  IUnknown **ppunkVal;
};

/* 279 */
struct $07B5624BB41248985B588A8DE5787880
{
  _BYTE gap0[8];
  IDispatch **ppdispVal;
};

/* 280 */
struct $226A42096A5826DD190B5304FDA476F1
{
  _BYTE gap0[8];
  tagSAFEARRAY **pparray;
};

/* 281 */
struct $AB7537CC5B6A993D127796330F94692A
{
  _BYTE gap0[8];
  tagVARIANT *pvarVal;
};

/* 282 */
struct $6C39A09D97B880131B2C5BB4943CBB45
{
  _BYTE gap0[8];
  void *byref;
};

/* 283 */
struct $E898A5260D8380431CCAA47FCC291563
{
  _BYTE gap0[8];
  char cVal;
};

/* 284 */
struct $48802A31D3D0701BC13CEF9CEA041E7B
{
  _BYTE gap0[8];
  unsigned __int16 uiVal;
};

/* 285 */
struct $B644145F46FF1F932B106BFA6CC3F6D9
{
  _BYTE gap0[8];
  unsigned int ulVal;
};

/* 286 */
struct $EA00B0D50EAA1933F67C45009B664198
{
  _BYTE gap0[8];
  unsigned __int64 ullVal;
};

/* 287 */
struct $5CA90CF57237397281FB12BFD52C1905
{
  _BYTE gap0[8];
  int intVal;
};

/* 288 */
struct $E7F48E2F4EAA3149E57D87E5D1B2C6B8
{
  _BYTE gap0[8];
  unsigned int uintVal;
};

/* 289 */
struct $17C8FC49B5A727F3E73CA092EA525C5C
{
  _BYTE gap0[8];
  tagDEC *pdecVal;
};

/* 290 */
struct $E1D71D20C3D01115E20D79FAE9629CE8
{
  _BYTE gap0[8];
  char *pcVal;
};

/* 291 */
struct $5669F5A4AD19EF2CB42A5602080CB0A6
{
  _BYTE gap0[8];
  unsigned __int16 *puiVal;
};

/* 292 */
struct $886F8AE9D7C8B1B861B6CA58D67B682A
{
  _BYTE gap0[8];
  unsigned int *pulVal;
};

/* 293 */
struct $ADBB94A21537A8461C6168A5B871A740
{
  _BYTE gap0[8];
  unsigned __int64 *pullVal;
};

/* 294 */
struct $CDA73A427DD2A30CDA26CA3394C33CF0
{
  _BYTE gap0[8];
  int *pintVal;
};

/* 295 */
struct $2516E53E690D8CC5659AAB7EDC49E664
{
  _BYTE gap0[8];
  unsigned int *puintVal;
};

/* 296 */
struct $17B4421FDC73B39569D8A12F584CB67F
{
  _BYTE gap0[8];
  void *pvRecord;
};

/* 297 */
union $8E559D010A086F4B79ED632CE4860054
{
  $E2F13C0D8C7A5E44CBEA2DDC2BADB614 __s0;
  tagDEC decVal;
  $9E6623914B6DFB5A91167371A62B792F __s2;
  $F28A51B4B40B0D33C72915D739D42B4B __s3;
  $31126B8528A05AF3606C6D495FD178E8 __s4;
  $50230A970D9734D4E9774CFC619DF0F6 __s5;
  $4C0EC2258454B893CE739DAE89D8DB7B __s6;
  $6DB36323059316E675433BB10D285009 __s7;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s8;
  $6CF10659D06BF7F1EE2F2C7455ACC2BC __s9;
  $E94952165EEA9EEA990FEB33603E1B19 __s10;
  $C854646156F6772BF5D6F8470C9CCFAF __s11;
  $A02AB14CE0F4DC190603D5E1183695A1 __s12;
  $3AE66050BAE3A79C678D8DC5D056C6FC __s13;
  $67DA28E1FE082D41D68FC67AD62E0993 __s14;
  $166B1F81F6EA96F97683A65F38FB1A59 __s15;
  $76732A64405C0E287FCB302687644550 __s16;
  $E5FC128E66C26C95254032BA69D36E74 __s17;
  $E9CDCC48CD0BB58E8F361AA17BFDA76E __s18;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s19;
  $2CABE618CF1C2625A4479554E4967E0A __s20;
  $AAA92DA1D6E1B0E8462F69216B62027C __s21;
  $F7167AE7A8ABA03C094C204FB1564A28 __s22;
  $A9BCADB6CD82258F427DB205438EB5D4 __s23;
  $6857AE69DB7C952EEFD665431A7B503A __s24;
  $0878F16B0390542D20060EB711608720 __s25;
  $B662DE24A3A6D217A4484FCAEA9FBA62 __s26;
  $07B5624BB41248985B588A8DE5787880 __s27;
  $226A42096A5826DD190B5304FDA476F1 __s28;
  $AB7537CC5B6A993D127796330F94692A __s29;
  $6C39A09D97B880131B2C5BB4943CBB45 __s30;
  $E898A5260D8380431CCAA47FCC291563 __s31;
  $48802A31D3D0701BC13CEF9CEA041E7B __s32;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s33;
  $EA00B0D50EAA1933F67C45009B664198 __s34;
  $5CA90CF57237397281FB12BFD52C1905 __s35;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s36;
  $17C8FC49B5A727F3E73CA092EA525C5C __s37;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s38;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s39;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s40;
  $ADBB94A21537A8461C6168A5B871A740 __s41;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s42;
  $2516E53E690D8CC5659AAB7EDC49E664 __s43;
  $17B4421FDC73B39569D8A12F584CB67F __s44;
};

/* 246 */
struct tagVARIANT
{
  $8E559D010A086F4B79ED632CE4860054 ___u0;
};

/* 252 */
struct __cppobj IRecordInfo : IUnknown
{
};

/* 298 */
struct tagPARAMDESCEX
{
  unsigned int cBytes;
  tagVARIANT varDefaultValue;
};

/* 299 */
struct __declspec(align(4)) tagPARAMDESC
{
  tagPARAMDESCEX *pparamdescex;
  unsigned __int16 wParamFlags;
};

/* 302 */
union $5BEFAACCC6E4DC1FBED40FF15EC29DA9
{
  tagTYPEDESC *lptdesc;
  tagARRAYDESC *lpadesc;
  unsigned int hreftype;
};

/* 300 */
struct __declspec(align(4)) tagTYPEDESC
{
  $5BEFAACCC6E4DC1FBED40FF15EC29DA9 ___u0;
  unsigned __int16 vt;
};

/* 301 */
struct __unaligned __declspec(align(4)) tagARRAYDESC
{
  tagTYPEDESC tdescElem;
  unsigned __int16 cDims;
  __declspec(align(4)) tagSAFEARRAYBOUND rgbounds[1];
};

/* 303 */
struct __declspec(align(4)) tagIDLDESC
{
  unsigned int dwReserved;
  unsigned __int16 wIDLFlags;
};

/* 304 */
union $06828BB760E212B0D59C63B75E19D194
{
  tagIDLDESC idldesc;
  tagPARAMDESC paramdesc;
};

/* 305 */
struct tagELEMDESC
{
  tagTYPEDESC tdesc;
  $06828BB760E212B0D59C63B75E19D194 ___u1;
};

/* 306 */
struct __declspec(align(4)) tagFUNCDESC
{
  int memid;
  int *lprgscode;
  tagELEMDESC *lprgelemdescParam;
  tagFUNCKIND funckind;
  tagINVOKEKIND invkind;
  tagCALLCONV callconv;
  __int16 cParams;
  __int16 cParamsOpt;
  __int16 oVft;
  __int16 cScodes;
  tagELEMDESC elemdescFunc;
  unsigned __int16 wFuncFlags;
};

/* 307 */
union $B5CC0E217DD8828AF67A398061547576
{
  unsigned int oInst;
  tagVARIANT *lpvarValue;
};

/* 308 */
struct tagVARDESC
{
  int memid;
  unsigned __int16 *lpstrSchema;
  $B5CC0E217DD8828AF67A398061547576 ___u2;
  tagELEMDESC elemdescVar;
  unsigned __int16 wVarFlags;
  tagVARKIND varkind;
};

/* 309 */
struct __cppobj ITypeComp : IUnknown
{
};

/* 310 */
union tagBINDPTR
{
  tagFUNCDESC *lpfuncdesc;
  tagVARDESC *lpvardesc;
  ITypeComp *lptcomp;
};

/* 311 */
struct __declspec(align(4)) tagTLIBATTR
{
  _GUID guid;
  unsigned int lcid;
  tagSYSKIND syskind;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  unsigned __int16 wLibFlags;
};

/* 312 */
struct tagEXCEPINFO
{
  unsigned __int16 wCode;
  unsigned __int16 wReserved;
  unsigned __int16 *bstrSource;
  unsigned __int16 *bstrDescription;
  unsigned __int16 *bstrHelpFile;
  unsigned int dwHelpContext;
  void *pvReserved;
  HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *);
  int scode;
};

/* 313 */
struct $B950AFB169DC87688B328897744C612F
{
  unsigned int LowPart;
  unsigned int HighPart;
};

/* 314 */
union _ULARGE_INTEGER
{
  $B950AFB169DC87688B328897744C612F __s0;
  $B950AFB169DC87688B328897744C612F u;
  unsigned __int64 QuadPart;
};

/* 315 */
struct _FILETIME
{
  unsigned int dwLowDateTime;
  unsigned int dwHighDateTime;
};

/* 316 */
struct tagSTATSTG
{
  unsigned __int16 *pwcsName;
  unsigned int type;
  _ULARGE_INTEGER cbSize;
  _FILETIME mtime;
  _FILETIME ctime;
  _FILETIME atime;
  unsigned int grfMode;
  unsigned int grfLocksSupported;
  _GUID clsid;
  unsigned int grfStateBits;
  unsigned int reserved;
};

/* 317 */
struct tagCABSTR
{
  unsigned int cElems;
  unsigned __int16 **pElems;
};

/* 318 */
struct tagCACLSID
{
  unsigned int cElems;
  _GUID *pElems;
};

/* 319 */
struct tagCADBL
{
  unsigned int cElems;
  long double *pElems;
};

/* 320 */
struct tagCAUB
{
  unsigned int cElems;
  char *pElems;
};

/* 321 */
struct tagCACY
{
  unsigned int cElems;
  tagCY *pElems;
};

/* 322 */
struct tagCAUL
{
  unsigned int cElems;
  unsigned int *pElems;
};

/* 323 */
struct tagBSTRBLOB
{
  unsigned int cbSize;
  char *pData;
};

/* 324 */
struct $FAF74743FBE1C8632047CFB668F7028A
{
  unsigned int LowPart;
  int HighPart;
};

/* 325 */
union _LARGE_INTEGER
{
  $FAF74743FBE1C8632047CFB668F7028A __s0;
  $FAF74743FBE1C8632047CFB668F7028A u;
  __int64 QuadPart;
};

/* 326 */
struct tagCAH
{
  unsigned int cElems;
  _LARGE_INTEGER *pElems;
};

/* 327 */
struct __cppobj ITypeInfo : IUnknown
{
};

/* 328 */
struct tagCAUI
{
  unsigned int cElems;
  unsigned __int16 *pElems;
};

/* 329 */
struct tagCAFILETIME
{
  unsigned int cElems;
  _FILETIME *pElems;
};

/* 330 */
struct tagDISPPARAMS
{
  tagVARIANT *rgvarg;
  int *rgdispidNamedArgs;
  unsigned int cArgs;
  unsigned int cNamedArgs;
};

/* 331 */
struct tagCLIPDATA
{
  unsigned int cbSize;
  int ulClipFmt;
  char *pClipData;
};

/* 332 */
struct tagBLOB
{
  unsigned int cbSize;
  char *pBlobData;
};

/* 333 */
struct __cppobj ISequentialStream : IUnknown
{
};

/* 334 */
struct __cppobj IStream : ISequentialStream
{
};

/* 335 */
struct __cppobj IStorage : IUnknown
{
};

/* 336 */
struct tagVersionedStream
{
  _GUID guidVersion;
  IStream *pStream;
};

/* 337 */
struct tagCAC
{
  unsigned int cElems;
  char *pElems;
};

/* 338 */
struct tagCAI
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 339 */
struct tagCAL
{
  unsigned int cElems;
  int *pElems;
};

/* 340 */
struct tagCAUH
{
  unsigned int cElems;
  _ULARGE_INTEGER *pElems;
};

/* 341 */
struct tagCAFLT
{
  unsigned int cElems;
  float *pElems;
};

/* 342 */
struct tagCABOOL
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 343 */
struct tagCASCODE
{
  unsigned int cElems;
  int *pElems;
};

/* 344 */
struct tagCADATE
{
  unsigned int cElems;
  long double *pElems;
};

/* 345 */
struct tagCACLIPDATA
{
  unsigned int cElems;
  tagCLIPDATA *pElems;
};

/* 346 */
struct tagCABSTRBLOB
{
  unsigned int cElems;
  tagBSTRBLOB *pElems;
};

/* 347 */
struct tagCALPSTR
{
  unsigned int cElems;
  char **pElems;
};

/* 348 */
struct tagCALPWSTR
{
  unsigned int cElems;
  unsigned __int16 **pElems;
};

/* 349 */
struct tagCAPROPVARIANT
{
  unsigned int cElems;
  tagPROPVARIANT *pElems;
};

/* 351 */
struct __unaligned __declspec(align(1)) $5DF3780F58367B9F2537DF425A8A812E
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  char cVal;
};

/* 352 */
struct $6D336DA143C556260FF80C12817B08DB
{
  _BYTE gap0[8];
  int lVal;
};

/* 353 */
struct $3964AC0C4D2FE9F3B68E5FE291DB2B44
{
  _BYTE gap0[8];
  _LARGE_INTEGER hVal;
};

/* 354 */
struct $280D07440A6849571A01FF8C74938527
{
  _BYTE gap0[8];
  _ULARGE_INTEGER uhVal;
};

/* 355 */
struct $CF82158B44DFEC2430290BDFEE48FB7F
{
  _BYTE gap0[8];
  _FILETIME filetime;
};

/* 356 */
struct $BEE037087874B9B9A77B7B9E940D1A93
{
  _BYTE gap0[8];
  _GUID *puuid;
};

/* 357 */
struct $95960F10B3CE462D8E88F230BBE71A9D
{
  _BYTE gap0[8];
  tagCLIPDATA *pclipdata;
};

/* 358 */
struct $14689ADE37B84178ADCDC7FC237A96C1
{
  _BYTE gap0[8];
  tagBSTRBLOB bstrblobVal;
};

/* 359 */
struct $03C3991D44E7EE3E965734177BFD748F
{
  _BYTE gap0[8];
  tagBLOB blob;
};

/* 360 */
struct $17BA733FE6B8BEB3CC80B954432F0727
{
  _BYTE gap0[8];
  char *pszVal;
};

/* 361 */
struct $EBA1CD9B4FB6C45FF9EDB12F2AB230DE
{
  _BYTE gap0[8];
  unsigned __int16 *pwszVal;
};

/* 362 */
struct $0A8591B266E3FCF6DE3D5AEDF8CB742E
{
  _BYTE gap0[8];
  IStream *pStream;
};

/* 363 */
struct $A6C1671CC652D0DEA2F514B32F07B1CF
{
  _BYTE gap0[8];
  IStorage *pStorage;
};

/* 364 */
struct $A497613C1BABCC13AC6AF0A8DC120B58
{
  _BYTE gap0[8];
  tagVersionedStream *pVersionedStream;
};

/* 365 */
struct $8420A5B903746C3A54E4604EBEA8DC4F
{
  _BYTE gap0[8];
  tagCAC cac;
};

/* 366 */
struct $E11139B17A9CDF34D878AC4DCC6ADB21
{
  _BYTE gap0[8];
  tagCAUB caub;
};

/* 367 */
struct $6027F7E7EA813DE408D0DA186277EBB5
{
  _BYTE gap0[8];
  tagCAI cai;
};

/* 368 */
struct $25909D75B5331D5E106A9A6BF78FBDBE
{
  _BYTE gap0[8];
  tagCAUI caui;
};

/* 369 */
struct $248154FB474382A34CBFCB6B0B7FBA69
{
  _BYTE gap0[8];
  tagCAL cal;
};

/* 370 */
struct $867C8FE609686FBD1E1163C56E226155
{
  _BYTE gap0[8];
  tagCAUL caul;
};

/* 371 */
struct $3BE9E8DD3A56BE1C11BCC0CA7C6EB53A
{
  _BYTE gap0[8];
  tagCAH cah;
};

/* 372 */
struct $577D583B91F21424D3B8EC5637C8839F
{
  _BYTE gap0[8];
  tagCAUH cauh;
};

/* 373 */
struct $B126D3B213EC396B7950B5B77A30F903
{
  _BYTE gap0[8];
  tagCAFLT caflt;
};

/* 374 */
struct $B59583029BE0747EF8845095AC42DC26
{
  _BYTE gap0[8];
  tagCADBL cadbl;
};

/* 375 */
struct $6628202146D6A8991925702603B50AA5
{
  _BYTE gap0[8];
  tagCABOOL cabool;
};

/* 376 */
struct $A2F1CB0A70BDCE7315D24C7B9C39121F
{
  _BYTE gap0[8];
  tagCASCODE cascode;
};

/* 377 */
struct $0D4B34525BCEFD1D84FA829873B38D50
{
  _BYTE gap0[8];
  tagCACY cacy;
};

/* 378 */
struct $6323B7F0FBFFBEA3AF9B0B697240BF25
{
  _BYTE gap0[8];
  tagCADATE cadate;
};

/* 379 */
struct $18736D9553648C41773F2A1E229CCC81
{
  _BYTE gap0[8];
  tagCAFILETIME cafiletime;
};

/* 380 */
struct $8F7ED20207AC984AEB34A087E99DB970
{
  _BYTE gap0[8];
  tagCACLSID cauuid;
};

/* 381 */
struct $27866B6B2F52B6D829FBD6B4B2745DFD
{
  _BYTE gap0[8];
  tagCACLIPDATA caclipdata;
};

/* 382 */
struct $74B8E3827F9CE15EF796B2D0330E226D
{
  _BYTE gap0[8];
  tagCABSTR cabstr;
};

/* 383 */
struct $819174FACFAE427D6EFE5A6D2E5242B7
{
  _BYTE gap0[8];
  tagCABSTRBLOB cabstrblob;
};

/* 384 */
struct $61BB733B6A5D0180B856DAAE1DC97683
{
  _BYTE gap0[8];
  tagCALPSTR calpstr;
};

/* 385 */
struct $819E8720D55E69732D1F2913D6ECCD33
{
  _BYTE gap0[8];
  tagCALPWSTR calpwstr;
};

/* 386 */
struct $31BD2569FE4297ABAC141D1E0F9DA7B4
{
  _BYTE gap0[8];
  tagCAPROPVARIANT capropvar;
};

/* 387 */
struct $494E41610642C3882F8198F9D64A2671
{
  _BYTE gap0[8];
  tagPROPVARIANT *pvarVal;
};

/* 388 */
union $225D2D76F105E2354F96B108A5EE9F72
{
  $5DF3780F58367B9F2537DF425A8A812E __s0;
  tagDEC decVal;
  $F28A51B4B40B0D33C72915D739D42B4B __s2;
  $31126B8528A05AF3606C6D495FD178E8 __s3;
  $48802A31D3D0701BC13CEF9CEA041E7B __s4;
  $6D336DA143C556260FF80C12817B08DB __s5;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s6;
  $5CA90CF57237397281FB12BFD52C1905 __s7;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s8;
  $3964AC0C4D2FE9F3B68E5FE291DB2B44 __s9;
  $280D07440A6849571A01FF8C74938527 __s10;
  $50230A970D9734D4E9774CFC619DF0F6 __s11;
  $4C0EC2258454B893CE739DAE89D8DB7B __s12;
  $6DB36323059316E675433BB10D285009 __s13;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s14;
  $6CF10659D06BF7F1EE2F2C7455ACC2BC __s15;
  $E94952165EEA9EEA990FEB33603E1B19 __s16;
  $CF82158B44DFEC2430290BDFEE48FB7F __s17;
  $BEE037087874B9B9A77B7B9E940D1A93 __s18;
  $95960F10B3CE462D8E88F230BBE71A9D __s19;
  $C854646156F6772BF5D6F8470C9CCFAF __s20;
  $14689ADE37B84178ADCDC7FC237A96C1 __s21;
  $03C3991D44E7EE3E965734177BFD748F __s22;
  $17BA733FE6B8BEB3CC80B954432F0727 __s23;
  $EBA1CD9B4FB6C45FF9EDB12F2AB230DE __s24;
  $A02AB14CE0F4DC190603D5E1183695A1 __s25;
  $3AE66050BAE3A79C678D8DC5D056C6FC __s26;
  $0A8591B266E3FCF6DE3D5AEDF8CB742E __s27;
  $A6C1671CC652D0DEA2F514B32F07B1CF __s28;
  $A497613C1BABCC13AC6AF0A8DC120B58 __s29;
  $67DA28E1FE082D41D68FC67AD62E0993 __s30;
  $8420A5B903746C3A54E4604EBEA8DC4F __s31;
  $E11139B17A9CDF34D878AC4DCC6ADB21 __s32;
  $6027F7E7EA813DE408D0DA186277EBB5 __s33;
  $25909D75B5331D5E106A9A6BF78FBDBE __s34;
  $248154FB474382A34CBFCB6B0B7FBA69 __s35;
  $867C8FE609686FBD1E1163C56E226155 __s36;
  $3BE9E8DD3A56BE1C11BCC0CA7C6EB53A __s37;
  $577D583B91F21424D3B8EC5637C8839F __s38;
  $B126D3B213EC396B7950B5B77A30F903 __s39;
  $B59583029BE0747EF8845095AC42DC26 __s40;
  $6628202146D6A8991925702603B50AA5 __s41;
  $A2F1CB0A70BDCE7315D24C7B9C39121F __s42;
  $0D4B34525BCEFD1D84FA829873B38D50 __s43;
  $6323B7F0FBFFBEA3AF9B0B697240BF25 __s44;
  $18736D9553648C41773F2A1E229CCC81 __s45;
  $8F7ED20207AC984AEB34A087E99DB970 __s46;
  $27866B6B2F52B6D829FBD6B4B2745DFD __s47;
  $74B8E3827F9CE15EF796B2D0330E226D __s48;
  $819174FACFAE427D6EFE5A6D2E5242B7 __s49;
  $61BB733B6A5D0180B856DAAE1DC97683 __s50;
  $819E8720D55E69732D1F2913D6ECCD33 __s51;
  $31BD2569FE4297ABAC141D1E0F9DA7B4 __s52;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s53;
  $166B1F81F6EA96F97683A65F38FB1A59 __s54;
  $76732A64405C0E287FCB302687644550 __s55;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s56;
  $E5FC128E66C26C95254032BA69D36E74 __s57;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s58;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s59;
  $2516E53E690D8CC5659AAB7EDC49E664 __s60;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s61;
  $2CABE618CF1C2625A4479554E4967E0A __s62;
  $AAA92DA1D6E1B0E8462F69216B62027C __s63;
  $17C8FC49B5A727F3E73CA092EA525C5C __s64;
  $F7167AE7A8ABA03C094C204FB1564A28 __s65;
  $A9BCADB6CD82258F427DB205438EB5D4 __s66;
  $6857AE69DB7C952EEFD665431A7B503A __s67;
  $0878F16B0390542D20060EB711608720 __s68;
  $B662DE24A3A6D217A4484FCAEA9FBA62 __s69;
  $07B5624BB41248985B588A8DE5787880 __s70;
  $226A42096A5826DD190B5304FDA476F1 __s71;
  $494E41610642C3882F8198F9D64A2671 __s72;
};

/* 350 */
struct tagPROPVARIANT
{
  $225D2D76F105E2354F96B108A5EE9F72 ___u0;
};

/* 389 */
struct tagTYPEATTR
{
  _GUID guid;
  unsigned int lcid;
  unsigned int dwReserved;
  int memidConstructor;
  int memidDestructor;
  unsigned __int16 *lpstrSchema;
  unsigned int cbSizeInstance;
  tagTYPEKIND typekind;
  unsigned __int16 cFuncs;
  unsigned __int16 cVars;
  unsigned __int16 cImplTypes;
  unsigned __int16 cbSizeVft;
  unsigned __int16 cbAlignment;
  unsigned __int16 wTypeFlags;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  tagTYPEDESC tdescAlias;
  tagIDLDESC idldescType;
};

/* 390 */
struct __cppobj IEnumSTATSTG : IUnknown
{
};

/* 391 */
struct __cppobj ITypeLib : IUnknown
{
};

/* 392 */
struct __cppobj std::_Allocator_base<BS_Thread *>
{
};

/* 393 */
struct __cppobj std::allocator<BS_Thread *> : std::_Allocator_base<BS_Thread *>
{
};

/* 394 */
struct std::_Vector_val<BS_Thread *,std::allocator<BS_Thread *> >
{
  std::allocator<BS_Thread *> _Alval;
};

/* 397 */
struct __cppobj std::_Allocator_base<unsigned short>
{
};

/* 398 */
struct __cppobj std::allocator<unsigned short> : std::_Allocator_base<unsigned short>
{
};

/* 399 */
struct __cppobj std::_String_val<unsigned short,std::allocator<unsigned short> > : std::_String_base
{
  std::allocator<unsigned short> _Alval;
};

/* 400 */
union std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >::_Bxty
{
  unsigned __int16 _Buf[8];
  unsigned __int16 *_Ptr;
};

/* 401 */
struct __cppobj std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > : std::_String_val<unsigned short,std::allocator<unsigned short> >
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >::_Bxty _Bx;
  unsigned int _Mysize;
  unsigned int _Myres;
};

/* 395 */
struct BS_Thread
{
  BS_ThreadVtbl *vfptr;
  void *m_Handle;
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > m_Name;
  unsigned int m_ThreadID;
};

/* 396 */
struct BS_ThreadVtbl
{
  void *(__thiscall *__vecDelDtor)(BS_Thread *this, unsigned int);
  bool (__thiscall *PreRun)(BS_Thread *this);
  bool (__thiscall *Run)(BS_Thread *this);
  bool (__thiscall *End)(BS_Thread *this);
};

/* 402 */
struct __cppobj std::vector<BS_Thread *,std::allocator<BS_Thread *> > : std::_Vector_val<BS_Thread *,std::allocator<BS_Thread *> >
{
  BS_Thread **_Myfirst;
  BS_Thread **_Mylast;
  BS_Thread **_Myend;
};

/* 403 */
struct BS_ThreadMgr
{
  std::vector<BS_Thread *,std::allocator<BS_Thread *> > m_ThreadList;
  volatile int m_bJoinStarted;
};

/* 404 */
struct __cppobj std::binary_function<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bool>
{
};

/* 405 */
struct __cppobj std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > : std::binary_function<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bool>
{
};

/* 406 */
struct std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0>
{
  std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > comp;
};

/* 407 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node>
{
};

/* 408 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node>
{
};

/* 409 */
struct __cppobj std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> > : std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0>
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node> _Alnod;
};

/* 410 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *>
{
};

/* 411 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *>
{
};

/* 412 */
struct __cppobj std::_Tree_ptr<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> > : std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *> _Alptr;
};

/* 413 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >
{
};

/* 414 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> > : std::_Allocator_base<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >
{
};

/* 415 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> > : std::_Tree_ptr<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >
{
  std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> > _Alval;
};

/* 416 */
struct __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *_Right;
  std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> _Myval;
  char _Color;
  char _Isnil;
};

/* 417 */
struct BS_CompletionHandler
{
  void *m_hIOCP;
  unsigned int m_nThread;
  unsigned int m_nTimeOutMS;
};

/* 418 */
struct BS_CompletionHandlerMgr::BS_CompletionInfo
{
  BS_CompletionHandler *m_pIOCP;
  std::vector<BS_Thread *,std::allocator<BS_Thread *> > m_ThreadList;
};

/* 419 */
struct std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo>
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > first;
  BS_CompletionHandlerMgr::BS_CompletionInfo second;
};

/* 420 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> > : std::_Tree_val<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 421 */
struct __cppobj std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> > > : std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >
{
};

/* 422 */
struct BS_CompletionHandlerMgr
{
  BS_ThreadMgr m_IOCPThreadMgr;
  std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> > > m_IOCPList;
};

/* 423 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> const &>
{
};

/* 424 */
struct __cppobj std::_Bidit<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> const &> : std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> const &>
{
};

/* 425 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::const_iterator : std::_Bidit<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> const &>
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *_Ptr;
};

/* 426 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::iterator : std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::const_iterator
{
};

/* 427 */
struct __cppobj std::iterator<std::random_access_iterator_tag,BS_Thread *,int,BS_Thread * const *,BS_Thread * const &>
{
};

/* 428 */
struct __cppobj std::_Ranit<BS_Thread *,int,BS_Thread * const *,BS_Thread * const &> : std::iterator<std::random_access_iterator_tag,BS_Thread *,int,BS_Thread * const *,BS_Thread * const &>
{
};

/* 429 */
struct __cppobj std::vector<BS_Thread *,std::allocator<BS_Thread *> >::const_iterator : std::_Ranit<BS_Thread *,int,BS_Thread * const *,BS_Thread * const &>
{
  BS_Thread **_Myptr;
};

/* 430 */
struct __cppobj std::vector<BS_Thread *,std::allocator<BS_Thread *> >::iterator : std::vector<BS_Thread *,std::allocator<BS_Thread *> >::const_iterator
{
};

/* 431 */
struct BS_StrUtils::BS_FmtStr<64>
{
  wchar_t *m_pBuffer;
  int m_BufferLen;
};

/* 432 */
struct __cppobj BS_IOWorker : BS_Thread
{
  BS_CompletionHandler *m_pIOCP;
};

/* 433 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 434 */
union $A5A483E05FC9B52B872A8DCFA58CFF52
{
  unsigned int Offset;
  void *Pointer;
};

/* 435 */
struct _OVERLAPPED
{
  unsigned int Internal;
  unsigned int InternalHigh;
  $A5A483E05FC9B52B872A8DCFA58CFF52 ___u2;
  unsigned int OffsetHigh;
  void *hEvent;
};

/* 436 */
struct BS_RefCount
{
  BS_RefCountVtbl *vfptr;
  int m_RefCount;
};

/* 437 */
struct BS_RefCountVtbl
{
  bool (__thiscall *Release)(BS_RefCount *this);
};

/* 438 */
struct __cppobj BS_Overlapped : BS_RefCount, _OVERLAPPED
{
};

/* 439 */
struct __cppobj BS_ThrowinOverlapped : BS_Overlapped
{
  BS_CompletionHandler *const m_pIOCP;
  unsigned int m_ThreadID;
  void *m_CallBackPtr;
  unsigned int m_ThrowCount;
};

/* 440 */
struct __cppobj std::iterator<std::random_access_iterator_tag,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &>
{
};

/* 441 */
struct __cppobj std::_Allocator_base<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >
{
};

/* 442 */
struct __cppobj std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > : std::_Allocator_base<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >
{
};

/* 443 */
struct __cppobj std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >::rebind<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >
{
};

/* 444 */
struct __cppobj std::iterator<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &>
{
};

/* 445 */
struct __cppobj std::allocator<BS_Thread *>::rebind<BS_Thread *>
{
};

/* 446 */
struct std::pair<unsigned short const *,BS_CompletionHandlerMgr::BS_CompletionInfo>
{
  const wchar_t *first;
  BS_CompletionHandlerMgr::BS_CompletionInfo second;
};

/* 447 */
struct __cppobj std::_Ranit<unsigned short,int,unsigned short const *,unsigned short const &> : std::iterator<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &>
{
};

/* 448 */
struct std::_Vector_val<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >
{
  std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > _Alval;
};

/* 449 */
struct __cppobj std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > : std::_Vector_val<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *_Myfirst;
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *_Mylast;
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *_Myend;
};

/* 450 */
struct __cppobj std::_Ranit<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &> : std::iterator<std::random_access_iterator_tag,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &>
{
};

/* 451 */
struct __cppobj std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >::const_iterator : std::_Ranit<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &>
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *_Myptr;
};

/* 452 */
struct __cppobj std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >::iterator : std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >::const_iterator
{
};

/* 453 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >::rebind<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >
{
};

/* 454 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node>
{
};

/* 455 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::_Node *>
{
};

/* 456 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >::rebind<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >
{
};

/* 457 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >::rebind<char>
{
};

/* 458 */
struct __cppobj std::allocator<unsigned short>::rebind<unsigned short>
{
};

/* 459 */
struct __declspec(align(4)) std::pair<std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::iterator,bool>
{
  std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_CompletionHandlerMgr::BS_CompletionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_CompletionHandlerMgr::BS_CompletionInfo> >,0> >::iterator first;
  bool second;
};

/* 460 */
struct __cppobj std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >::const_iterator : std::_Ranit<unsigned short,int,unsigned short const *,unsigned short const &>
{
  const unsigned __int16 *_Myptr;
};

/* 461 */
struct __cppobj std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >::iterator : std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >::const_iterator
{
};

/* 462 */
struct __cppobj std::_Nonscalar_ptr_iterator_tag
{
};

/* 463 */
struct _RTL_CRITICAL_SECTION
{
  _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
  int LockCount;
  int RecursionCount;
  void *OwningThread;
  void *LockSemaphore;
  unsigned int SpinCount;
};

/* 464 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  unsigned __int16 Type;
  unsigned __int16 CreatorBackTraceIndex;
  _RTL_CRITICAL_SECTION *CriticalSection;
  _LIST_ENTRY ProcessLocksList;
  unsigned int EntryCount;
  unsigned int ContentionCount;
  unsigned int Spare[2];
};

/* 465 */
struct BS_CriticalSection
{
  _RTL_CRITICAL_SECTION m_csLock;
};

/* 466 */
struct BS_SpinLock
{
  volatile int m_bLocked;
};

/* 467 */
struct BS_StrUtils::BS_MBtoWide
{
  wchar_t *m_pBuffer;
  int m_BufferLen;
};

/* 468 */
struct BS_StrUtils::BS_Token
{
  std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > m_TokenList;
};

/* 469 */
struct BS_StrUtils::BS_WidetoMB
{
  char *m_pBuffer;
  int m_BufferLen;
};

/* 470 */
struct BS_PendingCount
{
  int m_nCount;
};

/* 471 */
struct __cppobj BS_OverlappedPendding : BS_Overlapped
{
  BS_PendingCount *m_PendingCount;
};

/* 472 */
struct BS_Thread::BS_ThreadInfo
{
  unsigned int dwType;
  const char *szName;
  unsigned int dwThreadID;
  unsigned int dwFlags;
};

/* 475 */
struct std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0>
{
  std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > comp;
};

/* 476 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node>
{
};

/* 477 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node>
{
};

/* 478 */
struct __cppobj std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> > : std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0>
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node> _Alnod;
};

/* 479 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *>
{
};

/* 480 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *>
{
};

/* 481 */
struct __cppobj std::_Tree_ptr<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> > : std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *> _Alptr;
};

/* 482 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >
{
};

/* 483 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> > : std::_Allocator_base<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >
{
};

/* 484 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> > : std::_Tree_ptr<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >
{
  std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> > _Alval;
};

/* 489 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> > : std::_Tree_val<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 490 */
struct __cppobj std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >
{
};

/* 473 */
struct BS_PoolMgr
{
  BS_PoolMgrVtbl *vfptr;
  BS_SpinLock m_PoolMgrLock;
  std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> > > m_Pools;
};

/* 474 */
struct BS_PoolMgrVtbl
{
  void *(__thiscall *__vecDelDtor)(BS_PoolMgr *this, unsigned int);
};

/* 485 */
struct __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *_Right;
  std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> _Myval;
  char _Color;
  char _Isnil;
};

/* 486 */
struct BS_Pool
{
  BS_PoolVtbl *vfptr;
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > m_PoolID;
};

/* 487 */
struct BS_PoolVtbl
{
  void *(__thiscall *__vecDelDtor)(BS_Pool *this, unsigned int);
};

/* 488 */
struct std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *>
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > first;
  BS_Pool *second;
};

/* 491 */
struct __cppobj BS_SingletonHeap<BS_MemPoolMgr,2>
{
};

/* 492 */
struct __cppobj __declspec(align(4)) BS_MemPoolMgr : BS_PoolMgr, BS_SingletonHeap<BS_MemPoolMgr,2>
{
  _BYTE gap14[1];
};

/* 493 */
struct __cppobj std::_Allocator_base<BS_MemPool *>
{
};

/* 494 */
struct __cppobj std::allocator<BS_MemPool *> : std::_Allocator_base<BS_MemPool *>
{
};

/* 495 */
struct std::_Vector_val<BS_MemPool *,std::allocator<BS_MemPool *> >
{
  std::allocator<BS_MemPool *> _Alval;
};

/* 496 */
struct __cppobj std::_Allocator_base<char *>
{
};

/* 497 */
struct __cppobj std::allocator<char *> : std::_Allocator_base<char *>
{
};

/* 498 */
struct std::_Vector_val<char *,std::allocator<char *> >
{
  std::allocator<char *> _Alval;
};

/* 499 */
struct __cppobj std::vector<char *,std::allocator<char *> > : std::_Vector_val<char *,std::allocator<char *> >
{
  char **_Myfirst;
  char **_Mylast;
  char **_Myend;
};

/* 500 */
struct __cppobj std::_Allocator_base<std::_List_nod<char *,std::allocator<char *> >::_Node>
{
};

/* 501 */
struct __cppobj std::allocator<std::_List_nod<char *,std::allocator<char *> >::_Node> : std::_Allocator_base<std::_List_nod<char *,std::allocator<char *> >::_Node>
{
};

/* 502 */
struct std::_List_nod<char *,std::allocator<char *> >
{
  std::allocator<std::_List_nod<char *,std::allocator<char *> >::_Node> _Alnod;
};

/* 503 */
struct __cppobj std::_Allocator_base<std::_List_nod<char *,std::allocator<char *> >::_Node *>
{
};

/* 504 */
struct __cppobj std::allocator<std::_List_nod<char *,std::allocator<char *> >::_Node *> : std::_Allocator_base<std::_List_nod<char *,std::allocator<char *> >::_Node *>
{
};

/* 505 */
struct __cppobj std::_List_ptr<char *,std::allocator<char *> > : std::_List_nod<char *,std::allocator<char *> >
{
  std::allocator<std::_List_nod<char *,std::allocator<char *> >::_Node *> _Alptr;
};

/* 506 */
struct __cppobj std::_List_val<char *,std::allocator<char *> > : std::_List_ptr<char *,std::allocator<char *> >
{
  std::allocator<char *> _Alval;
};

/* 507 */
struct std::_List_nod<char *,std::allocator<char *> >::_Node
{
  std::_List_nod<char *,std::allocator<char *> >::_Node *_Next;
  std::_List_nod<char *,std::allocator<char *> >::_Node *_Prev;
  char *_Myval;
};

/* 508 */
struct __cppobj std::list<char *,std::allocator<char *> > : std::_List_val<char *,std::allocator<char *> >
{
  std::_List_nod<char *,std::allocator<char *> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 509 */
struct __cppobj std::_Allocator_base<BS_ChunkList *>
{
};

/* 510 */
struct __cppobj std::allocator<BS_ChunkList *> : std::_Allocator_base<BS_ChunkList *>
{
};

/* 511 */
struct std::_Vector_val<BS_ChunkList *,std::allocator<BS_ChunkList *> >
{
  std::allocator<BS_ChunkList *> _Alval;
};

/* 514 */
struct __cppobj std::vector<BS_ChunkList *,std::allocator<BS_ChunkList *> > : std::_Vector_val<BS_ChunkList *,std::allocator<BS_ChunkList *> >
{
  BS_ChunkList **_Myfirst;
  BS_ChunkList **_Mylast;
  BS_ChunkList **_Myend;
};

/* 512 */
struct __cppobj BS_MemPool : BS_Pool
{
  std::vector<char *,std::allocator<char *> > m_ChunkGroupList;
  std::list<char *,std::allocator<char *> > m_ChunkCache;
  std::vector<BS_ChunkList *,std::allocator<BS_ChunkList *> > m_ChunkMgr;
  unsigned int m_nPerAllocSize;
  unsigned int m_nAllocNum;
  BS_SpinLock m_ChunkGroupLock;
  BS_SpinLock m_ChunkCacheLock;
  BS_SpinLock m_ChunkListLock;
  BS_Log *MemPoolLog;
};

/* 513 */
struct BS_ChunkList
{
  std::list<char *,std::allocator<char *> > m_List;
  BS_SpinLock m_ChunkListLock;
  BS_MemPool *m_pMemPool;
  int m_nInUse;
  unsigned int m_nAllocCacheNum;
};

/* 515 */
struct BS_Stream::sBuffer<unsigned short>
{
  unsigned __int16 *Buf;
  unsigned int Len;
};

/* 516 */
struct __cppobj __declspec(align(8)) BS_Stream : std::basic_ostream<unsigned short,std::char_traits<unsigned short> >
{
  _BYTE gap38[16];
};

/* 517 */
struct __cppobj BS_Log : BS_Pool
{
  BS_Stream *m_pStream;
};

/* 518 */
struct __cppobj std::vector<BS_MemPool *,std::allocator<BS_MemPool *> > : std::_Vector_val<BS_MemPool *,std::allocator<BS_MemPool *> >
{
  BS_MemPool **_Myfirst;
  BS_MemPool **_Mylast;
  BS_MemPool **_Myend;
};

/* 519 */
struct __cppobj std::iterator<std::random_access_iterator_tag,BS_MemPool *,int,BS_MemPool * const *,BS_MemPool * const &>
{
};

/* 520 */
struct __cppobj std::_Ranit<BS_MemPool *,int,BS_MemPool * const *,BS_MemPool * const &> : std::iterator<std::random_access_iterator_tag,BS_MemPool *,int,BS_MemPool * const *,BS_MemPool * const &>
{
};

/* 521 */
struct __cppobj std::vector<BS_MemPool *,std::allocator<BS_MemPool *> >::const_iterator : std::_Ranit<BS_MemPool *,int,BS_MemPool * const *,BS_MemPool * const &>
{
  BS_MemPool **_Myptr;
};

/* 522 */
struct __cppobj std::vector<BS_MemPool *,std::allocator<BS_MemPool *> >::iterator : std::vector<BS_MemPool *,std::allocator<BS_MemPool *> >::const_iterator
{
};

/* 523 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> const &>
{
};

/* 524 */
struct __cppobj std::_Bidit<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> const &> : std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> const &>
{
};

/* 525 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::const_iterator : std::_Bidit<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> const &>
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *_Ptr;
};

/* 526 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::iterator : std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::const_iterator
{
};

/* 527 */
struct std::pair<unsigned long,void (__cdecl*)(void)>
{
  unsigned int first;
  void (__cdecl *second)();
};

/* 528 */
struct __cppobj std::_Allocator_base<std::pair<unsigned long,void (__cdecl*)(void)> >
{
};

/* 529 */
struct __cppobj std::binary_function<std::pair<unsigned long,void (__cdecl*)(void)>,std::pair<unsigned long,void (__cdecl*)(void)>,bool>
{
};

/* 530 */
struct __cppobj std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > : std::_Allocator_base<std::pair<unsigned long,void (__cdecl*)(void)> >
{
};

/* 531 */
struct __cppobj std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> >::rebind<std::pair<unsigned long,void (__cdecl*)(void)> >
{
};

/* 532 */
struct std::_Vector_val<std::pair<unsigned long,void (__cdecl*)(void)>,std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > >
{
  std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > _Alval;
};

/* 533 */
struct __cppobj std::less<std::pair<unsigned long,void (__cdecl*)(void)> > : std::binary_function<std::pair<unsigned long,void (__cdecl*)(void)>,std::pair<unsigned long,void (__cdecl*)(void)>,bool>
{
};

/* 534 */
struct __cppobj std::vector<std::pair<unsigned long,void (__cdecl*)(void)>,std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > > : std::_Vector_val<std::pair<unsigned long,void (__cdecl*)(void)>,std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > >
{
  std::pair<unsigned long,void (__cdecl*)(void)> *_Myfirst;
  std::pair<unsigned long,void (__cdecl*)(void)> *_Mylast;
  std::pair<unsigned long,void (__cdecl*)(void)> *_Myend;
};

/* 535 */
struct __cppobj std::iterator<std::random_access_iterator_tag,std::pair<unsigned long,void (__cdecl*)(void)>,int,std::pair<unsigned long,void (__cdecl*)(void)> const *,std::pair<unsigned long,void (__cdecl*)(void)> const &>
{
};

/* 536 */
struct __cppobj std::_Ranit<std::pair<unsigned long,void (__cdecl*)(void)>,int,std::pair<unsigned long,void (__cdecl*)(void)> const *,std::pair<unsigned long,void (__cdecl*)(void)> const &> : std::iterator<std::random_access_iterator_tag,std::pair<unsigned long,void (__cdecl*)(void)>,int,std::pair<unsigned long,void (__cdecl*)(void)> const *,std::pair<unsigned long,void (__cdecl*)(void)> const &>
{
};

/* 537 */
struct __cppobj std::vector<std::pair<unsigned long,void (__cdecl*)(void)>,std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > >::const_iterator : std::_Ranit<std::pair<unsigned long,void (__cdecl*)(void)>,int,std::pair<unsigned long,void (__cdecl*)(void)> const *,std::pair<unsigned long,void (__cdecl*)(void)> const &>
{
  std::pair<unsigned long,void (__cdecl*)(void)> *_Myptr;
};

/* 538 */
struct __cppobj std::vector<std::pair<unsigned long,void (__cdecl*)(void)>,std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > >::iterator : std::vector<std::pair<unsigned long,void (__cdecl*)(void)>,std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > >::const_iterator
{
};

/* 539 */
struct __declspec(align(4)) std::pair<std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::iterator,bool>
{
  std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::iterator first;
  bool second;
};

/* 540 */
struct __cppobj std::allocator<BS_MemPool *>::rebind<BS_MemPool *>
{
};

/* 541 */
struct __declspec(align(4)) std::priority_queue<std::pair<unsigned long,void (__cdecl*)(void)>,std::vector<std::pair<unsigned long,void (__cdecl*)(void)>,std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > >,std::less<std::pair<unsigned long,void (__cdecl*)(void)> > >
{
  std::vector<std::pair<unsigned long,void (__cdecl*)(void)>,std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > > c;
  std::less<std::pair<unsigned long,void (__cdecl*)(void)> > comp;
};

/* 542 */
struct __cppobj std::allocator<char *>::rebind<std::_List_nod<char *,std::allocator<char *> >::_Node>
{
};

/* 543 */
struct __cppobj std::allocator<char *>::rebind<std::_List_nod<char *,std::allocator<char *> >::_Node *>
{
};

/* 544 */
struct __cppobj std::allocator<char *>::rebind<char *>
{
};

/* 545 */
struct __cppobj std::iterator<std::random_access_iterator_tag,char *,int,char * const *,char * const &>
{
};

/* 546 */
struct __cppobj std::_Ranit<char *,int,char * const *,char * const &> : std::iterator<std::random_access_iterator_tag,char *,int,char * const *,char * const &>
{
};

/* 547 */
struct __cppobj std::vector<char *,std::allocator<char *> >::const_iterator : std::_Ranit<char *,int,char * const *,char * const &>
{
  char **_Myptr;
};

/* 548 */
struct __cppobj std::vector<char *,std::allocator<char *> >::iterator : std::vector<char *,std::allocator<char *> >::const_iterator
{
};

/* 549 */
struct __cppobj std::iterator<std::random_access_iterator_tag,BS_ChunkList *,int,BS_ChunkList * const *,BS_ChunkList * const &>
{
};

/* 550 */
struct __cppobj std::_Ranit<BS_ChunkList *,int,BS_ChunkList * const *,BS_ChunkList * const &> : std::iterator<std::random_access_iterator_tag,BS_ChunkList *,int,BS_ChunkList * const *,BS_ChunkList * const &>
{
};

/* 551 */
struct __cppobj std::vector<BS_ChunkList *,std::allocator<BS_ChunkList *> >::const_iterator : std::_Ranit<BS_ChunkList *,int,BS_ChunkList * const *,BS_ChunkList * const &>
{
  BS_ChunkList **_Myptr;
};

/* 552 */
struct __cppobj std::vector<BS_ChunkList *,std::allocator<BS_ChunkList *> >::iterator : std::vector<BS_ChunkList *,std::allocator<BS_ChunkList *> >::const_iterator
{
};

/* 553 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,char *,int,char * const *,char * const &>
{
};

/* 554 */
struct __cppobj std::_Bidit<char *,int,char * const *,char * const &> : std::iterator<std::bidirectional_iterator_tag,char *,int,char * const *,char * const &>
{
};

/* 555 */
struct __cppobj std::list<char *,std::allocator<char *> >::const_iterator : std::_Bidit<char *,int,char * const *,char * const &>
{
  std::_List_nod<char *,std::allocator<char *> >::_Node *_Ptr;
};

/* 556 */
struct __cppobj std::list<char *,std::allocator<char *> >::iterator : std::list<char *,std::allocator<char *> >::const_iterator
{
};

/* 557 */
struct __cppobj std::allocator<BS_ChunkList *>::rebind<BS_ChunkList *>
{
};

/* 558 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >::rebind<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >
{
};

/* 559 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node>
{
};

/* 560 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_Pool *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >,0> >::_Node *>
{
};

/* 561 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >::rebind<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >
{
};

/* 562 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_Pool *> >::rebind<char>
{
};

/* 563 */
struct __cppobj BS_SingletonHeap<BS_SingletonHeapLifeMgr,0>
{
};

/* 564 */
struct __cppobj BS_SingletonHeapLifeMgr : BS_SingletonHeap<BS_SingletonHeapLifeMgr,0>
{
  std::priority_queue<std::pair<unsigned long,void (__cdecl*)(void)>,std::vector<std::pair<unsigned long,void (__cdecl*)(void)>,std::allocator<std::pair<unsigned long,void (__cdecl*)(void)> > >,std::less<std::pair<unsigned long,void (__cdecl*)(void)> > > m_SingletonQueue;
};

/* 565 */
struct __declspec(align(4)) type_info
{
  type_infoVtbl *vfptr;
  void *_m_data;
  char _m_d_name[1];
};

/* 566 */
struct type_infoVtbl
{
  void *(__thiscall *__vecDelDtor)(type_info *this, unsigned int);
};

/* 567 */
struct __cppobj BS_Functors::fnRelease
{
};

/* 568 */
struct __cppobj BS_Functors::fnDelete
{
};

/* 569 */
struct __cppobj BS_SingletonHeap<BS_LogMgr,3>
{
};

/* 570 */
struct __cppobj __declspec(align(4)) BS_LogMgr : BS_PoolMgr, BS_SingletonHeap<BS_LogMgr,3>
{
  _BYTE gap14[1];
};

/* 571 */
struct __cppobj BS_SingletonHeap<BS_Config,5>
{
};

/* 572 */
struct __cppobj BS_Config : BS_SingletonHeap<BS_Config,5>
{
  wchar_t m_ScriptName[255];
  wchar_t m_LogDir[255];
  wchar_t m_LogName[255];
  wchar_t m_AuthTCPIP[255];
  __int16 m_AuthTCPPort;
  wchar_t m_LobbyTCPIP[255];
  __int16 m_LobbyTCPPort;
  wchar_t m_GameTCPIP[255];
  __int16 m_GameTCPPort;
  wchar_t m_AreaTCPIP[255];
  __int16 m_AreaTCPPort;
  __int16 m_SysUDPPort;
  __int16 m_SysUDPBindPort;
};

/* 573 */
struct $BD85036DCC0442AA317E9171D0F2179B
{
  char s_b1;
  char s_b2;
  char s_b3;
  char s_b4;
};

/* 574 */
struct $CC608A129C88F312E26B04B0A6BA5EDC
{
  unsigned __int16 s_w1;
  unsigned __int16 s_w2;
};

/* 575 */
union $75096DE7C5124E4A03CB1A2CA472A83B
{
  $BD85036DCC0442AA317E9171D0F2179B S_un_b;
  $CC608A129C88F312E26B04B0A6BA5EDC S_un_w;
  unsigned int S_addr;
};

/* 576 */
struct in_addr
{
  $75096DE7C5124E4A03CB1A2CA472A83B S_un;
};

/* 577 */
struct sockaddr_in
{
  __int16 sin_family;
  unsigned __int16 sin_port;
  in_addr sin_addr;
  char sin_zero[8];
};

/* 578 */
struct BS_SocketUtils::SockAddr
{
  sockaddr_in m_SockAddr;
};

/* 579 */
struct __cppobj BS_FileOut : BS_Out
{
  void *m_Handle;
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > m_Buffer;
  unsigned int m_CodePage;
};

/* 580 */
struct BS_PktBody
{
  unsigned __int16 m_usCmd;
};

/* 581 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktDropItem : BS_PktBody
{
  unsigned int TableIdx;
  unsigned int InvenIdx;
};

/* 582 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSellItemAck : BS_PktBody
{
  unsigned int TableIdx;
  unsigned int Num;
  unsigned int Gold;
  unsigned int InvenIdx;
};

/* 583 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktBuyItemAck : BS_PktBody
{
  unsigned int TableIdx;
  unsigned int Num;
  unsigned int Gold;
};

/* 584 */
struct __unaligned __declspec(align(2)) XiStrItemUnit
{
  int StackNum;
  int Random;
  unsigned int AssistA;
  unsigned int AssistB;
  unsigned int Upgrade;
  unsigned int UpgradePoint;
  __int16 Period;
  int CreateTime;
};

/* 585 */
struct __unaligned __declspec(align(1)) XiStrMyItem
{
  unsigned int CarID;
  unsigned int ItemState;
  XiStrItemUnit ItemUnit;
  unsigned int TableIdx;
  unsigned int InvenIdx;
  bool Belonging;
};

/* 586 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktItemListAck : BS_PktBody
{
  unsigned int ListUpdate;
  unsigned int ItemNum;
  XiStrMyItem MyItem[1];
};

/* 587 */
struct __cppobj BS_PktWhisper : BS_PktBody
{
  wchar_t m_Name[10];
  unsigned __int16 m_Len;
};

/* 588 */
struct __cppobj BS_PktChatMsgAck : BS_PktBody
{
  wchar_t m_Name[10];
  wchar_t m_Player[10];
  unsigned __int16 m_Len;
};

/* 589 */
struct __cppobj BS_PktLeaveChatAck : BS_PktBody
{
  wchar_t m_Name[10];
  wchar_t m_Player[10];
};

/* 590 */
struct __cppobj BS_PktJoinChatAck : BS_PktBody
{
  wchar_t m_Name[10];
  wchar_t m_Player[10];
};

/* 591 */
struct __cppobj BS_PktCloseChat : BS_PktBody
{
  wchar_t m_Name[10];
};

/* 592 */
struct __cppobj BS_PktOpenChat : BS_PktBody
{
  wchar_t m_Name[10];
};

/* 593 */
struct __cppobj BS_PktLeaveChannelAck : BS_PktBody
{
  wchar_t m_Name[10];
  wchar_t m_Player[10];
};

/* 594 */
struct __cppobj BS_PktJoinChannelAck : BS_PktBody
{
  wchar_t m_Name[10];
  wchar_t m_Player[10];
  unsigned __int16 m_MySerial;
};

/* 595 */
struct __cppobj BS_PktGameStream : BS_PktBody
{
  unsigned __int16 m_Len;
};

/* 596 */
struct $91D1B2149FAC90180ECB9AC277F76009
{
  float x;
  float y;
  float z;
  float w;
};

/* 597 */
union $4375CFA1960590491156858E404E617A
{
  $91D1B2149FAC90180ECB9AC277F76009 __s0;
  float v[4];
};

/* 598 */
struct XiVec4
{
  $4375CFA1960590491156858E404E617A ___u0;
};

/* 599 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCarPosAck : BS_PktBody
{
  XiVec4 m_Pos;
  int m_CityId;
};

/* 600 */
struct XiStrCharName
{
  wchar_t m_Name[17];
};

/* 601 */
struct XiStrExpInfo
{
  unsigned int CurExp;
  unsigned int NextExp;
  unsigned int BaseExp;
};

/* 602 */
struct __unaligned __declspec(align(1)) XiStrCharInfo
{
  __int64 Cid;
  XiStrCharName Name;
  int LastDate;
  unsigned __int16 Avatar;
  unsigned __int16 Level;
  XiStrExpInfo ExpInfo;
  __int64 Gold;
  __int64 TeamId;
  __int64 TeamMarkId;
  wchar_t TeamName[13];
  int TeamRank;
  char PType;
  unsigned int PvpCnt;
  unsigned int PvpWinCnt;
  unsigned int PvpPoint;
  unsigned int TPvpCnt;
  unsigned int TPvpWinCnt;
  unsigned int TPvpPoint;
  float TotalDistance;
  float m_Position[4];
  int m_Area;
  int m_City;
  int m_PosState;
  unsigned int QuickSlot1;
  unsigned int QuickSlot2;
  int TeamCloseDate;
  int TeamLeaveDate;
};

/* 603 */
struct XiStrCarInfo
{
  unsigned int CarId;
  unsigned int CarType;
  unsigned int Color;
  unsigned int Bumper;
  unsigned int Grade;
  unsigned int SlotType;
  float Mitron;
  float Kmh;
  float MitronCapacity;
  float MitronEfficiency;
};

/* 604 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktLoadCharAck : BS_PktBody
{
  XiStrCharInfo CharInfo;
  XiStrCarInfo CarInfo;
};

/* 605 */
struct __cppobj BS_PktCheckOutGame : BS_PktBody
{
};

/* 606 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCheckInGameAck : BS_PktBody
{
  unsigned int m_Result;
};

/* 607 */
struct __unaligned __declspec(align(2)) XiCBattleSetting
{
  __int64 LeaderId;
  XiStrCharName LeaderName;
};

/* 608 */
struct __unaligned __declspec(align(2)) XiStrAuctionClientInfo
{
  __int64 Cid;
  XiStrCharName CharName;
  unsigned int RegNum;
  unsigned int BuyNum;
  unsigned int SellNum;
};

/* 609 */
struct XiStrAuctionCarInfo
{
  unsigned int Serial;
  XiStrCarInfo CarInfo;
  unsigned int Price;
  unsigned int State;
  int RegDate;
};

/* 610 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarOnAck : BS_PktBody
{
  unsigned int InvenIdx;
  unsigned int Tex;
  XiStrAuctionCarInfo AuctionCarInfo;
};

/* 611 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUpdateInfo : BS_PktBody
{
  XiStrCharName Name;
  __int64 TeamId;
  __int64 TeamMarkId;
  wchar_t TeamName[17];
};

/* 612 */
struct __cppobj BS_PktCheckTeamName : BS_PktBody
{
  wchar_t m_TeamName[17];
};

/* 613 */
struct XiStrMyArbeit
{
  unsigned int TableIdx;
  unsigned int Serial;
  unsigned int CompleteNum;
  bool CheckPoint[20];
};

/* 614 */
struct XiPvpUserInfo
{
  unsigned __int16 Level;
  unsigned __int16 Ap;
  unsigned __int16 Sp;
  unsigned __int16 Cp;
};

/* 615 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleRoomCreate : BS_PktBody
{
  XiPvpUserInfo m_UserInfo;
  int Target;
};

/* 616 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestStart : BS_PktBody
{
  unsigned int TableIdx;
};

/* 617 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitGoAck : BS_PktBody
{
  unsigned int Serial;
};

/* 618 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUserAuth2 : BS_PktBody
{
  unsigned int m_Version;
  char m_ID[40];
  char m_PW[2048];
};

/* 619 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitGiveUpAck : BS_PktBody
{
  unsigned int Serial;
};

/* 620 */
struct __unaligned __declspec(align(2)) XiTeamBind
{
  __int64 m_TeamId;
  __int64 m_Cid;
  unsigned int m_Serial;
  XiStrCharName m_Name;
  int m_Level;
};

/* 621 */
struct __cppobj BS_PktLeaveTeamConfirm : BS_PktBody
{
  XiTeamBind m_bind;
  int m_Result;
};

/* 624 */
struct std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0>
{
  std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > comp;
};

/* 625 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node>
{
};

/* 626 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node>
{
};

/* 627 */
struct __cppobj std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> > : std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0>
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node> _Alnod;
};

/* 628 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *>
{
};

/* 629 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *>
{
};

/* 630 */
struct __cppobj std::_Tree_ptr<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> > : std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *> _Alptr;
};

/* 631 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >
{
};

/* 632 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> > : std::_Allocator_base<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >
{
};

/* 633 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> > : std::_Tree_ptr<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >
{
  std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> > _Alval;
};

/* 672 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> > : std::_Tree_val<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 673 */
struct __cppobj std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >
{
};

/* 674 */
struct __cppobj std::_Allocator_base<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node>
{
};

/* 675 */
struct __cppobj std::allocator<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node> : std::_Allocator_base<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node>
{
};

/* 676 */
struct std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >
{
  std::allocator<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node> _Alnod;
};

/* 677 */
struct __cppobj std::_Allocator_base<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node *>
{
};

/* 678 */
struct __cppobj std::allocator<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node *> : std::_Allocator_base<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node *>
{
};

/* 679 */
struct __cppobj std::_List_ptr<BS_Buffer *,std::allocator<BS_Buffer *> > : std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >
{
  std::allocator<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node *> _Alptr;
};

/* 680 */
struct __cppobj std::_Allocator_base<BS_Buffer *>
{
};

/* 681 */
struct __cppobj std::allocator<BS_Buffer *> : std::_Allocator_base<BS_Buffer *>
{
};

/* 682 */
struct __cppobj std::_List_val<BS_Buffer *,std::allocator<BS_Buffer *> > : std::_List_ptr<BS_Buffer *,std::allocator<BS_Buffer *> >
{
  std::allocator<BS_Buffer *> _Alval;
};

/* 684 */
struct __cppobj std::list<BS_Buffer *,std::allocator<BS_Buffer *> > : std::_List_val<BS_Buffer *,std::allocator<BS_Buffer *> >
{
  std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 685 */
struct BS_BufferPool
{
  std::list<BS_Buffer *,std::allocator<BS_Buffer *> > m_BufferList;
  BS_CriticalSection m_BufferLock;
};

/* 686 */
struct __cppobj std::_Allocator_base<BS_SingleDispatch *>
{
};

/* 687 */
struct __cppobj std::allocator<BS_SingleDispatch *> : std::_Allocator_base<BS_SingleDispatch *>
{
};

/* 688 */
struct std::_Vector_val<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >
{
  std::allocator<BS_SingleDispatch *> _Alval;
};

/* 720 */
struct __cppobj std::vector<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> > : std::_Vector_val<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >
{
  BS_SingleDispatch **_Myfirst;
  BS_SingleDispatch **_Mylast;
  BS_SingleDispatch **_Myend;
};

/* 721 */
struct __cppobj std::_Allocator_base<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node>
{
};

/* 722 */
struct __cppobj std::allocator<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node> : std::_Allocator_base<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node>
{
};

/* 723 */
struct std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >
{
  std::allocator<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node> _Alnod;
};

/* 724 */
struct __cppobj std::_Allocator_base<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node *>
{
};

/* 725 */
struct __cppobj std::allocator<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node *> : std::_Allocator_base<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node *>
{
};

/* 726 */
struct __cppobj std::_List_ptr<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> > : std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >
{
  std::allocator<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node *> _Alptr;
};

/* 727 */
struct __cppobj std::_List_val<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> > : std::_List_ptr<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >
{
  std::allocator<BS_SingleDispatch *> _Alval;
};

/* 729 */
struct __cppobj std::list<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> > : std::_List_val<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >
{
  std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 730 */
struct std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0>
{
  std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > comp;
};

/* 731 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node>
{
};

/* 732 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node>
{
};

/* 733 */
struct __cppobj std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> > : std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0>
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node> _Alnod;
};

/* 734 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *>
{
};

/* 735 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *>
{
};

/* 736 */
struct __cppobj std::_Tree_ptr<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> > : std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *> _Alptr;
};

/* 737 */
struct __cppobj std::_Allocator_base<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >
{
};

/* 738 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> > : std::_Allocator_base<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >
{
};

/* 739 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> > : std::_Tree_ptr<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >
{
  std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> > _Alval;
};

/* 742 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> > : std::_Tree_val<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 743 */
struct __cppobj std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> > > : std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >
{
};

/* 718 */
struct BS_PacketAnalyzeMachine
{
  BS_CriticalSection m_InsertLock;
  BS_CriticalSection m_RemoveLock;
  std::vector<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> > m_DispatchList;
  std::list<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> > m_InsertList;
  std::list<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> > m_RemoveList;
  std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> > > m_AnalyzeList;
};

/* 622 */
struct BS_NetFrame
{
  BS_NetFrameVtbl *vfptr;
  BS_CriticalSection m_ContainerLock;
  std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> > > m_ContainerList;
  BS_BufferPool m_BufferPool;
  BS_PacketAnalyzeMachine m_PacketAnalyzeMachine;
};

/* 623 */
struct BS_NetFrameVtbl
{
  void *(__thiscall *__vecDelDtor)(BS_NetFrame *this, unsigned int);
  bool (__thiscall *Destroy)(BS_NetFrame *this);
};

/* 634 */
struct __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *_Right;
  std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> _Myval;
  char _Color;
  char _Isnil;
};

/* 635 */
struct __declspec(align(4)) BS_SessionContainer
{
  BS_SessionContainerVtbl *vfptr;
  BS_CriticalSection m_ContainerLock;
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > m_Name;
  BS_CompletionHandler *m_pIOCP;
  BS_Session *m_pSession;
  volatile int m_bStop;
  bool m_bUseConnectionHold;
};

/* 636 */
struct BS_Reference<BS_Session>
{
  BS_Reference<BS_Session>Vtbl *vfptr;
  BS_Session *m_pDerivedClass;
  int m_RefCount;
};

/* 637 */
struct BS_Reference<BS_Session>Vtbl
{
  void *(__thiscall *__vecDelDtor)(BS_Reference<BS_Session> *this, unsigned int);
};

/* 639 */
union $D466279D91B985C7CA100FE3BE1057B8
{
  sockaddr_in m_BindAddr;
  sockaddr_in m_RemoteAddr;
};

/* 640 */
struct BS_Session::BS_AddrInfo
{
  $D466279D91B985C7CA100FE3BE1057B8 ___u0;
};

/* 641 */
struct BS_Session::BS_SessionStatic
{
  unsigned int m_SendPendingByte;
  bool m_RecvPending;
  unsigned int m_SendedByte;
  unsigned int m_RecvedByte;
};

/* 664 */
struct BS_Session::BS_SessionState
{
  unsigned __int16 m_State;
};

/* 638 */
struct __cppobj BS_Session : BS_Reference<BS_Session>
{
  unsigned int m_hSocket;
  BS_Session::BS_AddrInfo m_AddrInfo;
  int m_AddrLen;
  BS_Session::BS_SessionStatic m_Static;
  BS_PacketDispatch *const m_pDispatch;
  BS_SessionContainer *const m_pContainer;
  BS_PendingCount *m_pPendingCount;
  BS_Session::BS_SessionState m_SessionStatus;
  BS_Cipher *m_pCipher;
  BS_CriticalSection m_cipherLock;
  BS_Log *SessionLog;
};

/* 642 */
struct BS_PacketDispatch
{
  BS_PacketDispatchVtbl *vfptr;
  BS_Session *m_pSession;
  BS_Packet *m_pRecvPacket;
  BS_Buffer *m_pSendBuffer;
  BS_Buffer *m_pRecvBuffer;
};

/* 643 */
struct BS_PacketDispatchVtbl
{
  void *(__thiscall *__vecDelDtor)(BS_PacketDispatch *this, unsigned int);
  bool (__thiscall *ParsePacket)(BS_PacketDispatch *this, unsigned int);
  BS_PacketDispatch *(__thiscall *Clone)(BS_PacketDispatch *this);
  bool (__thiscall *Release)(BS_PacketDispatch *this);
  bool (__thiscall *Connected)(BS_PacketDispatch *this);
  bool (__thiscall *Disconnected)(BS_PacketDispatch *this);
  void (__thiscall *EndPacket)(BS_PacketDispatch *this);
  int (__thiscall *GetRecvBufferSize)(BS_PacketDispatch *this);
};

/* 644 */
struct BS_Reference<BS_Packet>
{
  BS_Reference<BS_Packet>Vtbl *vfptr;
  BS_Packet *m_pDerivedClass;
  int m_RefCount;
};

/* 645 */
struct BS_Reference<BS_Packet>Vtbl
{
  void *(__thiscall *__vecDelDtor)(BS_Reference<BS_Packet> *this, unsigned int);
};

/* 646 */
struct __cppobj BS_Packet : BS_Reference<BS_Packet>
{
  BS_Buffer *m_pBuffer;
  void *m_BufferPtr;
  unsigned int m_BufferSize;
  unsigned int m_BufferUsage;
};

/* 647 */
struct __cppobj std::binary_function<unsigned int,unsigned int,bool>
{
};

/* 648 */
struct __cppobj std::less<unsigned int> : std::binary_function<unsigned int,unsigned int,bool>
{
};

/* 649 */
struct std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0>
{
  std::less<unsigned int> comp;
};

/* 650 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node>
{
};

/* 651 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node>
{
};

/* 652 */
struct __cppobj std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> > : std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0>
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node> _Alnod;
};

/* 653 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *>
{
};

/* 654 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *>
{
};

/* 655 */
struct __cppobj std::_Tree_ptr<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> > : std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *> _Alptr;
};

/* 656 */
struct __cppobj std::_Allocator_base<std::pair<unsigned int const ,BS_ChunkList *> >
{
};

/* 657 */
struct __cppobj std::allocator<std::pair<unsigned int const ,BS_ChunkList *> > : std::_Allocator_base<std::pair<unsigned int const ,BS_ChunkList *> >
{
};

/* 658 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> > : std::_Tree_ptr<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >
{
  std::allocator<std::pair<unsigned int const ,BS_ChunkList *> > _Alval;
};

/* 659 */
struct __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *_Right;
  std::pair<unsigned int const ,BS_ChunkList *> _Myval;
  char _Color;
  char _Isnil;
};

/* 660 */
struct std::pair<unsigned int const ,BS_ChunkList *>
{
  const unsigned int first;
  BS_ChunkList *second;
};

/* 661 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> > : std::_Tree_val<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >
{
  std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 662 */
struct __cppobj std::map<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> > > : std::_Tree<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >
{
};

/* 663 */
struct BS_Buffer
{
  std::map<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> > > m_ChunkMgr;
};

/* 665 */
struct CGenRandMT
{
  unsigned int mt[624];
  int mti;
};

/* 666 */
struct __declspec(align(8)) CStreamCipher
{
  __int64 m_keyStream[2];
  __int64 m_oldKeyStream;
  char *m_keyPtr;
  char *m_keyPtrEnd;
  CGenRandMT genrandmt;
  __int64 m_rand;
  char *m_randPtr;
  char *m_randPtrEnd;
  CStreamCipher::CipherType m_cipherType;
};

/* 667 */
struct __unaligned __declspec(align(4)) BS_Cipher::KeyUnit
{
  __int64 Chain;
  unsigned int Seed[4];
  int Type;
};

/* 668 */
struct BS_Cipher::Key
{
  BS_Cipher::KeyUnit m_serverKey;
  BS_Cipher::KeyUnit m_clientKey;
};

/* 669 */
struct __unaligned __declspec(align(1)) BS_Cipher
{
  CStreamCipher m_outCipher;
  CStreamCipher m_inCipher;
  $6782DE06074047787D11DA8696B92961 m_state;
  BS_Cipher::Key m_key;
  BS_Cipher::Key m_keyRecvBuff;
  int m_keyRecvSize;
  int m_SecureType;
  bool m_bServer;
};

/* 670 */
struct BS_SessionContainerVtbl
{
  void *(__thiscall *__vecDelDtor)(BS_SessionContainer *this, unsigned int);
  bool (__thiscall *Destroy)(BS_SessionContainer *this);
  bool (__thiscall *ConnectionHold)(BS_SessionContainer *this, BS_Session *);
  unsigned int (__thiscall *GetItemNum)(BS_SessionContainer *this);
};

/* 671 */
struct std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *>
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > first;
  BS_SessionContainer *second;
};

/* 683 */
struct std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node
{
  std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node *_Next;
  std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node *_Prev;
  BS_Buffer *_Myval;
};

/* 689 */
struct BS_PktHead
{
  unsigned __int16 m_Len;
};

/* 690 */
struct __cppobj BS_ProtocolPacket : BS_Packet
{
  BS_PktHead *m_pHead;
};

/* 691 */
struct __cppobj BS_MessageDispatch : BS_PacketDispatch
{
  BS_ProtocolPacket *m_pSendPacket;
  BS_CriticalSection m_lock;
};

/* 692 */
struct __cppobj std::_Allocator_base<BS_Packet * *>
{
};

/* 693 */
struct __cppobj std::allocator<BS_Packet * *> : std::_Allocator_base<BS_Packet * *>
{
};

/* 694 */
struct std::_Deque_map<BS_Packet *,std::allocator<BS_Packet *> >
{
  std::allocator<BS_Packet * *> _Almap;
};

/* 695 */
struct __cppobj std::_Allocator_base<BS_Packet *>
{
};

/* 696 */
struct __cppobj std::allocator<BS_Packet *> : std::_Allocator_base<BS_Packet *>
{
};

/* 697 */
struct __cppobj std::_Deque_val<BS_Packet *,std::allocator<BS_Packet *> > : std::_Deque_map<BS_Packet *,std::allocator<BS_Packet *> >
{
  std::allocator<BS_Packet *> _Alval;
};

/* 698 */
struct __cppobj std::deque<BS_Packet *,std::allocator<BS_Packet *> > : std::_Deque_val<BS_Packet *,std::allocator<BS_Packet *> >
{
  BS_Packet ***_Map;
  unsigned int _Mapsize;
  unsigned int _Myoff;
  unsigned int _Mysize;
};

/* 699 */
struct std::queue<BS_Packet *,std::deque<BS_Packet *,std::allocator<BS_Packet *> > >
{
  std::deque<BS_Packet *,std::allocator<BS_Packet *> > c;
};

/* 702 */
struct __cppobj std::binary_function<short,short,bool>
{
};

/* 703 */
struct __cppobj std::less<short> : std::binary_function<short,short,bool>
{
};

/* 704 */
struct std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0>
{
  std::less<short> comp;
};

/* 705 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node>
{
};

/* 706 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node>
{
};

/* 707 */
struct __cppobj std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> > : std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0>
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node> _Alnod;
};

/* 708 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *>
{
};

/* 709 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *>
{
};

/* 710 */
struct __cppobj std::_Tree_ptr<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> > : std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *> _Alptr;
};

/* 711 */
struct __cppobj std::_Allocator_base<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >
{
};

/* 712 */
struct __cppobj std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> > : std::_Allocator_base<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >
{
};

/* 713 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> > : std::_Tree_ptr<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >
{
  std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> > _Alval;
};

/* 716 */
struct __cppobj std::_Tree<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> > : std::_Tree_val<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >
{
  std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 717 */
struct __cppobj std::map<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> > > : std::_Tree<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >
{
};

/* 700 */
struct BS_PacketAnalyze
{
  BS_PacketAnalyzeVtbl *vfptr;
  std::map<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> > > m_ParserTable;
  BS_Log *PacketLog;
};

/* 701 */
struct BS_PacketAnalyzeVtbl
{
  void *(__thiscall *__vecDelDtor)(BS_PacketAnalyze *this, unsigned int);
  bool (__thiscall *PacketAnalyze)(BS_PacketAnalyze *this, BS_PacketDispatch *, char *, int);
};

/* 714 */
struct __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *_Right;
  std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> _Myval;
  char _Color;
  char _Isnil;
};

/* 715 */
struct std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)>
{
  const __int16 first;
  unsigned __int16 (__cdecl *second)(BS_PacketDispatch *, char *);
};

/* 719 */
struct __cppobj BS_SingleDispatch : BS_MessageDispatch
{
  std::queue<BS_Packet *,std::deque<BS_Packet *,std::allocator<BS_Packet *> > > m_PacketQueue;
  BS_PacketAnalyze *m_pPacketAnalyze;
  BS_PacketAnalyzeMachine *m_pPacketAnalyzeMachine;
};

/* 728 */
struct std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node
{
  std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node *_Next;
  std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node *_Prev;
  BS_SingleDispatch *_Myval;
};

/* 740 */
struct __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *_Right;
  std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> _Myval;
  char _Color;
  char _Isnil;
};

/* 741 */
struct std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *>
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > first;
  BS_PacketAnalyze *second;
};

/* 744 */
struct __cppobj std::_Allocator_base<std::pair<BS_Session *,BS_Overlapped *> >
{
};

/* 745 */
struct __cppobj std::allocator<std::pair<BS_Session *,BS_Overlapped *> > : std::_Allocator_base<std::pair<BS_Session *,BS_Overlapped *> >
{
};

/* 746 */
struct std::_Vector_val<std::pair<BS_Session *,BS_Overlapped *>,std::allocator<std::pair<BS_Session *,BS_Overlapped *> > >
{
  std::allocator<std::pair<BS_Session *,BS_Overlapped *> > _Alval;
};

/* 747 */
struct std::pair<BS_Session *,BS_Overlapped *>
{
  BS_Session *first;
  BS_Overlapped *second;
};

/* 748 */
struct __cppobj std::vector<std::pair<BS_Session *,BS_Overlapped *>,std::allocator<std::pair<BS_Session *,BS_Overlapped *> > > : std::_Vector_val<std::pair<BS_Session *,BS_Overlapped *>,std::allocator<std::pair<BS_Session *,BS_Overlapped *> > >
{
  std::pair<BS_Session *,BS_Overlapped *> *_Myfirst;
  std::pair<BS_Session *,BS_Overlapped *> *_Mylast;
  std::pair<BS_Session *,BS_Overlapped *> *_Myend;
};

/* 749 */
struct __cppobj BS_OverlappedIONet : BS_NetFrame
{
  BS_ThreadMgr m_ThreadMgr;
  std::vector<std::pair<BS_Session *,BS_Overlapped *>,std::allocator<std::pair<BS_Session *,BS_Overlapped *> > > m_session;
};

/* 750 */
struct XiGameClientNet
{
  XiGameClientNetVtbl *vfptr;
  BS_OverlappedIONet *m_pOverlappedIONet;
  BS_PacketAnalyze *m_pPacketAnalyze;
  BS_Buffer *m_pBuffer;
  BS_Session *m_pAuthTCP;
  BS_Session *m_pLobbyTCP;
  BS_Session *m_pGameTCP;
  BS_Session *m_pAreaTCP;
  BS_Session *m_pSysUDP;
  bool m_bLatencyCheck;
  unsigned int m_nNextPing;
  int m_DeltaTimeSample[10];
  unsigned int m_SampleIndex;
  unsigned int m_SampleSize;
  int m_dwDeltaTime;
  float m_fLatency;
  BS_AuthDispatch *m_pAuthDispatch;
  BS_LobbyDispatch *m_pLobbyDispatch;
  BS_GameDispatch *m_pGameDispatch;
  BS_AreaDispatch *m_pAreaDispatch;
};

/* 751 */
struct XiGameClientNetVtbl
{
  bool (__thiscall *Connect_AuthTCPW)(XiGameClientNet *this, sockaddr_in *, const wchar_t *);
  __declspec(align(8)) bool (__thiscall *Connect_GameTCPW)(XiGameClientNet *this, sockaddr_in *, const wchar_t *);
  bool (__thiscall *Connect_AreaTCPW)(XiGameClientNet *this, sockaddr_in *, const wchar_t *);
  bool (__thiscall *Connect_AuthTCPA)(XiGameClientNet *this, sockaddr_in *, const char *);
  bool (__thiscall *Connect_LobbyTCPA)(XiGameClientNet *this, sockaddr_in *, const char *);
  bool (__thiscall *Connect_GameTCPA)(XiGameClientNet *this, sockaddr_in *, const char *);
  bool (__thiscall *Connect_AreaTCPA)(XiGameClientNet *this, sockaddr_in *, const char *);
  bool (__thiscall *Disconnect_AuthTCP)(XiGameClientNet *this);
  bool (__thiscall *Disconnect_LobbyTCP)(XiGameClientNet *this);
  bool (__thiscall *Disconnect_GameTCP)(XiGameClientNet *this);
  bool (__thiscall *Disconnect_AreaTCP)(XiGameClientNet *this);
  void (__thiscall *GameConnected)(XiGameClientNet *this);
  void (__thiscall *AreaDisconnected)(XiGameClientNet *this);
  void (__thiscall *GameDisconnected)(XiGameClientNet *this);
  void (__thiscall *LobbyDisconnected)(XiGameClientNet *this);
};

/* 752 */
struct __cppobj BS_ClientDispatch : BS_SingleDispatch
{
  XiGameClientNet *m_pNet;
};

/* 753 */
struct __cppobj BS_AuthDispatch : BS_ClientDispatch
{
};

/* 754 */
struct __cppobj BS_LobbyDispatch : BS_ClientDispatch
{
};

/* 755 */
struct __cppobj BS_GameDispatch : BS_ClientDispatch
{
};

/* 756 */
struct __cppobj BS_AreaDispatch : BS_ClientDispatch
{
};

/* 757 */
struct XiStrDriveInfo
{
  unsigned int CarId;
  int Time;
  float TotalDistance;
  float TotalFuel;
  float StepDistance;
  float StepFuel;
};

/* 758 */
struct XiStrCouponForVar
{
  unsigned int Type;
  float Value;
  int GetIdx;
};

/* 759 */
struct XiStrFuelChargeReq
{
  unsigned int CarId;
  __unaligned __declspec(align(1)) __int64 Pay;
  float Fuel;
};

/* 760 */
struct XiCarMove
{
  unsigned __int16 m_Serial;
  unsigned __int16 m_CarSort;
  int m_CarAttr;
  XiVec4 m_Pos;
  XiVec4 m_Vel;
  int m_dwGlobalTime;
  unsigned __int16 m_Progress;
  unsigned __int16 m_Age;
};

/* 761 */
struct XiCarState
{
  char m_data[44];
};

/* 762 */
struct XiFreeCarMove
{
  unsigned __int16 m_TrafficCarId;
  unsigned __int16 m_Owner;
  unsigned __int16 m_carAttr;
  unsigned __int16 m_path;
  XiVec4 m_Pos;
  XiVec4 m_Vel;
  int m_OwnTime;
  int m_dwGlobalTime;
  int m_FreedTime;
};

/* 763 */
struct XiBlockInfo
{
  unsigned int m_Serial;
  int m_DueTime;
};

/* 764 */
struct XiObjectUpdate
{
  unsigned int m_ObjectId;
  XiVec4 m_Vel;
  float m_Decl;
  int m_Time;
};

/* 765 */
struct XiPlayerInfo::PvpData
{
  unsigned int WinCnt;
  unsigned int Cnt;
};

/* 766 */
struct __unaligned __declspec(align(2)) XiPlayerInfo
{
  wchar_t Cname[13];
  unsigned int Ip;
  unsigned int Port;
  unsigned __int16 Age;
  unsigned __int16 Level;
  unsigned int Exp;
  XiPlayerInfo::PvpData Pvp;
  XiPlayerInfo::PvpData TPvp;
  __int64 TeamId;
  __int64 TeamMarkId;
  wchar_t TeamName[14];
};

/* 767 */
struct XiPvpRoomSlot
{
  unsigned __int16 slot[32];
};

/* 768 */
struct XiStrTeamInfo
{
  __int64 TeamId;
  __int64 TeamMarkId;
  wchar_t TeamName[13];
  wchar_t TeamDesc[81];
  unsigned int CreateDate;
  unsigned int CloseDate;
  char OwnChannel[24];
  char TeamState[2];
  __unaligned __declspec(align(1)) unsigned int TeamRanking;
  __unaligned __declspec(align(1)) unsigned int TeamPoint;
  unsigned __int16 TeamLevel;
  unsigned int ChannelWinCnt;
  unsigned int MemberCnt;
  unsigned int Version;
  __unaligned __declspec(align(1)) __int64 OwnerId;
  __unaligned __declspec(align(1)) __int64 LeaderId;
  XiStrCharName OwnerName;
  XiStrCharName LeaderName;
};

/* 769 */
struct XiBattleRaceSetting
{
  __int16 MapId;
  __int16 MapFlag;
  int TrafficNum;
};

/* 770 */
struct hfloat
{
  __int16 value;
};

/* 771 */
struct __unaligned __declspec(align(2)) XiTrafficCarMove
{
  int m_time;
  float m_pos;
  hfloat m_vel;
  hfloat m_acl;
  unsigned __int16 m_TrafficCarId;
  unsigned __int16 m_carAttr;
  __int16 m_path;
};

/* 772 */
struct __unaligned __declspec(align(2)) XiTCSCarMove
{
  int m_time;
  float m_pos;
  hfloat m_vel;
  hfloat m_acl;
  unsigned __int16 m_TrafficCarId;
  unsigned __int16 m_carAttr;
  __int16 m_path;
  __int16 m_nextPath;
  __int16 m_thirdPath;
};

/* 773 */
struct XiTCSSignal
{
  int m_time;
  int m_signal;
  int m_state;
};

/* 774 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktFriendDelAck : BS_PktBody
{
  __int64 cid;
  unsigned int Serial;
  int state;
  wchar_t Name[16];
};

/* 775 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestFail : BS_PktBody
{
  unsigned int TableIdx;
};

/* 776 */
struct __unaligned __declspec(align(1)) BS_PktOBSState::Unit
{
  unsigned int m_Serial;
  XiPvpUserInfo m_UserInfo;
  bool m_bReady;
  int m_CarAttr;
  wchar_t m_Name[16];
};

/* 777 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktOBSState : BS_PktBody
{
  unsigned int m_Result;
  unsigned int m_RoomId;
  unsigned int m_RoomLifeId;
  unsigned __int16 m_MapId;
  unsigned __int16 m_MapFlag;
  __int16 m_RoomType;
  unsigned __int16 m_State;
  __int16 m_AreaId;
  unsigned __int16 m_PlayerCapacity;
  unsigned __int16 m_ViewerCount;
  unsigned __int16 m_RoomReady;
  wchar_t m_RoomName[41];
  int m_Score[4];
  __int64 TeamId[2];
  __int64 TeamMarkId[2];
  wchar_t TeamName[2][31];
  XiPvpRoomSlot m_Slot;
  unsigned int m_Size;
  BS_PktOBSState::Unit m_Member[1];
};

/* 778 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUnEquipItem : BS_PktBody
{
  unsigned int SlotIdx;
  unsigned int InvenIdx;
};

/* 779 */
struct __cppobj BS_PktTradeLockAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int TradeIdx;
  __unaligned __declspec(align(1)) unsigned int LockState;
  XiStrCharName Name;
};

/* 780 */
struct __cppobj BS_PktMyAuctionCarList : BS_PktBody
{
};

/* 781 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktJoinAreaAck : BS_PktBody
{
  int m_Area;
  int m_Result;
};

/* 782 */
struct __cppobj BS_PktInstantRewardAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int TableIdx;
  __unaligned __declspec(align(1)) unsigned int GetExp;
  __unaligned __declspec(align(1)) unsigned int GetMoney;
  __unaligned __declspec(align(1)) XiStrExpInfo ExpInfo;
  unsigned __int16 Level;
};

/* 783 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpLoad : BS_PktBody
{
  int m_Type;
  unsigned __int16 m_MapId;
  __int16 m_AreaId;
  float m_BestRecord;
  int m_StartTime;
  int m_TrafficNum;
};

/* 784 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTradeCloseAck : BS_PktBody
{
  unsigned int TradeIdx;
};

/* 785 */
struct BS_PktFriendListAck::Unit
{
  __int64 Cid;
  unsigned int Serial;
  int State;
  wchar_t Name[16];
};

/* 786 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktFriendListAck : BS_PktBody
{
  unsigned int m_Size;
  BS_PktFriendListAck::Unit m_Friend[1];
};

/* 787 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPartyApply : BS_PktBody
{
  unsigned int m_Serial;
  unsigned int m_Ticket;
  wchar_t m_Name[10];
  int m_Level;
  wchar_t m_Msg[50];
};

/* 788 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUpgradeItem : BS_PktBody
{
  unsigned int SrcInvenIdx;
  unsigned int AddInvenIdx;
  int AddNum;
};

/* 789 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktTrafficItemEventAck : BS_PktBody
{
  unsigned int State;
  XiStrMyItem Item;
};

/* 790 */
struct __unaligned __declspec(align(1)) BS_PktRoomState::Unit
{
  unsigned int m_Serial;
  XiPvpUserInfo m_UserInfo;
  bool m_bReady;
  int m_CarAttr;
  wchar_t m_Name[16];
};

/* 791 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktRoomState : BS_PktBody
{
  unsigned int m_Result;
  unsigned int m_RoomId;
  unsigned int m_RoomLifeId;
  unsigned __int16 m_MapId;
  unsigned __int16 m_MapFlag;
  __int16 m_RoomType;
  unsigned __int16 m_State;
  __int16 m_AreaId;
  unsigned __int16 m_PlayerCapacity;
  unsigned __int16 m_ViewerCount;
  unsigned __int16 m_RoomReady;
  wchar_t m_RoomName[40];
  XiPvpRoomSlot m_Slot;
  unsigned int m_Size;
  BS_PktRoomState::Unit m_Member[1];
};

/* 792 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSetTeamMarkAck : BS_PktBody
{
  int m_Result;
  __int64 m_TeamId;
  __int64 m_ImgId;
  int m_Size;
};

/* 793 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktEnterArea : BS_PktBody
{
  unsigned __int16 m_Serial;
  XiStrCharName Name;
  int m_Area;
  int m_Group;
  int m_nLocalTime;
};

/* 794 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarBuy : BS_PktBody
{
  unsigned int Serial;
};

/* 795 */
struct __cppobj std::output_iterator_tag
{
};

/* 796 */
struct __cppobj std::numpunct<unsigned short> : std::locale::facet
{
  const char *_Grouping;
  unsigned __int16 _Dp;
  unsigned __int16 _Kseparator;
  const unsigned __int16 *_Falsename;
  const unsigned __int16 *_Truename;
};

/* 797 */
struct __cppobj std::basic_ostream<char,std::char_traits<unsigned short> >
{
  _BYTE gap0[56];
};

/* 798 */
struct __cppobj __declspec(align(4)) std::basic_ios<char,std::char_traits<unsigned short> > : std::ios_base
{
  struct std::basic_streambuf<char,std::char_traits<unsigned short> > *_Mystrbuf;
  std::basic_ostream<char,std::char_traits<unsigned short> > *_Tiestr;
  char _Fillch;
};

/* 799 */
struct XiStrFuelChargeRes
{
  unsigned int CarId;
  __unaligned __declspec(align(1)) __int64 Pay;
  float DeltaFuel;
  __int64 Gold;
  float Fuel;
  float UnitPrice;
  float FuelCapacity;
  float FuelEfficiency;
};

/* 800 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRegisterRoomObserverAck : BS_PktBody
{
  int m_Result;
  unsigned int m_PvpChannelId;
  XiPvpRoomFilter m_RoomFilter;
  unsigned int m_Page;
};

/* 801 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomLeave : BS_PktBody
{
  unsigned int m_Serial;
  XiPvpRoomSlot m_Slot;
};

/* 802 */
struct __cppobj BS_PktAreaList : BS_PktBody
{
};

/* 803 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktItemUnionAck : BS_PktBody
{
  unsigned int DestInvenIdx;
  unsigned int SrcInvenIdx;
};

/* 804 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktLeaveAreaAck : BS_PktBody
{
  int m_Result;
  __int16 m_MsgLen;
  wchar_t m_Msg[1];
};

/* 805 */
struct __cppobj __unaligned __declspec(align(4)) BS_PktCBattleGetSettingAck : BS_PktBody
{
  int m_Channel;
  unsigned int m_OpenTime;
  unsigned int m_BattleTime;
  unsigned int m_EndTime;
  __int64 m_LeaderCid;
  wchar_t m_LeaderCName[13];
  XiBattleRaceSetting m_raceSet[3];
};

/* 806 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktFuelChargeReq : BS_PktBody
{
  XiStrFuelChargeReq req;
};

/* 807 */
struct __cppobj __unaligned __declspec(align(4)) BS_PktCBattleSet : BS_PktBody
{
  int m_Channel;
  unsigned int m_OpenTime;
  unsigned int m_BattleTime;
  unsigned int m_EndTime;
  __int64 m_LeaderCid;
  wchar_t m_LeaderCName[13];
  XiBattleRaceSetting m_raceSet[3];
};

/* 808 */
struct XiPartyMemName
{
  unsigned int Num;
  XiStrCharName CharName[4];
};

/* 809 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktPvpReadyState : BS_PktBody
{
  unsigned int m_Serial;
  bool m_bReady;
};

/* 810 */
struct XiStrStatInfo
{
  int BasedSpeed;
  int BasedCrash;
  int BasedAccel;
  int BasedBoost;
  int EquipSpeed;
  int EquipCrash;
  int EquipAccel;
  int EquipBoost;
  int CharSpeed;
  int CharCrash;
  int CharAccel;
  int CharBoost;
  int ItemUseSpeed;
  int ItemUseCrash;
  int ItemUseAccel;
  int ItemUseBoost;
  int TotalSpeed;
  int TotalCrash;
  int TotalAccel;
  int TotalBoost;
};

/* 811 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktGameCharInfoAck : BS_PktBody
{
  XiStrCharInfo CharInfo;
  XiStrCarInfo CarInfo;
  XiStrStatInfo StatInfo;
};

/* 812 */
struct __unaligned __declspec(align(2)) XiStrAuctionCarUnitInfo
{
  XiStrAuctionClientInfo ClientInfo;
  XiStrAuctionCarInfo CarInfo;
};

/* 813 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomList : BS_PktBody
{
  XiPvpRoomFilter m_RoomFilter;
  unsigned int m_Page;
  unsigned int m_PageSize;
};

/* 814 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktJoinOBS : BS_PktBody
{
  unsigned int m_RoomId;
};

/* 815 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktObjectUpdate : BS_PktBody
{
  XiObjectUpdate m_object;
};

/* 816 */
struct __cppobj BS_PktTradeOpenAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int TradeIdx;
  unsigned __int16 Result;
};

/* 817 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpLoadingStatus : BS_PktBody
{
  unsigned int m_Serial;
  float m_Percent;
};

/* 818 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionBuyed : BS_PktBody
{
  unsigned int Serial;
};

/* 819 */
struct __unaligned __declspec(align(2)) BS_PktTeamMembersAck::Member
{
  __int64 cid;
  wchar_t Name[17];
  int TeamRank;
  int NLevel;
};

/* 820 */
struct __cppobj BS_PktTeamMembersAck : BS_PktBody
{
  __unaligned __declspec(align(1)) int m_Act;
  __unaligned __declspec(align(1)) __int64 m_TeamId;
  __unaligned __declspec(align(1)) int m_TargetChannel;
  __unaligned __declspec(align(1)) __int64 m_TeamLeader;
  __unaligned __declspec(align(1)) int m_Size;
  BS_PktTeamMembersAck::Member m_member[1];
};

/* 821 */
struct BS_PktChaseBeginConfirm::HuvUnit
{
  unsigned __int16 m_Serial;
  unsigned __int16 m_CarSort;
  XiVec4 m_StartPos;
  XiVec4 m_EndPos;
  int m_huvLevel;
  int m_huvId;
  float m_Speed;
  float m_MaxSpeed;
  float m_NosAccel;
  float m_NosTime;
  float m_NosRefreshRate;
  float m_Durability;
  float m_FrontPlayerAvoidanceRate;
  float m_FrontTrafficAvoidanceRate;
  float m_RearPlayerAvoidanceRate;
};

/* 822 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktChaseBeginConfirm : BS_PktBody
{
  char m_Accepted;
  int m_FindTimeout;
  int m_ArrestTimeout;
  unsigned __int16 m_huvSize;
  BS_PktChaseBeginConfirm::HuvUnit m_huv[1];
};

/* 823 */
struct __cppobj BS_PktDeleteChar : BS_PktBody
{
  XiStrCharName Name;
};

/* 824 */
struct __cppobj BS_PktFriendAddByName : BS_PktBody
{
  wchar_t Name[16];
};

/* 825 */
struct __cppobj BS_PktJoinChat : BS_PktBody
{
  wchar_t m_Name[10];
};

/* 826 */
struct __unaligned __declspec(align(2)) XiSmpTeamInfo
{
  __int64 TeamId;
  __int64 TeamMarkId;
  unsigned int TeamRanking;
  unsigned int TeamPoint;
  unsigned int ChannelWinCnt;
  unsigned __int16 TeamLevel;
  wchar_t TeamName[13];
  int MemberCnt;
  __int64 OwnerId;
  XiStrCharName OwnerName;
};

/* 827 */
struct XiCBattleChannel
{
  int nChannel;
  XiSmpTeamInfo OwnTeam;
  XiCBattleSetting battleSetting;
  unsigned int ownTime;
  unsigned int openTime;
  unsigned int battleTime;
  unsigned int endTime;
  unsigned int openState;
};

/* 828 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomBanish : BS_PktBody
{
  unsigned int m_Serial;
  XiPvpRoomSlot m_Slot;
};

/* 829 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSetGameMode : BS_PktBody
{
  unsigned int GameMode;
};

/* 830 */
struct __unaligned __declspec(align(2)) BS_PktAreaListAck::Unit
{
  int AreaId;
  int Current;
  int Max;
  int Open;
  XiSmpTeamInfo OwnTeam;
};

/* 831 */
struct __cppobj BS_PktAreaListAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int AreaNum;
  BS_PktAreaListAck::Unit m_Area[1];
};

/* 832 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestStartAck : BS_PktBody
{
  unsigned int TableIdx;
  unsigned int FailNum;
};

/* 833 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktEquipItem : BS_PktBody
{
  unsigned int SlotIdx;
  unsigned int InvenIdx;
};

/* 834 */
struct __cppobj BS_PktError : BS_PktBody
{
  unsigned __int16 m_Len;
};

/* 835 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomClose : BS_PktBody
{
  int m_Type;
  wchar_t m_Msg[32];
};

/* 836 */
struct __unaligned __declspec(align(2)) XiBattleRecord
{
  unsigned int m_Time;
  int m_Act;
  int m_Channel;
  int m_Match;
  int m_Round;
  int m_Win;
  int m_nParts;
  wchar_t m_Team0[13];
  wchar_t m_Team1[13];
  wchar_t m_Team2[13];
};

/* 837 */
struct __unaligned __declspec(align(1)) XiStrMyItemMod
{
  XiStrMyItem MyItem;
  int State;
};

/* 838 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktItemModList : BS_PktBody
{
  unsigned int ItemNum;
  XiStrMyItemMod ModItem[1];
};

/* 839 */
struct __cppobj BS_PktSellCar : BS_PktBody
{
  XiStrCharName Name;
  unsigned int CarId;
};

/* 840 */
struct __cppobj BS_PktSetAreaMap : BS_PktBody
{
  unsigned __int16 m_MapId;
  unsigned __int16 m_MaxTraffic;
  __unaligned __declspec(align(1)) int m_TrafficMode;
  unsigned __int16 m_CityId;
};

/* 841 */
struct __cppobj BS_PktJoinTeamApply : BS_PktBody
{
  XiTeamBind m_bind;
};

/* 842 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCheckInGame : BS_PktBody
{
  unsigned int m_Version;
  unsigned int m_Ticket;
};

/* 843 */
struct __cppobj BS_PktLoadDummyChar : BS_PktBody
{
  XiStrCharName Name;
  unsigned int CarType;
  __int64 TeamId;
};

/* 844 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCurrentGameMode : BS_PktBody
{
  unsigned int GameMode;
};

/* 845 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUpgradeCarAck : BS_PktBody
{
  unsigned int CarID;
  unsigned int Grade;
  unsigned int Gold;
};

/* 846 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTrafficItemGet : BS_PktBody
{
  unsigned int InvenIdx;
};

/* 847 */
struct __cppobj BS_PktCastTraffic : BS_PktBody
{
  __unaligned __declspec(align(1)) int m_AreaId;
  __unaligned __declspec(align(1)) float m_x;
  __unaligned __declspec(align(1)) float m_y;
  XiTrafficCarMove m_move;
};

/* 848 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleRoomReady : BS_PktBody
{
  int Target;
  int State;
};

/* 849 */
struct __cppobj BS_PktUpdatePlayerInfo : BS_PktBody
{
  XiPlayerInfo m_playerInfo;
};

/* 850 */
struct __cppobj BS_PktCastTCS : BS_PktBody
{
  __unaligned __declspec(align(1)) int m_AreaId;
  __unaligned __declspec(align(1)) float m_x;
  __unaligned __declspec(align(1)) float m_y;
  XiTCSCarMove m_move;
};

/* 851 */
struct __unaligned __declspec(align(2)) XiStrAuctionItemInfo
{
  unsigned int Serial;
  XiStrItemUnit ItemUnit;
  unsigned int TableIdx;
  unsigned int InvenIdx;
  unsigned int Price;
  unsigned int State;
  int RegDate;
};

/* 852 */
struct XiStrAuctionUnitInfo
{
  XiStrAuctionClientInfo ClientInfo;
  XiStrAuctionItemInfo ItemInfo;
};

/* 853 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTrafficItemGetAck : BS_PktBody
{
  unsigned int InvenIdx;
};

/* 854 */
struct __cppobj BS_PktLeaveOBS : BS_PktBody
{
};

/* 855 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRegisterRoomObserver : BS_PktBody
{
  unsigned int m_PvpChannelId;
  XiPvpRoomFilter m_RoomFilter;
  unsigned int m_Page;
  unsigned int m_PageSize;
};

/* 856 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomInvite : BS_PktBody
{
  unsigned int m_Serial;
  unsigned int m_RoomId;
  unsigned int m_RoomLifeId;
  wchar_t m_Name[16];
  wchar_t m_RoomName[30];
  wchar_t m_Msg[50];
};

/* 857 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTutorialClear : BS_PktBody
{
  unsigned int TableIdx;
};

/* 858 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSellItem : BS_PktBody
{
  unsigned int TableIdx;
  unsigned int Num;
  unsigned int InvenIdx;
};

/* 859 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktInstantStart : BS_PktBody
{
  unsigned int TableIdx;
};

/* 860 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestComplete : BS_PktBody
{
  unsigned int TableIdx;
  float TotalTime;
};

/* 861 */
struct XiPvpResult
{
  int EndType;
  unsigned int Serial;
  unsigned int DeltaMoney;
  __unaligned __declspec(align(1)) unsigned __int64 Money;
  unsigned int DeltaExp;
  float Record;
  unsigned __int16 Rank;
  unsigned __int16 Level;
  XiStrExpInfo ExpInfo;
  unsigned int Point;
};

/* 862 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMyPositionAck : BS_PktBody
{
  int m_WorldId;
  int m_CityId;
  int m_AreaId;
  XiVec4 m_Pos;
  int m_PositionState;
};

/* 863 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleItems : BS_PktBody
{
  int m_TargetChannel;
};

/* 864 */
union $BDBC065E804B9590594210616B70BA0B
{
  float m_fLocalTime;
  unsigned int m_dwLocalTime;
};

/* 865 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktLatency : BS_PktBody
{
  $BDBC065E804B9590594210616B70BA0B ___u1;
};

/* 866 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSaveCarPos : BS_PktBody
{
  unsigned int m_AreaId;
  XiVec4 m_Pos;
  int m_CityId;
  int m_PositionState;
};

/* 867 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpGate : BS_PktBody
{
  unsigned int m_Serial;
  int m_Gate;
  int m_GateTime;
  float m_Record;
};

/* 868 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarCancel : BS_PktBody
{
  unsigned int Serial;
};

/* 869 */
struct __cppobj BS_PktSayAck : BS_PktBody
{
  wchar_t m_Name[10];
  unsigned __int16 m_Len;
};

/* 870 */
struct __unaligned __declspec(align(2)) XiStrMyQuest
{
  unsigned int TableIdx;
  unsigned int State;
  unsigned int PlaceIdx;
  unsigned __int16 FailNum;
};

/* 871 */
struct __cppobj BS_PktMyQuestListAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int QuestNum;
  XiStrMyQuest MyQuest[1];
};

/* 872 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUserAuth : BS_PktBody
{
  unsigned int m_Version;
  wchar_t m_ID[40];
  char m_PW[64];
};

/* 873 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitGo : BS_PktBody
{
  unsigned int Serial;
};

/* 874 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarCancelAck : BS_PktBody
{
  unsigned int Serial;
};

/* 875 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCarPos : BS_PktBody
{
  unsigned int m_MapId;
};

/* 876 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionSearch : BS_PktBody
{
  unsigned int Offset;
  unsigned int ListNum;
  unsigned int Type;
  unsigned int SortType;
  unsigned int SearchType;
  wchar_t Text[128];
};

/* 877 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCharTeamInfoAck : BS_PktBody
{
  unsigned int m_Act;
  __int64 m_Cid;
  XiStrTeamInfo m_TeamInfo;
  int m_TeamRank;
};

/* 878 */
struct __cppobj BS_PktMoveTCSVehicle : BS_PktBody
{
  XiTCSCarMove m_move;
};

/* 879 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionList : BS_PktBody
{
  unsigned int Offset;
  unsigned int ListNum;
  unsigned int Type;
  unsigned int SortType;
};

/* 880 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktChaseEnd : BS_PktBody
{
  unsigned __int16 m_Serial;
  unsigned __int16 m_CarSort;
  unsigned int m_Type;
  float m_Life;
  unsigned int m_Result;
  XiVec4 m_Pos;
  XiVec4 m_Vel;
  int m_Time;
};

/* 881 */
struct __cppobj BS_PktUpdateInfoAck : BS_PktBody
{
  unsigned __int16 m_Age;
};

/* 882 */
struct __cppobj BS_PktFriendList : BS_PktBody
{
};

/* 883 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMoveVehicleSimpl : BS_PktBody
{
  XiCarMove m_move;
};

/* 884 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSelectCar : BS_PktBody
{
  unsigned int CarId;
};

/* 885 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktClientAuth : BS_PktBody
{
  unsigned int m_Size;
};

/* 886 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomJoin : BS_PktBody
{
  unsigned int m_Serial;
  XiPvpUserInfo m_UserInfo;
  int m_CarAttr;
  unsigned int m_RoomId;
  unsigned int m_RoomLifeId;
  wchar_t m_Name[16];
  XiPvpRoomSlot m_Slot;
};

/* 887 */
struct __cppobj BS_PktLeaveChat : BS_PktBody
{
  wchar_t m_Name[10];
};

/* 888 */
struct XiStrItemUseInfo
{
  unsigned int Type;
  unsigned int Value;
  unsigned int Time;
};

/* 889 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktItemUseAck : BS_PktBody
{
  unsigned int InvenIdx;
  XiStrItemUseInfo ItemUseInfo;
};

/* 890 */
struct __cppobj BS_PktExitGroup : BS_PktBody
{
};

/* 891 */
struct __cppobj BS_PktFriendDel : BS_PktBody
{
  wchar_t Name[16];
};

/* 892 */
struct __cppobj BS_PktSwitchToPlayer : BS_PktBody
{
};

/* 893 */
struct XiBattleInstance
{
  int TargetChannelId;
  int AreaId;
  int MapId;
};

/* 894 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleInstanceAck : BS_PktBody
{
  int m_Act;
  unsigned int m_Size;
  XiBattleInstance m_battle[1];
};

/* 895 */
struct __cppobj BS_PktComboExp : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int GetExp;
  __unaligned __declspec(align(1)) unsigned int GetMoney;
  __unaligned __declspec(align(1)) XiStrExpInfo ExpInfo;
  unsigned __int16 Level;
  float fGetExp;
};

/* 896 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCreateTeamAck : BS_PktBody
{
  int m_Result;
  XiStrTeamInfo m_TeamInfo;
};

/* 897 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestCompleteAck : BS_PktBody
{
  unsigned int TableIdx;
};

/* 898 */
struct __cppobj BS_PktEnterAreaAck : BS_PktBody
{
  __unaligned __declspec(align(1)) int m_Area;
  __unaligned __declspec(align(1)) int m_Result;
  __unaligned __declspec(align(1)) int m_nLocalTime;
  __unaligned __declspec(align(1)) int m_nGlobalTime;
  unsigned __int16 m_Age;
  __int16 m_MsgLen;
  wchar_t m_Msg[1];
};

/* 899 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktJumpFreeTrafficVehicle : BS_PktBody
{
  XiFreeCarMove m_move;
  XiVec4 m_sVel;
  float m_lastCollPos[3];
};

/* 900 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCastTCSSignal : BS_PktBody
{
  int m_AreaId;
  float m_x;
  float m_y;
  XiTCSSignal m_signal;
};

/* 901 */
struct __cppobj BS_PktCBattleBroadcast : BS_PktBody
{
  __unaligned __declspec(align(1)) int m_Offset;
  __unaligned __declspec(align(1)) int m_Size;
  XiBattleRecord m_Record[1];
};

/* 902 */
struct XiStrAssistID
{
  wchar_t m_Name[32];
};

/* 903 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTradeItemOn : BS_PktBody
{
  unsigned int TradeIdx;
  unsigned int InvenIdx;
  int TradeNum;
};

/* 904 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSelectCarAck : BS_PktBody
{
  XiStrCarInfo CarInfo;
};

/* 905 */
struct XiStrItemID
{
  wchar_t m_Name[32];
};

/* 906 */
struct XiStrItemData
{
  XiStrItemID itemid;
  XiStrItemUnit unit;
};

/* 907 */
struct __cppobj BS_PktCBattleItemsAck : BS_PktBody
{
  __unaligned __declspec(align(1)) int m_TargetChannel;
  __unaligned __declspec(align(1)) int m_Page;
  __unaligned __declspec(align(1)) int m_Size;
  XiStrItemData m_items[1];
};

/* 908 */
struct XiStrChannelName
{
  wchar_t m_Name[64];
};

/* 909 */
struct __cppobj BS_PktCheckTeamNameAck : BS_PktBody
{
  __unaligned __declspec(align(1)) int m_Result;
  wchar_t m_TeamName[17];
};

/* 910 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpStartReq : BS_PktBody
{
  int m_MapId;
  int m_StartTime;
};

/* 911 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUpdateQuickSlot : BS_PktBody
{
  unsigned int Slot1;
  unsigned int Slot2;
};

/* 912 */
struct BS_Event
{
  void *m_hEvent;
};

/* 913 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUpgradeCar : BS_PktBody
{
  unsigned int CarID;
};

/* 914 */
struct __cppobj BS_PktCBattleRewardItems : BS_PktBody
{
  __unaligned __declspec(align(1)) int m_TargetChannel;
  __unaligned __declspec(align(1)) int m_Page;
  __unaligned __declspec(align(1)) int m_Size;
  XiStrItemData m_items[1];
};

/* 915 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpResult : BS_PktBody
{
  int m_ResultKind;
  unsigned int m_TeamPoint[2];
  float m_BestRecord;
  int m_Time;
  int m_Num;
  XiPvpResult m_Result[1];
};

/* 916 */
struct __unaligned __declspec(align(2)) XiStrRankInfo
{
  XiStrCharName Name;
  unsigned int Data;
};

/* 917 */
struct __unaligned __declspec(align(2)) XiStrArbeitInfo
{
  XiStrRankInfo Rank[3];
  int MyRank;
  unsigned int Idx;
  unsigned int Aver;
};

/* 918 */
struct __cppobj BS_PktMyArbeitListAck : BS_PktBody
{
  __unaligned __declspec(align(1)) XiStrMyArbeit MyArbeit;
  XiStrArbeitInfo ArbeitInfo;
};

/* 919 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestRewardAck : BS_PktBody
{
  unsigned int TableIdx;
  unsigned int GetExp;
  unsigned int GetMoney;
  XiStrExpInfo ExpInfo;
  unsigned __int16 Level;
  unsigned __int16 ItemNum;
  unsigned int RewardItem[3];
};

/* 920 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktChannelInfoAck : BS_PktBody
{
  XiStrChannelName m_Name;
  sockaddr_in m_Addr;
  unsigned int m_Ticket;
};

/* 921 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCreateCharAck : BS_PktBody
{
  XiStrCharName Name;
  unsigned __int16 Avatar;
  XiStrCarInfo CarInfo;
};

/* 922 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUserInfoAck : BS_PktBody
{
  unsigned int Permission;
  unsigned int CharNameNum;
};

/* 923 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionListAck : BS_PktBody
{
  unsigned int AuctionTotalNum;
  unsigned int AuctionNum;
  XiStrAuctionUnitInfo AuctionInfo[1];
};

/* 924 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktChaseSwitch : BS_PktBody
{
  unsigned __int16 m_OldSerial;
  unsigned __int16 m_OldCarSort;
  unsigned __int16 m_NewSerial;
  unsigned __int16 m_NewCarSort;
  int m_Time;
};

/* 925 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarComplete : BS_PktBody
{
  unsigned int Serial;
};

/* 926 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCancelCloseTeam : BS_PktBody
{
  __int64 m_TeamId;
};

/* 927 */
struct __cppobj BS_PktSwitchToOBS : BS_PktBody
{
};

/* 928 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarCompleteAck : BS_PktBody
{
  unsigned int Serial;
  unsigned int Price;
  unsigned int CarID;
};

/* 929 */
struct __cppobj BS_PktGameCharInfo : BS_PktBody
{
  XiStrCharName Name;
};

/* 930 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktBuyItem : BS_PktBody
{
  unsigned int TableIdx;
  unsigned int Num;
};

/* 931 */
struct __unaligned __declspec(align(2)) BS_PktCBattleState::SimpleTeamInfo
{
  wchar_t Name[13];
  __int64 TeamId;
  __int64 TeamMarkId;
};

/* 932 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleState : BS_PktBody
{
  unsigned int m_StartTime;
  unsigned int m_EndTime;
  int m_Area;
  int m_Channel;
  BS_PktCBattleState::SimpleTeamInfo m_Def;
  BS_PktCBattleState::SimpleTeamInfo m_Atk;
  int SubResult[4];
};

/* 933 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpFinish : BS_PktBody
{
  int m_FinishTime;
};

/* 934 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleInfo : BS_PktBody
{
  int nAct;
};

/* 935 */
struct __cppobj BS_PktItemList : BS_PktBody
{
};

/* 936 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktGetDateTime : BS_PktBody
{
  int Action;
  int GlobalTime;
  float LocalTime;
};

/* 937 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRQEventMent : BS_PktBody
{
  unsigned int GivePostIdx;
};

/* 938 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMailContent : BS_PktBody
{
  __int64 m_mid;
  __int64 m_sid;
  __int64 m_rid;
  XiStrCharName m_senderName;
  int m_sendDate;
  int m_Kind;
  int m_State;
  wchar_t m_Subject[21];
  int m_MsgLen;
};

/* 939 */
struct __cppobj BS_PktAuctionCarListAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int AuctionCarTotalNum;
  __unaligned __declspec(align(1)) unsigned int AuctionCarNum;
  XiStrAuctionCarUnitInfo AuctionCarInfo[1];
};

/* 940 */
struct BS_PktInviteeListAck::Unit
{
  unsigned int Serial;
  wchar_t Name[16];
};

/* 941 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktInviteeListAck : BS_PktBody
{
  unsigned int m_Size;
  BS_PktInviteeListAck::Unit m_invitee[1];
};

/* 942 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitReadyAck : BS_PktBody
{
  unsigned int Serial;
  unsigned int Ready;
};

/* 943 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMoveVehicleP2P : BS_PktBody
{
  XiCarMove m_move;
  XiCarState m_state;
  int dueTime;
  int areaId;
};

/* 944 */
struct __cppobj BS_PktUnregisterRoomObserver : BS_PktBody
{
};

/* 945 */
struct __cppobj BS_PktAuctionCarSearchAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int AuctionCarTotalNum;
  __unaligned __declspec(align(1)) unsigned int AuctionCarNum;
  XiStrAuctionCarUnitInfo AuctionCarInfo[1];
};

/* 946 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarOn : BS_PktBody
{
  unsigned int InvenIdx;
  unsigned int Price;
};

/* 947 */
struct __cppobj BS_PktTradePropose : BS_PktBody
{
  XiStrCharName Name;
  unsigned int TradeIdx;
};

/* 948 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktGetCouponForVarListAck : BS_PktBody
{
  XiStrCouponForVar CouponForVar[10];
};

/* 949 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktBuyCarAck : BS_PktBody
{
  XiStrCarInfo CarInfo;
  unsigned int Gold;
};

/* 950 */
struct __cppobj BS_PktRoomModify : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int m_RoomId;
  unsigned __int16 m_MapId;
  unsigned __int16 m_MapFlag;
  unsigned __int16 m_PlayerCapacity;
  XiPvpRoomSlot m_Slot;
};

/* 951 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpGo : BS_PktBody
{
  int m_StartTime;
  int m_CountDown;
};

/* 952 */
struct __cppobj BS_PktAuctionOnAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int InvenIdx;
  __unaligned __declspec(align(1)) unsigned int Tex;
  XiStrAuctionItemInfo AuctionInfo;
};

/* 953 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktBattleReq : BS_PktBody
{
  XiVec4 m_Pos;
};

/* 954 */
struct XiStrPartyName
{
  wchar_t m_Name[64];
};

/* 955 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktInviteeList : BS_PktBody
{
  int m_PvpChannelId;
};

/* 956 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktLeaveTeamAck : BS_PktBody
{
  int m_Result;
};

/* 957 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMyAuctionCarListAck : BS_PktBody
{
  unsigned int ListUpdate;
  unsigned int AuctionCarNum;
  XiStrAuctionCarInfo AuctionCarInfo[1];
};

/* 958 */
struct __unaligned __declspec(align(4)) XiStrCharKey
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > Name;
  __int64 cid;
};

/* 959 */
struct XiStrCharKey::Is
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > Name;
};

/* 960 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAllAreaStatusAck : BS_PktBody
{
  unsigned int m_UserCnt[100];
  unsigned int m_PvpAreaCnt;
  unsigned int m_PvpUserCnt;
};

/* 961 */
struct __cppobj BS_PktCheckOutLobby : BS_PktBody
{
};

/* 962 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpEnd : BS_PktBody
{
  unsigned int m_Serial;
  int m_EndType;
  int m_EndTime;
  float m_Record;
  int m_Rank;
};

/* 963 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestGiveUp : BS_PktBody
{
  unsigned int TableIdx;
};

/* 964 */
struct __unaligned __declspec(align(4)) XiCarInfo
{
  wchar_t m_cname[13];
  unsigned int m_Ip;
  unsigned int m_Port;
  __int64 TeamId;
  __int64 TeamMarkId;
  wchar_t TeamName[13];
};

/* 965 */
struct __cppobj BS_PktBattleEnd : BS_PktBody
{
  unsigned __int16 m_Serial;
  unsigned int m_Type;
  unsigned int m_Result;
  XiVec4 m_Pos;
  XiVec4 m_Vel;
  int m_Time;
};

/* 966 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktLog : BS_PktBody
{
  unsigned int Key;
  int NArg1;
  int NArg2;
  int NArg3;
  char Name[20];
  char Content[64];
};

/* 967 */
struct __cppobj BS_PktRoomCreate : BS_PktBody
{
  XiPvpUserInfo m_UserInfo;
  __int16 m_RoomType;
  unsigned __int16 m_MapId;
  unsigned __int16 m_PlayerCapacity;
  unsigned __int16 m_VeiwerCapacity;
  wchar_t m_RoomName[30];
  wchar_t m_RoomPass[30];
};

/* 968 */
struct __cppobj BS_PktArbeitListAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int GivePostIdx;
  __unaligned __declspec(align(1)) unsigned int ArbeitNum;
  XiStrArbeitInfo ArbeitInfo[1];
};

/* 969 */
struct __cppobj BS_PktTradeItemOffAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int TradeIdx;
  __unaligned __declspec(align(1)) int ItemIdx;
  XiStrCharName Name;
};

/* 970 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarList : BS_PktBody
{
  unsigned int Offset;
  unsigned int ListNum;
  unsigned int Type;
  unsigned int SortType;
};

/* 971 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktGetTeamMark : BS_PktBody
{
  __int64 m_TeamId;
};

/* 972 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktItemUseEx : BS_PktBody
{
  unsigned int DestInvenIdx;
  unsigned int SrcInvenIdx;
};

/* 973 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktInstantReward : BS_PktBody
{
  unsigned int TableIdx;
};

/* 974 */
struct __cppobj BS_PktJoinTeamConfirm : BS_PktBody
{
  XiTeamBind m_bind;
  int m_Result;
};

/* 975 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktInstantComplete : BS_PktBody
{
  unsigned int TableIdx;
};

/* 976 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitList : BS_PktBody
{
  unsigned int GivePostIdx;
};

/* 977 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUserAuthAck : BS_PktBody
{
  unsigned int m_Ticket;
  unsigned int m_Ret;
  unsigned int m_Time;
  char m_STicket[64];
};

/* 978 */
struct XiStrCarSlot
{
  int nSpeed;
  int nCrash;
  int nAccel;
  int nBoost;
};

/* 979 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionBuy : BS_PktBody
{
  unsigned int Serial;
};

/* 980 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktLeaveTeam : BS_PktBody
{
  __int64 m_TeamId;
};

/* 981 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestFailAck : BS_PktBody
{
  unsigned int TableIdx;
};

/* 982 */
struct __cppobj BS_PktFlushCast : BS_PktBody
{
};

/* 983 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktObserveMode : BS_PktBody
{
  unsigned int m_mode;
  int m_areaId;
  unsigned int m_Serial;
};

/* 984 */
struct XiStrMyInstant
{
  unsigned int TableIdx;
  unsigned int State;
};

/* 985 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleRoomReadyAck : BS_PktBody
{
  int Target;
  int Result;
};

/* 986 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPartyReject : BS_PktBody
{
  unsigned int m_Serial;
  unsigned int m_Ticket;
  wchar_t m_Name[10];
  wchar_t m_Msg[50];
};

/* 987 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktFuelChargeRes : BS_PktBody
{
  XiStrFuelChargeRes res;
};

/* 988 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCompleteAck : BS_PktBody
{
  unsigned int Serial;
  unsigned int Price;
};

/* 989 */
struct __cppobj BS_PktMyAuctionListAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int ListUpdate;
  __unaligned __declspec(align(1)) unsigned int AuctionNum;
  XiStrAuctionItemInfo AuctionInfo[1];
};

/* 990 */
struct __cppobj BS_PktLevelUp : BS_PktBody
{
  XiStrCharName Name;
  unsigned int Level;
};

/* 991 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMyTeamInfoAck : BS_PktBody
{
  unsigned int m_Act;
  __int64 m_Cid;
  int m_TeamRank;
  XiStrTeamInfo m_TeamInfo;
};

/* 992 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTradeGold : BS_PktBody
{
  unsigned int TradeIdx;
  __int64 Gold;
};

/* 993 */
union $43FC83DAC0138A0340A76C16734A339F
{
  int nTime;
  float fTime;
};

/* 994 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUDPSync : BS_PktBody
{
  int m_Serial;
  $43FC83DAC0138A0340A76C16734A339F m_Local;
  int m_nGlobalTime;
};

/* 995 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMailSet : BS_PktBody
{
  __int64 m_mid;
  int m_cmd;
};

/* 996 */
struct BS_PktCBattleInfoAck::Date
{
  int year;
  int month;
  int mday;
  int wday;
};

/* 997 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleInfoAck : BS_PktBody
{
  int nAct;
  BS_PktCBattleInfoAck::Date m_battleDate;
  int m_Page;
  int m_Size;
  XiCBattleChannel m_channel[1];
};

/* 998 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktLeaveArea : BS_PktBody
{
  int m_Area;
};

/* 999 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktChaseRequest : BS_PktBody
{
  bool m_Now;
  XiVec4 m_StartPos;
};

/* 1000 */
struct __cppobj BS_PktTradeCompleteAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int TradeIdx;
  __unaligned __declspec(align(1)) unsigned int LockState;
  XiStrCharName Name;
};

/* 1001 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCancel : BS_PktBody
{
  unsigned int Serial;
};

/* 1002 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCreateTeam : BS_PktBody
{
  XiStrTeamInfo m_TeamInfo;
};

/* 1003 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleJoinOBS : BS_PktBody
{
  int m_TargetChannel;
};

/* 1004 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPartyLeave : BS_PktBody
{
  unsigned int m_Serial;
};

/* 1005 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomChangeTeam : BS_PktBody
{
  unsigned int m_RoomId;
  unsigned int m_Serial;
  unsigned int m_TeamId;
};

/* 1006 */
struct __cppobj BS_PktBanishTeamMember : BS_PktBody
{
  XiTeamBind m_bind;
};

/* 1007 */
struct __cppobj BS_PktLoadChar : BS_PktBody
{
  XiStrCharName Name;
  unsigned int Serial;
};

/* 1008 */
struct __cppobj BS_PktChatMsg : BS_PktBody
{
  wchar_t m_Name[10];
  unsigned __int16 m_Len;
};

/* 1009 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitGoalPlace : BS_PktBody
{
  unsigned int Serial;
  unsigned int PlaceIdx;
};

/* 1010 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTradeComplete : BS_PktBody
{
  unsigned int TradeIdx;
  __int64 Gold;
};

/* 1011 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktJoinTeam : BS_PktBody
{
  __int64 m_TeamId;
};

/* 1012 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTimeSyncByUDP : BS_PktBody
{
  $43FC83DAC0138A0340A76C16734A339F m_Local;
  int m_nGlobalTime;
};

/* 1013 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMoveVehicleExt : BS_PktBody
{
  XiCarMove m_move;
  XiCarInfo m_info;
};

/* 1014 */
struct __cppobj BS_PktChaseHit : BS_PktBody
{
  unsigned __int16 m_Serial;
  unsigned __int16 m_TargetSerial;
  unsigned __int16 m_TargetCarSort;
  float m_Damage;
  int m_Time;
  wchar_t m_Name[10];
};

/* 1015 */
struct BS_PktPartyJoinResult::Unit
{
  unsigned int m_Serial;
  wchar_t m_Name[10];
  int m_Level;
};

/* 1016 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPartyJoinResult : BS_PktBody
{
  unsigned int m_Result;
  int m_PartyId;
  wchar_t m_PartyName[30];
  unsigned int m_Size;
  BS_PktPartyJoinResult::Unit m_Member[1];
};

/* 1017 */
struct XiStrEnChantBonus
{
  int Speed;
  int Crash;
  int Accel;
  int Boost;
  float Drop;
  float Exp;
  float MitronCapacity;
  float MitronEfficiency;
};

/* 1018 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitFailAck : BS_PktBody
{
  unsigned int Serial;
};

/* 1019 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitGiveUp : BS_PktBody
{
  unsigned int Serial;
};

/* 1020 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktCheckCharNameAck : BS_PktBody
{
  XiStrCharName Name;
  bool Usable;
};

/* 1021 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktNotifyFreeCar : BS_PktBody
{
  int m_AreaId;
  XiFreeCarMove m_move;
};

/* 1022 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktGetCoupon : BS_PktBody
{
  unsigned int Type;
  int StampIdx;
};

/* 1023 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktItemUse : BS_PktBody
{
  unsigned int InvenIdx;
};

/* 1024 */
struct __cppobj BS_PktGetMail : BS_PktBody
{
};

/* 1025 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTradeItemOff : BS_PktBody
{
  unsigned int TradeIdx;
  int ItemIdx;
};

/* 1026 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktStatUpdate : BS_PktBody
{
  XiStrStatInfo StatInfo;
  XiStrEnChantBonus EnChantBonus;
};

/* 1027 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleGetSetting : BS_PktBody
{
  int m_Channel;
};

/* 1028 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCheckInLobby : BS_PktBody
{
  unsigned int m_Version;
  unsigned int m_Ticket;
  wchar_t m_ID[40];
  unsigned int m_Time;
  char m_STicket[64];
};

/* 1029 */
struct __cppobj BS_PktRQNPCStateAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int GivePostIdx;
  unsigned __int16 NPCState;
};

/* 1030 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktFriendAddAck : BS_PktBody
{
  __int64 cid;
  unsigned int Serial;
  int state;
  wchar_t Name[16];
};

/* 1031 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUpdateCouponForVar : BS_PktBody
{
  XiStrCouponForVar CouponForVar[10];
};

/* 1032 */
struct __cppobj BS_PktTradeProposeAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int TradeIdx;
  unsigned __int16 Result;
};

/* 1033 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSetTeamMark : BS_PktBody
{
  __int64 m_TeamId;
  int m_Size;
};

/* 1034 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMyArbeitList : BS_PktBody
{
  unsigned int GivePostIdx;
};

/* 1035 */
struct __cppobj BS_PktArbeitStartAck : BS_PktBody
{
  XiStrArbeitInfo ArbeitInfo;
  unsigned int Serial;
  unsigned int TableIdx;
  unsigned int CompleteNum;
};

/* 1036 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionComplete : BS_PktBody
{
  unsigned int Serial;
};

/* 1037 */
struct __cppobj BS_SingletonHeap<XiGameClient,5>
{
};

/* 1038 */
struct __cppobj std::_Allocator_base<std::pair<unsigned long,BS_Overlapped *> >
{
};

/* 1039 */
struct __cppobj std::allocator<std::pair<unsigned long,BS_Overlapped *> > : std::_Allocator_base<std::pair<unsigned long,BS_Overlapped *> >
{
};

/* 1040 */
struct std::_Vector_val<std::pair<unsigned long,BS_Overlapped *>,std::allocator<std::pair<unsigned long,BS_Overlapped *> > >
{
  std::allocator<std::pair<unsigned long,BS_Overlapped *> > _Alval;
};

/* 1041 */
struct std::pair<unsigned long,BS_Overlapped *>
{
  unsigned int first;
  BS_Overlapped *second;
};

/* 1042 */
struct __cppobj std::vector<std::pair<unsigned long,BS_Overlapped *>,std::allocator<std::pair<unsigned long,BS_Overlapped *> > > : std::_Vector_val<std::pair<unsigned long,BS_Overlapped *>,std::allocator<std::pair<unsigned long,BS_Overlapped *> > >
{
  std::pair<unsigned long,BS_Overlapped *> *_Myfirst;
  std::pair<unsigned long,BS_Overlapped *> *_Mylast;
  std::pair<unsigned long,BS_Overlapped *> *_Myend;
};

/* 1043 */
struct __cppobj std::binary_function<std::pair<unsigned long,BS_Overlapped *>,std::pair<unsigned long,BS_Overlapped *>,bool>
{
};

/* 1044 */
struct __cppobj std::greater<std::pair<unsigned long,BS_Overlapped *> > : std::binary_function<std::pair<unsigned long,BS_Overlapped *>,std::pair<unsigned long,BS_Overlapped *>,bool>
{
};

/* 1045 */
struct __declspec(align(4)) std::priority_queue<std::pair<unsigned long,BS_Overlapped *>,std::vector<std::pair<unsigned long,BS_Overlapped *>,std::allocator<std::pair<unsigned long,BS_Overlapped *> > >,std::greater<std::pair<unsigned long,BS_Overlapped *> > >
{
  std::vector<std::pair<unsigned long,BS_Overlapped *>,std::allocator<std::pair<unsigned long,BS_Overlapped *> > > c;
  std::greater<std::pair<unsigned long,BS_Overlapped *> > comp;
};

/* 1046 */
struct BS_Timer
{
  BS_TimerVtbl *vfptr;
};

/* 1047 */
struct BS_TimerVtbl
{
  unsigned int (__thiscall *GetCurrentTick)(BS_Timer *this);
};

/* 1048 */
struct BS_Schedule
{
  std::priority_queue<std::pair<unsigned long,BS_Overlapped *>,std::vector<std::pair<unsigned long,BS_Overlapped *>,std::allocator<std::pair<unsigned long,BS_Overlapped *> > >,std::greater<std::pair<unsigned long,BS_Overlapped *> > > m_BookingQueue;
  unsigned int m_uiTimerID;
  BS_CompletionHandler *m_IOCP;
  BS_Timer *m_Timer;
};

/* 1049 */
struct __cppobj BS_DeltaTimer : BS_Timer
{
  long double m_Delta;
};

/* 1050 */
struct __cppobj std::_Allocator_base<BS_LuaBind *>
{
};

/* 1051 */
struct __cppobj std::allocator<BS_LuaBind *> : std::_Allocator_base<BS_LuaBind *>
{
};

/* 1052 */
struct std::_Vector_val<BS_LuaBind *,std::allocator<BS_LuaBind *> >
{
  std::allocator<BS_LuaBind *> _Alval;
};

/* 1055 */
struct LuaParam::Args
{
  struct lua_State *m_LuaState;
};

/* 1056 */
struct __declspec(align(4)) LuaParam::Rets
{
  struct lua_State *m_LuaState;
  __int16 m_RetCount;
};

/* 1053 */
struct BS_LuaBind
{
  BS_LuaBindVtbl *vfptr;
  struct lua_State *m_LuaState;
  LuaParam::Args ARGS;
  LuaParam::Rets RETS;
};

/* 1054 */
struct BS_LuaBindVtbl
{
  bool (__thiscall *BindingMethod)(BS_LuaBind *this);
};

/* 1057 */
struct __cppobj std::vector<BS_LuaBind *,std::allocator<BS_LuaBind *> > : std::_Vector_val<BS_LuaBind *,std::allocator<BS_LuaBind *> >
{
  BS_LuaBind **_Myfirst;
  BS_LuaBind **_Mylast;
  BS_LuaBind **_Myend;
};

/* 1058 */
struct BS_LuaFunc
{
  wchar_t m_Error[255];
  struct lua_State *m_LuaState;
  int m_BSIndex;
  __int16 m_ArgNum;
  __int16 m_RetNum;
};

/* 1059 */
struct BS_LuaVM
{
  std::vector<BS_LuaBind *,std::allocator<BS_LuaBind *> > m_pLuaBindList;
  BS_LuaFunc *m_pLuaFunc;
  struct lua_State *m_LuaState;
};

/* 1060 */
struct __cppobj XiGameClient : BS_SingletonHeap<XiGameClient,5>
{
  BS_Event m_Process;
  bool m_bQuit;
  BS_Schedule *m_pSchedule;
  BS_DeltaTimer *m_pTimer;
  BS_LuaVM *m_pLuaVM;
  BS_CompletionHandlerMgr *m_pIOCPMgr;
  XiGameClientNet *m_pNet;
};

/* 1061 */
struct XiPvpRoomInfo
{
  unsigned int m_RoomId;
  unsigned int m_RoomLifeId;
  unsigned int m_CreateTime;
  unsigned __int16 m_MapId;
  unsigned __int16 m_State;
  __int16 m_AreaId;
  __int16 m_RoomType;
  unsigned __int16 m_PlayerCount;
  unsigned __int16 m_PlayerCapacity;
  unsigned __int16 m_VeiwerCount;
  unsigned __int16 m_VeiwerCapacity;
  wchar_t m_RoomName[30];
  __int64 m_TeamId;
  __int64 m_TeamMarkId;
};

/* 1062 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpGateReward : BS_PktBody
{
  unsigned int m_Serial;
  int m_GateReward;
};

/* 1063 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTCSSignal : BS_PktBody
{
  XiTCSSignal m_signal;
};

/* 1064 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktDriveInfoUpdate : BS_PktBody
{
  XiStrDriveInfo driveInfo;
};

/* 1065 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktJoinArea : BS_PktBody
{
  int m_Area;
};

/* 1066 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPartyAccept : BS_PktBody
{
  unsigned int m_Serial;
  unsigned int m_Ticket;
  wchar_t m_Name[10];
  int m_Level;
};

/* 1067 */
struct XiStrUserPermission
{
  unsigned int m_Flag;
};

/* 1068 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPvpLoadComplete : BS_PktBody
{
  int m_Time;
  int m_CompletePercent;
};

/* 1069 */
struct __cppobj BS_PktJoinChannel : BS_PktBody
{
  wchar_t m_Name[10];
};

/* 1070 */
struct __cppobj BS_PktCheckCharName : BS_PktBody
{
  XiStrCharName Name;
};

/* 1071 */
struct __cppobj BS_PktTutorialClearAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int GetExp;
  __unaligned __declspec(align(1)) unsigned int GetMoney;
  __unaligned __declspec(align(1)) XiStrExpInfo ExpInfo;
  unsigned __int16 Level;
  unsigned int TableIdx;
};

/* 1072 */
struct __cppobj BS_PktTradeOpen : BS_PktBody
{
  XiStrCharName Name;
};

/* 1073 */
struct __cppobj BS_PktLeaveTeamRequest : BS_PktBody
{
  XiTeamBind m_bind;
};

/* 1074 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktGetTeamMarkAck : BS_PktBody
{
  int m_Result;
  __int64 m_TeamId;
  __int64 m_ImgId;
  int m_Size;
};

/* 1075 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarBuyed : BS_PktBody
{
  unsigned int Serial;
};

/* 1076 */
struct __cppobj BS_PktUserInfo : BS_PktBody
{
};

/* 1077 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRegisterAgent : BS_PktBody
{
  int m_AreaId;
};

/* 1078 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktEnterGroup : BS_PktBody
{
  int m_Group;
};

/* 1079 */
struct __cppobj BS_PktChaseProgress : BS_PktBody
{
  unsigned __int16 m_Serial;
  unsigned __int16 m_TargetSerial;
  unsigned __int16 m_TargetCarSort;
  int m_Time;
  int m_State;
};

/* 1080 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitReady : BS_PktBody
{
  unsigned int Serial;
  unsigned int Ready;
};

/* 1081 */
struct __cppobj BS_PktChannelList : BS_PktBody
{
};

/* 1082 */
struct __cppobj BS_PktCBattleMissedItems : BS_PktBody
{
  __unaligned __declspec(align(1)) int m_TargetChannel;
  __unaligned __declspec(align(1)) int m_Page;
  __unaligned __declspec(align(1)) int m_Size;
  XiStrItemData m_items[1];
};

/* 1083 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionOn : BS_PktBody
{
  unsigned int TableIdx;
  unsigned int InvenIdx;
  unsigned int ItemNum;
  unsigned int Price;
};

/* 1084 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCloseTeamAck : BS_PktBody
{
  int m_Result;
  XiStrTeamInfo m_TeamInfo;
};

/* 1085 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarSearch : BS_PktBody
{
  unsigned int Offset;
  unsigned int ListNum;
  unsigned int Type;
  unsigned int SortType;
  unsigned int SearchType;
  wchar_t Text[128];
};

/* 1086 */
struct __cppobj BS_PktGetCouponForVarList : BS_PktBody
{
};

/* 1087 */
struct __cppobj BS_PktTradeGoldAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int TradeIdx;
  __unaligned __declspec(align(1)) __int64 Gold;
  XiStrCharName Name;
};

/* 1088 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktExitArea : BS_PktBody
{
  int m_Area;
};

/* 1089 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktWeather : BS_PktBody
{
  $38636D0EA7AD20B267BDBB95270A9F80 m_weather;
};

/* 1090 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktJoinTeamAck : BS_PktBody
{
  int m_Result;
  XiStrTeamInfo m_TeamInfo;
};

/* 1091 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleRoomJoin : BS_PktBody
{
  XiPvpUserInfo m_UserInfo;
  int m_CarAttr;
  int Target;
};

/* 1092 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitFail : BS_PktBody
{
  unsigned int Serial;
};

/* 1093 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSellCarAck : BS_PktBody
{
  unsigned int CarId;
  unsigned int Gold;
};

/* 1094 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCreateChar : BS_PktBody
{
  XiStrCharName Name;
  unsigned __int16 Avatar;
  unsigned int CarType;
  unsigned int Color;
};

/* 1095 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomListAck : BS_PktBody
{
  unsigned int m_Page;
  unsigned int m_TotalPage;
  unsigned int m_Size;
  int m_TimeStamp;
  XiPvpRoomInfo m_unit[1];
};

/* 1096 */
struct __cppobj BS_PktAreaStatus : BS_PktBody
{
};

/* 1097 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktItemUseExAck : BS_PktBody
{
  unsigned int DestInvenIdx;
  unsigned int SrcInvenIdx;
};

/* 1098 */
struct __cppobj BS_PktRegisterChannelAdmin : BS_PktBody
{
  wchar_t m_Name[10];
};

/* 1099 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMoveFreeTrafficVehicle : BS_PktBody
{
  XiFreeCarMove m_move;
};

/* 1100 */
struct __cppobj BS_PktTopRankList : BS_PktBody
{
  unsigned __int16 RankNum;
  XiStrRankInfo Rank[1];
};

/* 1101 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCBattleInstance : BS_PktBody
{
  int m_Act;
  unsigned int m_Size;
};

/* 1102 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktChunk : BS_PktBody
{
  unsigned int Len;
};

/* 1103 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktBattleRes : BS_PktBody
{
  unsigned __int16 m_Serial;
  XiVec4 m_Pos;
  char m_Accepted;
};

/* 1104 */
struct __cppobj BS_PktTradeLock : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int TradeIdx;
  unsigned __int16 Lock;
};

/* 1105 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionBuyAck : BS_PktBody
{
  unsigned int Serial;
  unsigned int Price;
};

/* 1106 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMyQuestList : BS_PktBody
{
  unsigned int GivePostIdx;
};

/* 1107 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktCharInfoAck : BS_PktBody
{
  XiStrCharInfo CharInfo;
  unsigned int CarInfoNum;
};

/* 1108 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMyPosition : BS_PktBody
{
  int m_WorldId;
  int m_AreaId;
};

/* 1109 */
struct __cppobj BS_PktJoinTeamApplyByName : BS_PktBody
{
  wchar_t m_TeamName[13];
  XiTeamBind m_bind;
};

/* 1110 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktGlobalTime : BS_PktBody
{
  $BDBC065E804B9590594210616B70BA0B ___u1;
  unsigned int m_dwGlobalTime;
};

/* 1111 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMoveVehiclePlus : BS_PktBody
{
  XiCarMove m_move;
  char data[128];
};

/* 1112 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktExitAreaAck : BS_PktBody
{
  int m_Result;
  __int16 m_MsgLen;
  wchar_t m_Msg[1];
};

/* 1113 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMoveVehicle : BS_PktBody
{
  XiCarMove m_move;
  XiCarState m_state;
};

/* 1114 */
struct __cppobj BS_PktCharInfo : BS_PktBody
{
  XiStrCharName Name;
};

/* 1115 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktChaseBegin : BS_PktBody
{
  int m_courseId;
  int m_firstHuvLevel;
  int m_firstHuvId;
  int m_HuvNum;
};

/* 1116 */
struct __cppobj BS_PktChannelInfo : BS_PktBody
{
  XiStrChannelName m_Name;
};

/* 1117 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTimeSync : BS_PktBody
{
  $43FC83DAC0138A0340A76C16734A339F m_Local;
  int m_nGlobalTime;
};

/* 1118 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomMaster : BS_PktBody
{
  unsigned int m_RoomId;
  unsigned int m_MasterSerial;
};

/* 1119 */
struct __cppobj BS_PktPlayerInfoRes : BS_PktBody
{
  unsigned __int16 m_Serial;
  XiPlayerInfo m_playerInfo;
};

/* 1120 */
struct __cppobj BS_PktPlayerInfoReq : BS_PktBody
{
  unsigned __int16 m_Serial[32];
};

/* 1121 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCancelAck : BS_PktBody
{
  unsigned int Serial;
};

/* 1122 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPing : BS_PktBody
{
  $BDBC065E804B9590594210616B70BA0B ___u1;
};

/* 1123 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktInstantCompleteAck : BS_PktBody
{
  unsigned int TableIdx;
};

/* 1124 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCloseTeam : BS_PktBody
{
  __int64 m_TeamId;
};

/* 1125 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTurnUpItemNoti : BS_PktBody
{
  float m_ItemTicket;
};

/* 1126 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestReward : BS_PktBody
{
  unsigned int TableIdx;
};

/* 1127 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktInstantGiveUpAck : BS_PktBody
{
  unsigned int TableIdx;
};

/* 1128 */
struct __cppobj BS_PktSay : BS_PktBody
{
  unsigned __int16 m_Len;
};

/* 1129 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktBlockList : BS_PktBody
{
  unsigned int m_Num;
  XiBlockInfo m_unit[1];
};

/* 1130 */
struct XiRankUnit
{
  unsigned int Time;
  int Rank;
};

/* 1131 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitRewardAck : BS_PktBody
{
  unsigned int Serial;
  unsigned int GetExp;
  unsigned int GetMoney;
  XiStrExpInfo ExpInfo;
  unsigned __int16 Level;
  XiRankUnit BestRankUnit;
  XiRankUnit CurRankUnit;
  unsigned int InAver;
  XiStrRankInfo Rank[3];
};

/* 1132 */
struct __cppobj BS_PktAreaChat : BS_PktBody
{
  wchar_t m_Name[10];
  wchar_t m_Player[16];
  unsigned __int16 m_Len;
};

/* 1133 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitReward : BS_PktBody
{
  unsigned int Serial;
};

/* 1134 */
struct __cppobj BS_PktMyInstantList : BS_PktBody
{
};

/* 1135 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMyTeamInfo : BS_PktBody
{
  unsigned int m_Act;
};

/* 1136 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRQEventMentAck : BS_PktBody
{
  unsigned int GivePostIdx;
  unsigned __int16 MsgLen;
  wchar_t Msg[1];
};

/* 1137 */
struct __cppobj BS_PktClearAreaMap : BS_PktBody
{
};

/* 1138 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTrafficItemEvent : BS_PktBody
{
  int m_Type;
  int m_Time;
  float m_Arg;
};

/* 1139 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCancelCloseTeamAck : BS_PktBody
{
  int m_Result;
  XiStrTeamInfo m_TeamInfo;
};

/* 1140 */
struct XiChaseResultInfo
{
  wchar_t m_Name[32];
  unsigned __int16 m_Serial;
  unsigned __int16 m_CarSort;
  unsigned int m_DeltaMoney;
  unsigned int m_Money;
  unsigned int m_DeltaExp;
  XiStrExpInfo m_ExpInfo;
  unsigned int m_Level;
  float m_Point;
  unsigned int m_RewardItemCnt;
  unsigned int m_RewardItem[2];
};

/* 1141 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktInstantStartAck : BS_PktBody
{
  unsigned int TableIdx;
};

/* 1142 */
struct __unaligned __declspec(align(2)) XiStrTradeInfo
{
  XiStrItemUnit ItemUnit;
  unsigned int TableIdx;
  unsigned int InvenIdx;
  int ItemIdx;
};

/* 1143 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTradeItemOnAck : BS_PktBody
{
  unsigned int TradeIdx;
  XiStrTradeInfo TradeInfo;
  XiStrCharName Name;
};

/* 1144 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionSearchAck : BS_PktBody
{
  unsigned int AuctionTotalNum;
  unsigned int AuctionNum;
  XiStrAuctionUnitInfo AuctionInfo[1];
};

/* 1145 */
struct BS_PktGetDateTimeAck::Date
{
  __int16 year;
  __int16 month;
  __int16 mday;
  __int16 wday;
};

/* 1146 */
struct BS_PktGetDateTimeAck::Time
{
  char hour;
  char min;
  char sec;
  char ped;
};

/* 1147 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktGetDateTimeAck : BS_PktBody
{
  int Action;
  int GlobalTime;
  float LocalTime;
  int Time_t;
  BS_PktGetDateTimeAck::Date m_date;
  BS_PktGetDateTimeAck::Time m_time;
};

/* 1148 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAreaStatusAck : BS_PktBody
{
  unsigned int m_UserCnt[100];
};

/* 1149 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomDirectJoin : BS_PktBody
{
  unsigned int m_Serial;
  XiPvpUserInfo m_UserInfo;
  int m_CarAttr;
  XiPvpRoomFilter m_RoomFilter;
};

/* 1150 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTradeClose : BS_PktBody
{
  unsigned int TradeIdx;
};

/* 1151 */
struct __cppobj BS_PktRoomCreateAck : BS_PktBody
{
  XiPvpUserInfo m_UserInfo;
  __unaligned __declspec(align(1)) int m_Result;
  __unaligned __declspec(align(1)) unsigned int m_RoomId;
  __unaligned __declspec(align(1)) unsigned int m_RoomLifeId;
  __int16 m_RoomType;
};

/* 1152 */
struct __cppobj BS_PktJoinTeamByName : BS_PktBody
{
  wchar_t m_TeamName[13];
};

/* 1153 */
struct __cppobj BS_PktBattleResult : BS_PktBody
{
  unsigned __int16 m_Serial;
  unsigned int m_Exp;
  unsigned int m_ItemCode;
};

/* 1154 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktSilentMove : BS_PktBody
{
  XiCarMove m_move;
  XiCarState m_state;
};

/* 1155 */
struct __cppobj __unaligned __declspec(align(1)) BS_PktCharUpdate : BS_PktBody
{
  XiStrCharInfo CharInfo;
};

/* 1156 */
struct __cppobj BS_PktBattleMove : BS_PktBody
{
  unsigned __int16 m_Serial;
  unsigned int m_Type;
  XiVec4 m_Pos;
  XiVec4 m_Vel;
  int m_Time;
};

/* 1157 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomSecureJoin : BS_PktBody
{
  unsigned int m_Serial;
  XiPvpUserInfo m_UserInfo;
  int m_CarAttr;
  unsigned int m_RoomId;
  unsigned int m_RoomLifeId;
  wchar_t m_Name[16];
  wchar_t m_RoomPass[30];
  XiPvpRoomSlot m_Slot;
};

/* 1158 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktMyInstantListAck : BS_PktBody
{
  unsigned int InstantNum;
  XiStrMyInstant MyInstant[1];
};

/* 1159 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPartyBanish : BS_PktBody
{
  unsigned int m_Serial;
};

/* 1160 */
struct __cppobj BS_PktBuyCar : BS_PktBody
{
  XiStrCharName Name;
  unsigned int CarType;
  unsigned int Color;
  unsigned int Bumper;
};

/* 1161 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCheckInLobbyAck : BS_PktBody
{
  unsigned int m_Result;
  unsigned int m_Permission;
};

/* 1162 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRoomReject : BS_PktBody
{
  unsigned int m_Serial;
  unsigned int m_RoomId;
  unsigned int m_RoomLifeId;
  wchar_t m_Name[16];
  wchar_t m_Msg[50];
};

/* 1163 */
struct __cppobj BS_PktMoveTrafficVehicle : BS_PktBody
{
  XiTrafficCarMove m_move;
};

/* 1164 */
struct __cppobj BS_PktChaseResult : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int m_Result;
  __unaligned __declspec(align(1)) int m_TimeRecord;
  unsigned __int16 m_UnitSize;
  XiChaseResultInfo m_Unit[1];
};

/* 1165 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUpgradeItemAck : BS_PktBody
{
  unsigned int Gold;
  unsigned int Result;
  unsigned int SrcInvenIdx;
  unsigned int AddInvenIdx;
  int AddNum;
};

/* 1166 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktCharTeamInfo : BS_PktBody
{
  unsigned int m_Act;
  __int64 m_Cid;
  __int64 m_TeamId;
  int m_TeamRank;
};

/* 1167 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestGiveUpAck : BS_PktBody
{
  unsigned int TableIdx;
};

/* 1168 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktInstantGiveUp : BS_PktBody
{
  unsigned int TableIdx;
};

/* 1169 */
struct __cppobj BS_PktLeaveChannel : BS_PktBody
{
  wchar_t m_Name[10];
};

/* 1170 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPartyJoin : BS_PktBody
{
  unsigned int m_Serial;
  unsigned int m_Ticket;
  wchar_t m_Name[10];
  int m_Level;
};

/* 1171 */
struct __cppobj BS_PktChannelListAck : BS_PktBody
{
};

/* 1172 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktUnknownVehicle : BS_PktBody
{
  unsigned int m_Num;
  unsigned int m_Serial[1];
};

/* 1173 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktRQNPCState : BS_PktBody
{
  unsigned int GivePostIdx;
};

/* 1174 */
struct __cppobj BS_PktMyAuctionList : BS_PktBody
{
};

/* 1175 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktQuestGoalPlace : BS_PktBody
{
  unsigned int TableIdx;
};

/* 1176 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktArbeitStart : BS_PktBody
{
  unsigned int TableIdx;
};

/* 1177 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktItemUnion : BS_PktBody
{
  unsigned int DestInvenIdx;
  unsigned int SrcInvenIdx;
};

/* 1178 */
struct __cppobj BS_PktChasePropose : BS_PktBody
{
  unsigned __int16 m_Serial;
  XiVec4 m_StartPos;
  XiVec4 m_EndPos;
  int m_Type;
  int m_courseId;
  int m_firstHuvLevel;
  int m_firstHuvId;
  wchar_t m_PosName[100];
};

/* 1179 */
struct __cppobj BS_PktAllAreaStatus : BS_PktBody
{
};

/* 1180 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktAuctionCarBuyAck : BS_PktBody
{
  unsigned int Serial;
  unsigned int Price;
  XiStrCarInfo CarInfo;
};

/* 1181 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktTeamMembers : BS_PktBody
{
  int m_Act;
  __int64 m_TeamId;
  int m_TargetChannel;
};

/* 1182 */
struct __cppobj __unaligned __declspec(align(2)) BS_PktPartyInvite : BS_PktBody
{
  unsigned int m_Serial;
  unsigned int m_Ticket;
  wchar_t m_Name[10];
  int m_Level;
  wchar_t m_PartyName[30];
  wchar_t m_Msg[50];
};

/* 1183 */
struct __cppobj BS_PktArbeitGoalPlaceAck : BS_PktBody
{
  __unaligned __declspec(align(1)) unsigned int Serial;
  __unaligned __declspec(align(1)) unsigned int PlaceIdx;
  unsigned __int16 Complete;
};

/* 1184 */
struct __cppobj BS_XORCrypt
{
};

/* 1185 */
struct _WSABUF
{
  unsigned int len;
  char *buf;
};

/* 1186 */
struct __cppobj BS_AuthGroup : BS_LuaBind
{
};

/* 1187 */
struct __cppobj std::allocator<BS_LuaBind *>::rebind<BS_LuaBind *>
{
};

/* 1188 */
struct __cppobj std::iterator<std::random_access_iterator_tag,BS_LuaBind *,int,BS_LuaBind * const *,BS_LuaBind * const &>
{
};

/* 1189 */
struct __cppobj std::_Ranit<BS_LuaBind *,int,BS_LuaBind * const *,BS_LuaBind * const &> : std::iterator<std::random_access_iterator_tag,BS_LuaBind *,int,BS_LuaBind * const *,BS_LuaBind * const &>
{
};

/* 1190 */
struct __cppobj std::vector<BS_LuaBind *,std::allocator<BS_LuaBind *> >::const_iterator : std::_Ranit<BS_LuaBind *,int,BS_LuaBind * const *,BS_LuaBind * const &>
{
  BS_LuaBind **_Myptr;
};

/* 1191 */
struct __cppobj std::vector<BS_LuaBind *,std::allocator<BS_LuaBind *> >::iterator : std::vector<BS_LuaBind *,std::allocator<BS_LuaBind *> >::const_iterator
{
};

/* 1192 */
struct LuaStack::PopFront
{
  struct lua_State *m_LuaState;
};

/* 1193 */
struct LuaStack::PopBack
{
  struct lua_State *m_LuaState;
};

/* 1194 */
struct __cppobj BS_Connector : BS_SessionContainer
{
};

/* 1195 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> const &>
{
};

/* 1196 */
struct __cppobj std::_Bidit<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> const &> : std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> const &>
{
};

/* 1197 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::const_iterator : std::_Bidit<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> const &>
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *_Ptr;
};

/* 1198 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::iterator : std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::const_iterator
{
};

/* 1199 */
struct auto_lock<BS_CriticalSection>
{
  BS_CriticalSection *Lock;
};

/* 1200 */
struct BS_PoolInfo
{
  int Size;
  int Num;
};

/* 1201 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,BS_Buffer *,int,BS_Buffer * const *,BS_Buffer * const &>
{
};

/* 1202 */
struct __cppobj std::_Bidit<BS_Buffer *,int,BS_Buffer * const *,BS_Buffer * const &> : std::iterator<std::bidirectional_iterator_tag,BS_Buffer *,int,BS_Buffer * const *,BS_Buffer * const &>
{
};

/* 1203 */
struct __cppobj std::list<BS_Buffer *,std::allocator<BS_Buffer *> >::const_iterator : std::_Bidit<BS_Buffer *,int,BS_Buffer * const *,BS_Buffer * const &>
{
  std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node *_Ptr;
};

/* 1204 */
struct __cppobj std::list<BS_Buffer *,std::allocator<BS_Buffer *> >::iterator : std::list<BS_Buffer *,std::allocator<BS_Buffer *> >::const_iterator
{
};

/* 1205 */
struct std::pair<unsigned short const *,BS_SessionContainer *>
{
  const wchar_t *first;
  BS_SessionContainer *second;
};

/* 1206 */
struct __cppobj std::allocator<BS_SingleDispatch *>::rebind<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node>
{
};

/* 1207 */
struct __cppobj std::allocator<BS_SingleDispatch *>::rebind<std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node *>
{
};

/* 1208 */
struct __cppobj std::allocator<BS_SingleDispatch *>::rebind<BS_SingleDispatch *>
{
};

/* 1209 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> const &>
{
};

/* 1210 */
struct __cppobj std::_Bidit<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> const &> : std::iterator<std::bidirectional_iterator_tag,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> const &>
{
};

/* 1211 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::const_iterator : std::_Bidit<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *>,int,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> const *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> const &>
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *_Ptr;
};

/* 1212 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::iterator : std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::const_iterator
{
};

/* 1213 */
struct __declspec(align(4)) std::pair<std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::iterator,bool>
{
  std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::iterator first;
  bool second;
};

/* 1214 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >::rebind<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >
{
};

/* 1215 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node>
{
};

/* 1216 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::_Node *>
{
};

/* 1217 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >::rebind<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >
{
};

/* 1218 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >::rebind<char>
{
};

/* 1219 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,BS_SingleDispatch *,int,BS_SingleDispatch * const *,BS_SingleDispatch * const &>
{
};

/* 1220 */
struct __cppobj std::_Bidit<BS_SingleDispatch *,int,BS_SingleDispatch * const *,BS_SingleDispatch * const &> : std::iterator<std::bidirectional_iterator_tag,BS_SingleDispatch *,int,BS_SingleDispatch * const *,BS_SingleDispatch * const &>
{
};

/* 1221 */
struct __cppobj std::list<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::const_iterator : std::_Bidit<BS_SingleDispatch *,int,BS_SingleDispatch * const *,BS_SingleDispatch * const &>
{
  std::_List_nod<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::_Node *_Ptr;
};

/* 1222 */
struct __cppobj std::list<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::iterator : std::list<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::const_iterator
{
};

/* 1223 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >::rebind<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >
{
};

/* 1224 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node>
{
};

/* 1225 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_SessionContainer *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >,0> >::_Node *>
{
};

/* 1226 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >::rebind<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >
{
};

/* 1227 */
struct __cppobj std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_SessionContainer *> >::rebind<char>
{
};

/* 1228 */
struct __cppobj std::iterator<std::random_access_iterator_tag,BS_SingleDispatch *,int,BS_SingleDispatch * const *,BS_SingleDispatch * const &>
{
};

/* 1229 */
struct __cppobj std::_Ranit<BS_SingleDispatch *,int,BS_SingleDispatch * const *,BS_SingleDispatch * const &> : std::iterator<std::random_access_iterator_tag,BS_SingleDispatch *,int,BS_SingleDispatch * const *,BS_SingleDispatch * const &>
{
};

/* 1230 */
struct __cppobj std::vector<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::const_iterator : std::_Ranit<BS_SingleDispatch *,int,BS_SingleDispatch * const *,BS_SingleDispatch * const &>
{
  BS_SingleDispatch **_Myptr;
};

/* 1231 */
struct __cppobj std::vector<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::iterator : std::vector<BS_SingleDispatch *,std::allocator<BS_SingleDispatch *> >::const_iterator
{
};

/* 1232 */
struct __declspec(align(4)) std::pair<std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::iterator,bool>
{
  std::_Tree<std::_Tmap_traits<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BS_PacketAnalyze *,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BS_PacketAnalyze *> >,0> >::iterator first;
  bool second;
};

/* 1233 */
struct __cppobj BS_DumyPacketDispatch : BS_PacketDispatch
{
};

/* 1234 */
struct __cppobj BS_SingletonHeap<BS_Script,5>
{
};

/* 1235 */
struct __cppobj BS_Script : BS_SingletonHeap<BS_Script,5>
{
};

/* 1236 */
struct __cppobj BS_SingletonHeap<BS_WinSocket,5>
{
};

/* 1237 */
struct __cppobj BS_WinSocket : BS_SingletonHeap<BS_WinSocket,5>
{
};

/* 1238 */
struct hostent
{
  char *h_name;
  char **h_aliases;
  __int16 h_addrtype;
  __int16 h_length;
  char **h_addr_list;
};

/* 1239 */
struct HWND__
{
  int unused;
};

/* 1240 */
struct linger
{
  unsigned __int16 l_onoff;
  unsigned __int16 l_linger;
};

/* 1241 */
struct WSAData
{
  unsigned __int16 wVersion;
  unsigned __int16 wHighVersion;
  char szDescription[257];
  char szSystemStatus[129];
  unsigned __int16 iMaxSockets;
  unsigned __int16 iMaxUdpDg;
  char *lpVendorInfo;
};

/* 1242 */
struct __cppobj std::_Allocator_base<BS_Session *>
{
};

/* 1243 */
struct __cppobj std::allocator<BS_Session *> : std::_Allocator_base<BS_Session *>
{
};

/* 1244 */
struct std::_Vector_val<BS_Session *,std::allocator<BS_Session *> >
{
  std::allocator<BS_Session *> _Alval;
};

/* 1245 */
struct __cppobj std::vector<BS_Session *,std::allocator<BS_Session *> > : std::_Vector_val<BS_Session *,std::allocator<BS_Session *> >
{
  BS_Session **_Myfirst;
  BS_Session **_Mylast;
  BS_Session **_Myend;
};

/* 1246 */
struct __cppobj BS_Listener : BS_SessionContainer
{
  BS_CriticalSection m_SessionListLock;
  std::vector<BS_Session *,std::allocator<BS_Session *> > m_SessionList;
};

/* 1247 */
struct __cppobj std::iterator<std::random_access_iterator_tag,BS_Session *,int,BS_Session * const *,BS_Session * const &>
{
};

/* 1248 */
struct __cppobj std::_Ranit<BS_Session *,int,BS_Session * const *,BS_Session * const &> : std::iterator<std::random_access_iterator_tag,BS_Session *,int,BS_Session * const *,BS_Session * const &>
{
};

/* 1249 */
struct __cppobj std::vector<BS_Session *,std::allocator<BS_Session *> >::const_iterator : std::_Ranit<BS_Session *,int,BS_Session * const *,BS_Session * const &>
{
  BS_Session **_Myptr;
};

/* 1250 */
struct __cppobj std::vector<BS_Session *,std::allocator<BS_Session *> >::iterator : std::vector<BS_Session *,std::allocator<BS_Session *> >::const_iterator
{
};

/* 1251 */
struct __declspec(align(4)) auto_obj<BS_PacketDispatch *,BS_Functors::fnRelease>
{
  BS_PacketDispatch *m_Object;
  BS_Functors::fnRelease m_fnRun;
};

/* 1252 */
struct __cppobj std::allocator<BS_Session *>::rebind<BS_Session *>
{
};

/* 1253 */
struct __cppobj BS_AcceptOverlappedForIOCP : BS_OverlappedPendding
{
  BS_CompletionHandler *const m_pIOCP;
  BS_Session *m_pSession;
};

/* 1254 */
struct __cppobj BS_SendOverlappedForIOCP : BS_OverlappedPendding
{
  BS_Session *m_pSession;
  BS_Packet *m_pPacket;
};

/* 1255 */
struct __cppobj std::_Allocator_base<unsigned int>
{
};

/* 1256 */
struct __cppobj std::allocator<unsigned int> : std::_Allocator_base<unsigned int>
{
};

/* 1257 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned int const ,BS_ChunkList *>,int,std::pair<unsigned int const ,BS_ChunkList *> const *,std::pair<unsigned int const ,BS_ChunkList *> const &>
{
};

/* 1258 */
struct __cppobj std::_Bidit<std::pair<unsigned int const ,BS_ChunkList *>,int,std::pair<unsigned int const ,BS_ChunkList *> const *,std::pair<unsigned int const ,BS_ChunkList *> const &> : std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned int const ,BS_ChunkList *>,int,std::pair<unsigned int const ,BS_ChunkList *> const *,std::pair<unsigned int const ,BS_ChunkList *> const &>
{
};

/* 1259 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::const_iterator : std::_Bidit<std::pair<unsigned int const ,BS_ChunkList *>,int,std::pair<unsigned int const ,BS_ChunkList *> const *,std::pair<unsigned int const ,BS_ChunkList *> const &>
{
  std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *_Ptr;
};

/* 1260 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::iterator : std::_Tree<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::const_iterator
{
};

/* 1261 */
struct __cppobj std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >::rebind<std::pair<unsigned int const ,BS_ChunkList *> >
{
};

/* 1262 */
struct __cppobj std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node>
{
};

/* 1263 */
struct __cppobj std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::_Node *>
{
};

/* 1264 */
struct __cppobj std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >::rebind<unsigned int>
{
};

/* 1265 */
struct __cppobj std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >::rebind<char>
{
};

/* 1266 */
struct __cppobj std::iterator<std::random_access_iterator_tag,BS_Packet *,int,BS_Packet * const *,BS_Packet * const &>
{
};

/* 1267 */
struct __cppobj std::_Ranit<BS_Packet *,int,BS_Packet * const *,BS_Packet * const &> : std::iterator<std::random_access_iterator_tag,BS_Packet *,int,BS_Packet * const *,BS_Packet * const &>
{
};

/* 1268 */
struct __cppobj std::deque<BS_Packet *,std::allocator<BS_Packet *> >::const_iterator : std::_Ranit<BS_Packet *,int,BS_Packet * const *,BS_Packet * const &>
{
  std::deque<BS_Packet *,std::allocator<BS_Packet *> > *_Mycont;
  unsigned int _Myoff;
};

/* 1269 */
struct __cppobj std::deque<BS_Packet *,std::allocator<BS_Packet *> >::iterator : std::deque<BS_Packet *,std::allocator<BS_Packet *> >::const_iterator
{
};

/* 1270 */
struct __declspec(align(4)) std::pair<std::_Tree<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::iterator,bool>
{
  std::_Tree<std::_Tmap_traits<unsigned int,BS_ChunkList *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,BS_ChunkList *> >,0> >::iterator first;
  bool second;
};

/* 1271 */
struct __cppobj std::allocator<BS_Packet *>::rebind<BS_Packet *>
{
};

/* 1272 */
struct __cppobj std::allocator<BS_Packet *>::rebind<BS_Packet * *>
{
};

/* 1273 */
struct __cppobj BS_SingletonHeap<BS_FileUtils,5>
{
};

/* 1274 */
struct __cppobj BS_FileUtils : BS_SingletonHeap<BS_FileUtils,5>
{
  wchar_t m_ModuleFileFullName[255];
  wchar_t m_ModuleFileDir[255];
  wchar_t m_ModuleFileName[255];
  wchar_t m_ModuleFileDrive[255];
  wchar_t m_ModulePath[255];
};

/* 1275 */
struct BS_StrUtils::BS_FmtStr<256>
{
  wchar_t *m_pBuffer;
  int m_BufferLen;
};

/* 1276 */
struct BS_StrUtils::BS_FmtStr<128>
{
  wchar_t *m_pBuffer;
  int m_BufferLen;
};

/* 1277 */
struct __cppobj BS_String : std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >
{
};

/* 1278 */
struct _WIN32_FILE_ATTRIBUTE_DATA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
};

/* 1279 */
struct __cppobj BS_StreamBufMB : std::basic_streambuf<char,std::char_traits<char> >
{
};

/* 1280 */
struct __cppobj __declspec(align(4)) BS_StreamMB : std::basic_ostream<char,std::char_traits<char> >
{
  _BYTE gap38[4];
};

/* 1281 */
struct __cppobj std::_Allocator_base<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node>
{
};

/* 1282 */
struct __cppobj std::allocator<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node> : std::_Allocator_base<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node>
{
};

/* 1283 */
struct std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >
{
  std::allocator<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node> _Alnod;
};

/* 1284 */
struct __cppobj std::_Allocator_base<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node *>
{
};

/* 1285 */
struct __cppobj std::allocator<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node *> : std::_Allocator_base<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node *>
{
};

/* 1286 */
struct __cppobj std::_List_ptr<BS_Overlapped *,std::allocator<BS_Overlapped *> > : std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >
{
  std::allocator<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node *> _Alptr;
};

/* 1287 */
struct __cppobj std::_Allocator_base<BS_Overlapped *>
{
};

/* 1288 */
struct __cppobj std::allocator<BS_Overlapped *> : std::_Allocator_base<BS_Overlapped *>
{
};

/* 1289 */
struct __cppobj std::_List_val<BS_Overlapped *,std::allocator<BS_Overlapped *> > : std::_List_ptr<BS_Overlapped *,std::allocator<BS_Overlapped *> >
{
  std::allocator<BS_Overlapped *> _Alval;
};

/* 1290 */
struct std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node
{
  std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node *_Next;
  std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node *_Prev;
  BS_Overlapped *_Myval;
};

/* 1291 */
struct __cppobj std::list<BS_Overlapped *,std::allocator<BS_Overlapped *> > : std::_List_val<BS_Overlapped *,std::allocator<BS_Overlapped *> >
{
  std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 1292 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,BS_Overlapped *,int,BS_Overlapped * const *,BS_Overlapped * const &>
{
};

/* 1293 */
struct __cppobj std::_Bidit<BS_Overlapped *,int,BS_Overlapped * const *,BS_Overlapped * const &> : std::iterator<std::bidirectional_iterator_tag,BS_Overlapped *,int,BS_Overlapped * const *,BS_Overlapped * const &>
{
};

/* 1294 */
struct __cppobj std::list<BS_Overlapped *,std::allocator<BS_Overlapped *> >::const_iterator : std::_Bidit<BS_Overlapped *,int,BS_Overlapped * const *,BS_Overlapped * const &>
{
  std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node *_Ptr;
};

/* 1295 */
struct __cppobj std::list<BS_Overlapped *,std::allocator<BS_Overlapped *> >::iterator : std::list<BS_Overlapped *,std::allocator<BS_Overlapped *> >::const_iterator
{
};

/* 1296 */
struct __cppobj std::iterator<std::random_access_iterator_tag,std::pair<unsigned long,BS_Overlapped *>,int,std::pair<unsigned long,BS_Overlapped *> const *,std::pair<unsigned long,BS_Overlapped *> const &>
{
};

/* 1297 */
struct __cppobj std::allocator<std::pair<unsigned long,BS_Overlapped *> >::rebind<std::pair<unsigned long,BS_Overlapped *> >
{
};

/* 1298 */
struct __cppobj std::_Ranit<std::pair<unsigned long,BS_Overlapped *>,int,std::pair<unsigned long,BS_Overlapped *> const *,std::pair<unsigned long,BS_Overlapped *> const &> : std::iterator<std::random_access_iterator_tag,std::pair<unsigned long,BS_Overlapped *>,int,std::pair<unsigned long,BS_Overlapped *> const *,std::pair<unsigned long,BS_Overlapped *> const &>
{
};

/* 1299 */
struct __cppobj std::vector<std::pair<unsigned long,BS_Overlapped *>,std::allocator<std::pair<unsigned long,BS_Overlapped *> > >::const_iterator : std::_Ranit<std::pair<unsigned long,BS_Overlapped *>,int,std::pair<unsigned long,BS_Overlapped *> const *,std::pair<unsigned long,BS_Overlapped *> const &>
{
  std::pair<unsigned long,BS_Overlapped *> *_Myptr;
};

/* 1300 */
struct __cppobj std::vector<std::pair<unsigned long,BS_Overlapped *>,std::allocator<std::pair<unsigned long,BS_Overlapped *> > >::iterator : std::vector<std::pair<unsigned long,BS_Overlapped *>,std::allocator<std::pair<unsigned long,BS_Overlapped *> > >::const_iterator
{
};

/* 1301 */
struct __cppobj std::allocator<BS_Overlapped *>::rebind<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node>
{
};

/* 1302 */
struct __cppobj std::allocator<BS_Overlapped *>::rebind<std::_List_nod<BS_Overlapped *,std::allocator<BS_Overlapped *> >::_Node *>
{
};

/* 1303 */
struct __cppobj std::allocator<BS_Overlapped *>::rebind<BS_Overlapped *>
{
};

/* 1304 */
struct __cppobj BS_SingletonHeap<BS_SystemInfo,5>
{
};

/* 1305 */
struct $409DFF2A380C4FFE2B587D0390AC124E
{
  unsigned __int16 wProcessorArchitecture;
  unsigned __int16 wReserved;
};

/* 1306 */
union $935078FFCA3562B16B8757844BEC33C0
{
  unsigned int dwOemId;
  $409DFF2A380C4FFE2B587D0390AC124E __s1;
};

/* 1307 */
struct _SYSTEM_INFO
{
  $935078FFCA3562B16B8757844BEC33C0 ___u0;
  unsigned int dwPageSize;
  void *lpMinimumApplicationAddress;
  void *lpMaximumApplicationAddress;
  unsigned int dwActiveProcessorMask;
  unsigned int dwNumberOfProcessors;
  unsigned int dwProcessorType;
  unsigned int dwAllocationGranularity;
  unsigned __int16 wProcessorLevel;
  unsigned __int16 wProcessorRevision;
};

/* 1308 */
struct _OSVERSIONINFOW
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  unsigned __int16 szCSDVersion[128];
};

/* 1309 */
struct __cppobj BS_SystemInfo : BS_SingletonHeap<BS_SystemInfo,5>
{
  _SYSTEM_INFO m_SystemInfo;
  _OSVERSIONINFOW m_OSVerInfo;
};

/* 1310 */
struct auto_lock<BS_SpinLock>
{
  BS_SpinLock *Lock;
};

/* 1311 */
struct __cppobj std::_Allocator_base<BS_Pool *>
{
};

/* 1312 */
struct __cppobj std::allocator<BS_Pool *> : std::_Allocator_base<BS_Pool *>
{
};

/* 1313 */
struct std::_Vector_val<BS_Pool *,std::allocator<BS_Pool *> >
{
  std::allocator<BS_Pool *> _Alval;
};

/* 1314 */
struct __cppobj std::vector<BS_Pool *,std::allocator<BS_Pool *> > : std::_Vector_val<BS_Pool *,std::allocator<BS_Pool *> >
{
  BS_Pool **_Myfirst;
  BS_Pool **_Mylast;
  BS_Pool **_Myend;
};

/* 1315 */
struct __cppobj std::iterator<std::random_access_iterator_tag,BS_Pool *,int,BS_Pool * const *,BS_Pool * const &>
{
};

/* 1316 */
struct __cppobj std::_Ranit<BS_Pool *,int,BS_Pool * const *,BS_Pool * const &> : std::iterator<std::random_access_iterator_tag,BS_Pool *,int,BS_Pool * const *,BS_Pool * const &>
{
};

/* 1317 */
struct __cppobj std::vector<BS_Pool *,std::allocator<BS_Pool *> >::const_iterator : std::_Ranit<BS_Pool *,int,BS_Pool * const *,BS_Pool * const &>
{
  BS_Pool **_Myptr;
};

/* 1318 */
struct __cppobj std::vector<BS_Pool *,std::allocator<BS_Pool *> >::iterator : std::vector<BS_Pool *,std::allocator<BS_Pool *> >::const_iterator
{
};

/* 1319 */
struct __cppobj std::allocator<BS_Pool *>::rebind<BS_Pool *>
{
};

/* 1320 */
struct std::pair<unsigned short const *,BS_Pool *>
{
  const wchar_t *first;
  BS_Pool *second;
};

/* 1321 */
struct __cppobj BS_ConsoleThread : BS_Thread
{
  BS_Console *m_pConsole;
  void *m_hInputHandle;
  volatile int m_bQuit;
};

/* 1322 */
struct __cppobj BS_Console : BS_Out
{
  BS_ConsoleThread *m_pConsoleThread;
  void *m_hConsole;
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > m_Buffer;
};

/* 1323 */
struct _COORD
{
  __int16 X;
  __int16 Y;
};

/* 1324 */
struct __cppobj BS_StreamBufMBtoWide : BS_StreamBufMB
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Buffer;
};

/* 1325 */
struct __cppobj BS_SingletonStaticMonostate<BS_Locale>
{
};

/* 1326 */
struct __cppobj BS_Locale : BS_SingletonStaticMonostate<BS_Locale>
{
};

/* 1327 */
struct SERVICE_STATUS_HANDLE__
{
  int unused;
};

/* 1328 */
struct __cppobj BS_GameConsole : BS_Console
{
};

/* 1329 */
struct BS_Service::Arg
{
  unsigned int m_Argc;
  wchar_t *m_Argv;
};

/* 1330 */
struct BS_Service
{
  BS_ServiceVtbl *vfptr;
  wchar_t m_ServiceName[256];
  SERVICE_STATUS_HANDLE__ *m_hService;
  BS_Service::Arg m_Arg;
};

/* 1331 */
struct BS_ServiceVtbl
{
  void *(__thiscall *__vecDelDtor)(BS_Service *this, unsigned int);
  _BYTE gap4[4];
  bool (__thiscall *OnRun)(BS_Service *this);
  bool (__thiscall *OnStop)(BS_Service *this);
  bool (__thiscall *OnPause)(BS_Service *this);
  bool (__thiscall *OnContinue)(BS_Service *this);
  bool (__thiscall *OnShutdown)(BS_Service *this);
  bool (__thiscall *PreRun)(BS_Service *this, unsigned int, wchar_t *);
  void (__thiscall *Handler)(BS_Service *this, unsigned int);
};

/* 1332 */
struct __cppobj std::iterator<std::random_access_iterator_tag,std::pair<BS_Session *,BS_Overlapped *>,int,std::pair<BS_Session *,BS_Overlapped *> const *,std::pair<BS_Session *,BS_Overlapped *> const &>
{
};

/* 1333 */
struct __cppobj std::_Ranit<std::pair<BS_Session *,BS_Overlapped *>,int,std::pair<BS_Session *,BS_Overlapped *> const *,std::pair<BS_Session *,BS_Overlapped *> const &> : std::iterator<std::random_access_iterator_tag,std::pair<BS_Session *,BS_Overlapped *>,int,std::pair<BS_Session *,BS_Overlapped *> const *,std::pair<BS_Session *,BS_Overlapped *> const &>
{
};

/* 1334 */
struct __cppobj std::vector<std::pair<BS_Session *,BS_Overlapped *>,std::allocator<std::pair<BS_Session *,BS_Overlapped *> > >::const_iterator : std::_Ranit<std::pair<BS_Session *,BS_Overlapped *>,int,std::pair<BS_Session *,BS_Overlapped *> const *,std::pair<BS_Session *,BS_Overlapped *> const &>
{
  std::pair<BS_Session *,BS_Overlapped *> *_Myptr;
};

/* 1335 */
struct __cppobj std::vector<std::pair<BS_Session *,BS_Overlapped *>,std::allocator<std::pair<BS_Session *,BS_Overlapped *> > >::iterator : std::vector<std::pair<BS_Session *,BS_Overlapped *>,std::allocator<std::pair<BS_Session *,BS_Overlapped *> > >::const_iterator
{
};

/* 1336 */
struct __cppobj BS_RecvOverlapped : BS_Overlapped
{
  BS_Session *m_pSession;
};

/* 1337 */
struct __cppobj BS_UDPBinder : BS_SessionContainer
{
};

/* 1338 */
struct __cppobj BS_RecvFromOverlapped : BS_Overlapped
{
  BS_Session *m_pSession;
};

/* 1339 */
struct __cppobj std::allocator<std::pair<BS_Session *,BS_Overlapped *> >::rebind<std::pair<BS_Session *,BS_Overlapped *> >
{
};

/* 1340 */
struct __cppobj BS_AcceptWorker : BS_Thread
{
  BS_OverlappedIONet *m_pOverlappedIONet;
  BS_PacketDispatch *m_pDispatcher;
  BS_Listener *m_pListener;
};

/* 1341 */
struct __cppobj BS_LuaIOGroup : BS_LuaBind
{
};

/* 1342 */
struct __cppobj BS_RecvOverlappedForIOCP : BS_OverlappedPendding
{
  BS_Session *m_pSession;
};

/* 1343 */
struct _SMALL_RECT
{
  __int16 Left;
  __int16 Top;
  __int16 Right;
  __int16 Bottom;
};

/* 1344 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)>,int,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> const *,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> const &>
{
};

/* 1345 */
struct __cppobj std::_Allocator_base<short>
{
};

/* 1346 */
struct std::pair<unsigned short const *,BS_PacketAnalyze *>
{
  const wchar_t *first;
  BS_PacketAnalyze *second;
};

/* 1347 */
struct __cppobj std::allocator<short> : std::_Allocator_base<short>
{
};

/* 1348 */
struct std::pair<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)>
{
  __int16 first;
  unsigned __int16 (__cdecl *second)(BS_PacketDispatch *, char *);
};

/* 1349 */
struct __cppobj std::_Bidit<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)>,int,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> const *,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> const &> : std::iterator<std::bidirectional_iterator_tag,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)>,int,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> const *,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> const &>
{
};

/* 1350 */
struct __cppobj std::_Tree<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::const_iterator : std::_Bidit<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)>,int,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> const *,std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> const &>
{
  std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *_Ptr;
};

/* 1351 */
struct __cppobj std::_Tree<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::iterator : std::_Tree<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::const_iterator
{
};

/* 1352 */
struct __declspec(align(4)) std::pair<std::_Tree<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::iterator,bool>
{
  std::_Tree<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::iterator first;
  bool second;
};

/* 1353 */
struct __cppobj std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >::rebind<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >
{
};

/* 1354 */
struct __cppobj std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >::rebind<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node>
{
};

/* 1355 */
struct __cppobj std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >::rebind<std::_Tree_nod<std::_Tmap_traits<short,unsigned short (__cdecl*)(BS_PacketDispatch *,char *),std::less<short>,std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >,0> >::_Node *>
{
};

/* 1356 */
struct __cppobj std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >::rebind<short>
{
};

/* 1357 */
struct __cppobj std::allocator<std::pair<short const ,unsigned short (__cdecl*)(BS_PacketDispatch *,char *)> >::rebind<char>
{
};

/* 1358 */
struct __cppobj BS_TxtFileLog : BS_Log
{
};

/* 1359 */
struct __cppobj BS_LobbyGroup : BS_LuaBind
{
};

/* 1360 */
struct __cppobj BS_CmdOverlapped : BS_Overlapped
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_CmdStr;
  std::basic_ostream<unsigned short,std::char_traits<unsigned short> > *m_pStream;
};

/* 1361 */
struct BS_Locker<BS_CriticalSection>
{
  BS_CriticalSection *m_lock;
};

/* 1362 */
struct __cppobj BS_SystemDispatch : BS_ClientDispatch
{
};

/* 1363 */
struct BS_Pulse::CTraffic
{
  unsigned int m_dwTTPOver;
  unsigned int m_dwTTPOverTwoTime;
};

/* 1364 */
struct BS_Pulse
{
  unsigned int m_dwPulseCount;
  int m_iTickPerPulse;
  int m_iCurrentTick;
  int m_iPastTick;
  int m_iInterval;
  BS_Pulse::CTraffic m_Traffic;
};

/* 1365 */
struct std::_Vector_val<unsigned short,std::allocator<unsigned short> >
{
  std::allocator<unsigned short> _Alval;
};

/* 1366 */
struct __cppobj std::vector<unsigned short,std::allocator<unsigned short> > : std::_Vector_val<unsigned short,std::allocator<unsigned short> >
{
  unsigned __int16 *_Myfirst;
  unsigned __int16 *_Mylast;
  unsigned __int16 *_Myend;
};

/* 1367 */
struct __cppobj std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator : std::_Ranit<unsigned short,int,unsigned short const *,unsigned short const &>
{
  unsigned __int16 *_Myptr;
};

/* 1368 */
struct __cppobj std::vector<unsigned short,std::allocator<unsigned short> >::iterator : std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator
{
};

/* 1369 */
struct __cppobj BS_SingletonHeap<XiAutoClient,5>
{
};

/* 1370 */
struct __cppobj std::binary_function<XiGameClientNet *,XiGameClientNet *,bool>
{
};

/* 1371 */
struct __cppobj std::less<XiGameClientNet *> : std::binary_function<XiGameClientNet *,XiGameClientNet *,bool>
{
};

/* 1372 */
struct std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0>
{
  std::less<XiGameClientNet *> comp;
};

/* 1373 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node>
{
};

/* 1374 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node>
{
};

/* 1375 */
struct __cppobj std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> > : std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0>
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node> _Alnod;
};

/* 1376 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *>
{
};

/* 1377 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *>
{
};

/* 1378 */
struct __cppobj std::_Tree_ptr<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> > : std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >
{
  std::allocator<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *> _Alptr;
};

/* 1379 */
struct __cppobj std::_Allocator_base<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >
{
};

/* 1380 */
struct __cppobj std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> > : std::_Allocator_base<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >
{
};

/* 1381 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> > : std::_Tree_ptr<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >
{
  std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> > _Alval;
};

/* 1382 */
struct __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *_Right;
  std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> _Myval;
  char _Color;
  char _Isnil;
};

/* 1383 */
struct __declspec(align(4)) XiAutoClient::XiAutoClientInfo
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > m_Name;
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > m_Channel;
  bool m_bMove;
};

/* 1384 */
struct std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *>
{
  XiGameClientNet *const first;
  XiAutoClient::XiAutoClientInfo *second;
};

/* 1385 */
struct __cppobj std::_Tree<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> > : std::_Tree_val<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >
{
  std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *_Myhead;
  unsigned int _Mysize;
};

/* 1386 */
struct __cppobj std::map<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> > > : std::_Tree<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >
{
};

/* 1387 */
struct __cppobj XiAutoClient : BS_SingletonHeap<XiAutoClient,5>
{
  BS_CriticalSection m_ClientListLock;
  std::map<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> > > m_XiClientList;
};

/* 1388 */
struct __cppobj std::iterator<std::bidirectional_iterator_tag,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *>,int,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> const *,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> const &>
{
};

/* 1389 */
struct __cppobj std::_Bidit<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *>,int,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> const *,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> const &> : std::iterator<std::bidirectional_iterator_tag,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *>,int,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> const *,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> const &>
{
};

/* 1390 */
struct __cppobj std::_Tree<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::const_iterator : std::_Bidit<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *>,int,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> const *,std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> const &>
{
  std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *_Ptr;
};

/* 1391 */
struct __cppobj std::_Tree<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::iterator : std::_Tree<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::const_iterator
{
};

/* 1392 */
struct __declspec(align(4)) std::pair<std::_Tree<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::iterator,bool>
{
  std::_Tree<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::iterator first;
  bool second;
};

/* 1393 */
struct __cppobj std::_Allocator_base<XiGameClientNet *>
{
};

/* 1394 */
struct std::pair<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *>
{
  XiGameClientNet *first;
  XiAutoClient::XiAutoClientInfo *second;
};

/* 1395 */
struct __cppobj std::allocator<XiGameClientNet *> : std::_Allocator_base<XiGameClientNet *>
{
};

/* 1396 */
struct __cppobj std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >::rebind<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >
{
};

/* 1397 */
struct __cppobj std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >::rebind<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node>
{
};

/* 1398 */
struct __cppobj std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >::rebind<std::_Tree_nod<std::_Tmap_traits<XiGameClientNet *,XiAutoClient::XiAutoClientInfo *,std::less<XiGameClientNet *>,std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >,0> >::_Node *>
{
};

/* 1399 */
struct __cppobj std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >::rebind<XiGameClientNet *>
{
};

/* 1400 */
struct __cppobj std::allocator<std::pair<XiGameClientNet * const,XiAutoClient::XiAutoClientInfo *> >::rebind<char>
{
};

/* 1401 */
struct __cppobj BS_ConsoleOut : BS_Out
{
  std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > m_Buffer;
  void *m_Handle;
};

/* 1402 */
struct __cppobj BS_GameGroup : BS_LuaBind
{
};

/* 1403 */
struct __cppobj BS_SystemGroup : BS_LuaBind
{
};

/* 1404 */
struct XiStrChannel
{
  XiStrChannelName ChannelName;
  unsigned int UserNum;
};

/* 1405 */
struct auto_release<BS_ProtocolPacket>
{
  BS_ProtocolPacket *Release;
};

/* 1406 */
struct std::pair<long,BS_ChunkList *>
{
  int first;
  BS_ChunkList *second;
};

/* 1407 */
struct std::pair<int,BS_ChunkList *>
{
  int first;
  BS_ChunkList *second;
};

/* 1408 */
struct std::pair<unsigned int,BS_ChunkList *>
{
  unsigned int first;
  BS_ChunkList *second;
};

/* 1409 */
struct __cppobj std::allocator<BS_Buffer *>::rebind<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node>
{
};

/* 1410 */
struct __cppobj std::allocator<BS_Buffer *>::rebind<std::_List_nod<BS_Buffer *,std::allocator<BS_Buffer *> >::_Node *>
{
};

/* 1411 */
struct __cppobj std::allocator<BS_Buffer *>::rebind<BS_Buffer *>
{
};

/* 1412 */
struct LockMessageBuffer<BS_PktCBattleItems>
{
  BS_PktCBattleItems *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1413 */
struct LockMessageBuffer<BS_PktCBattleJoinOBS>
{
  BS_PktCBattleJoinOBS *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1414 */
struct LockMessageBuffer<BS_PktCBattleGetSetting>
{
  BS_PktCBattleGetSetting *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1415 */
struct LockMessageBuffer<BS_PktCBattleSet>
{
  BS_PktCBattleSet *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1416 */
struct LockMessageBuffer<BS_PktCBattleRoomReady>
{
  BS_PktCBattleRoomReady *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1417 */
struct LockMessageBuffer<BS_PktCBattleRoomJoin>
{
  BS_PktCBattleRoomJoin *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1418 */
struct LockMessageBuffer<BS_PktCBattleRoomCreate>
{
  BS_PktCBattleRoomCreate *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1419 */
struct LockMessageBuffer<BS_PktCBattleInstance>
{
  BS_PktCBattleInstance *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1420 */
struct LockMessageBuffer<BS_PktCBattleInfo>
{
  BS_PktCBattleInfo *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1421 */
struct LockMessageBuffer<BS_PktBanishTeamMember>
{
  BS_PktBanishTeamMember *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1422 */
struct LockMessageBuffer<BS_PktLeaveTeamConfirm>
{
  BS_PktLeaveTeamConfirm *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1423 */
struct LockMessageBuffer<BS_PktLeaveTeamRequest>
{
  BS_PktLeaveTeamRequest *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1424 */
struct LockMessageBuffer<BS_PktJoinTeamConfirm>
{
  BS_PktJoinTeamConfirm *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1425 */
struct LockMessageBuffer<BS_PktJoinTeamApply>
{
  BS_PktJoinTeamApply *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1426 */
struct LockMessageBuffer<BS_PktJoinTeamApplyByName>
{
  BS_PktJoinTeamApplyByName *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1427 */
struct LockMessageBuffer<BS_PktGetTeamMark>
{
  BS_PktGetTeamMark *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1428 */
struct LockMessageBuffer<BS_PktSetTeamMark>
{
  BS_PktSetTeamMark *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1429 */
struct LockMessageBuffer<BS_PktTeamMembers>
{
  BS_PktTeamMembers *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1430 */
struct LockMessageBuffer<BS_PktCheckTeamName>
{
  BS_PktCheckTeamName *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1431 */
struct LockMessageBuffer<BS_PktJoinTeamByName>
{
  BS_PktJoinTeamByName *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1432 */
struct LockMessageBuffer<BS_PktLeaveTeam>
{
  BS_PktLeaveTeam *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1433 */
struct LockMessageBuffer<BS_PktJoinTeam>
{
  BS_PktJoinTeam *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1434 */
struct LockMessageBuffer<BS_PktCancelCloseTeam>
{
  BS_PktCancelCloseTeam *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1435 */
struct LockMessageBuffer<BS_PktCloseTeam>
{
  BS_PktCloseTeam *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1436 */
struct LockMessageBuffer<BS_PktCreateTeam>
{
  BS_PktCreateTeam *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1437 */
struct LockMessageBuffer<BS_PktCharTeamInfo>
{
  BS_PktCharTeamInfo *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1438 */
struct LockMessageBuffer<BS_PktMyTeamInfo>
{
  BS_PktMyTeamInfo *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1439 */
struct LockMessageBuffer<BS_PktLeaveOBS>
{
  BS_PktLeaveOBS *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1440 */
struct LockMessageBuffer<BS_PktJoinOBS>
{
  BS_PktJoinOBS *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1441 */
struct LockMessageBuffer<BS_PktSwitchToPlayer>
{
  BS_PktSwitchToPlayer *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1442 */
struct LockMessageBuffer<BS_PktSwitchToOBS>
{
  BS_PktSwitchToOBS *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1443 */
struct LockMessageBuffer<BS_PktInviteeList>
{
  BS_PktInviteeList *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1444 */
struct LockMessageBuffer<BS_PktFriendDel>
{
  BS_PktFriendDel *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1445 */
struct LockMessageBuffer<BS_PktFriendAddByName>
{
  BS_PktFriendAddByName *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1446 */
struct LockMessageBuffer<BS_PktFriendList>
{
  BS_PktFriendList *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1447 */
struct LockMessageBuffer<BS_PktClearAreaMap>
{
  BS_PktClearAreaMap *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1448 */
struct LockMessageBuffer<BS_PktSetAreaMap>
{
  BS_PktSetAreaMap *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1449 */
struct LockMessageBuffer<BS_PktUpdateInfo>
{
  BS_PktUpdateInfo *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1450 */
struct LockMessageBuffer<BS_PktBlockList>
{
  BS_PktBlockList *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1451 */
struct LockMessageBuffer<BS_PktUnknownVehicle>
{
  BS_PktUnknownVehicle *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1452 */
struct LockMessageBuffer<BS_PktJumpFreeTrafficVehicle>
{
  BS_PktJumpFreeTrafficVehicle *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1453 */
struct LockMessageBuffer<BS_PktMoveFreeTrafficVehicle>
{
  BS_PktMoveFreeTrafficVehicle *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1454 */
struct LockMessageBuffer<BS_PktSilentMove>
{
  BS_PktSilentMove *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1455 */
struct LockMessageBuffer<BS_PktObserveMode>
{
  BS_PktObserveMode *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1456 */
struct LockMessageBuffer<BS_PktPlayerInfoReq>
{
  BS_PktPlayerInfoReq *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1457 */
struct LockMessageBuffer<BS_PktUpdatePlayerInfo>
{
  BS_PktUpdatePlayerInfo *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1458 */
struct LockMessageBuffer<BS_PktObjectUpdate>
{
  BS_PktObjectUpdate *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1459 */
struct LockMessageBuffer<BS_PktMoveVehicle>
{
  BS_PktMoveVehicle *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1460 */
struct LockMessageBuffer<BS_PktMoveVehiclePlus>
{
  BS_PktMoveVehiclePlus *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1461 */
struct LockMessageBuffer<BS_PktTimeSync>
{
  BS_PktTimeSync *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1462 */
struct LockMessageBuffer<BS_PktGetDateTime>
{
  BS_PktGetDateTime *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1463 */
struct LockMessageBuffer<BS_PktMyPosition>
{
  BS_PktMyPosition *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1464 */
struct LockMessageBuffer<BS_PktAreaList>
{
  BS_PktAreaList *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1465 */
struct LockMessageBuffer<BS_PktAllAreaStatus>
{
  BS_PktAllAreaStatus *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1466 */
struct LockMessageBuffer<BS_PktAreaStatus>
{
  BS_PktAreaStatus *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1467 */
struct LockMessageBuffer<BS_PktRegisterAgent>
{
  BS_PktRegisterAgent *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1468 */
struct LockMessageBuffer<BS_PktFlushCast>
{
  BS_PktFlushCast *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1469 */
struct LockMessageBuffer<BS_PktCastTCSSignal>
{
  BS_PktCastTCSSignal *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1470 */
struct LockMessageBuffer<BS_PktCastTCS>
{
  BS_PktCastTCS *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1471 */
struct LockMessageBuffer<BS_PktCastTraffic>
{
  BS_PktCastTraffic *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1472 */
struct LockMessageBuffer<BS_PktExitGroup>
{
  BS_PktExitGroup *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1473 */
struct LockMessageBuffer<BS_PktEnterGroup>
{
  BS_PktEnterGroup *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1474 */
struct LockMessageBuffer<BS_PktExitArea>
{
  BS_PktExitArea *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1475 */
struct LockMessageBuffer<BS_PktEnterArea>
{
  BS_PktEnterArea *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1476 */
struct LockMessageBuffer<BS_PktAreaChat>
{
  BS_PktAreaChat *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1477 */
struct LockMessageBuffer<BS_PktChatMsg>
{
  BS_PktChatMsg *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1478 */
struct LockMessageBuffer<BS_PktMailSet>
{
  BS_PktMailSet *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1479 */
struct LockMessageBuffer<BS_PktGetMail>
{
  BS_PktGetMail *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1480 */
struct LockMessageBuffer<BS_PktFuelChargeReq>
{
  BS_PktFuelChargeReq *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1481 */
struct LockMessageBuffer<BS_PktUpdateCouponForVar>
{
  BS_PktUpdateCouponForVar *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1482 */
struct LockMessageBuffer<BS_PktDriveInfoUpdate>
{
  BS_PktDriveInfoUpdate *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1483 */
struct LockMessageBuffer<BS_PktClientAuth>
{
  BS_PktClientAuth *Content;
  auto_lock<BS_CriticalSection> m_sync;
};

/* 1484 */
struct __cppobj std::_Allocator_base<long>
{
};

/* 1485 */
struct __cppobj std::allocator<long> : std::_Allocator_base<long>
{
};

/* 1486 */
struct std::_Vector_val<long,std::allocator<long> >
{
  std::allocator<long> _Alval;
};

/* 1487 */
struct __cppobj std::vector<long,std::allocator<long> > : std::_Vector_val<long,std::allocator<long> >
{
  int *_Myfirst;
  int *_Mylast;
  int *_Myend;
};

/* 1488 */
struct __cppobj std::iterator<std::random_access_iterator_tag,long,int,long const *,long const &>
{
};

/* 1489 */
struct __cppobj std::_Ranit<long,int,long const *,long const &> : std::iterator<std::random_access_iterator_tag,long,int,long const *,long const &>
{
};

/* 1490 */
struct __cppobj std::vector<long,std::allocator<long> >::const_iterator : std::_Ranit<long,int,long const *,long const &>
{
  int *_Myptr;
};

/* 1491 */
struct __cppobj std::vector<long,std::allocator<long> >::iterator : std::vector<long,std::allocator<long> >::const_iterator
{
};

/* 1492 */
struct std::pair<std::vector<long,std::allocator<long> >::iterator,std::vector<long,std::allocator<long> >::iterator>
{
  std::vector<long,std::allocator<long> >::iterator first;
  std::vector<long,std::allocator<long> >::iterator second;
};

/* 1493 */
struct __cppobj std::allocator<long>::rebind<long>
{
};

/* 1494 */
struct __cppobj BS_EchoDispatch : BS_PacketDispatch
{
};

/* 1495 */
struct __cppobj std::_Init_locks
{
};

/* 1496 */
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
{
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl *vfptr;
  std::_Mutex _Mylock;
  wchar_t *_Gfirst;
  wchar_t *_Pfirst;
  wchar_t **_IGfirst;
  wchar_t **_IPfirst;
  wchar_t *_Gnext;
  wchar_t *_Pnext;
  wchar_t **_IGnext;
  wchar_t **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 1497 */
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl
{
  void *(__thiscall *__vecDelDtor)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned int);
  _BYTE gap4[4];
  unsigned __int16 (__thiscall *pbackfail)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned __int16);
  int (__thiscall *showmanyc)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__thiscall *underflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__thiscall *uflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  int (__thiscall *xsgetn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, int);
  int (__thiscall *xsputn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, const wchar_t *, int);
  std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, int, int, int);
  std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *(__thiscall *setbuf)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, int);
  int (__thiscall *sync)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  void (__thiscall *imbue)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::locale *);
};

/* 1498 */
struct __cppobj std::char_traits<wchar_t>
{
};

/* 1499 */
struct std::money_base::pattern
{
  char field[4];
};

/* 1500 */
struct __cppobj std::money_base : std::locale::facet
{
};

/* 1501 */
struct __cppobj std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
  std::_Timevec _Tnames;
  _Cvtvec _Cvt;
};

/* 1502 */
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

/* 1503 */
struct __cppobj std::_Mpunct<char> : std::money_base
{
  const char *_Grouping;
  char _Decimalpoint;
  char _Kseparator;
  const char *_Currencysign;
  const char *_Plussign;
  const char *_Minussign;
  int _Fracdigits;
  std::money_base::pattern _Plusformat;
  std::money_base::pattern _Minusformat;
  bool _International;
  _Cvtvec _Cvt;
};

/* 1504 */
struct __cppobj std::moneypunct<char,1> : std::_Mpunct<char>
{
};

/* 1505 */
struct __cppobj std::collate<char> : std::locale::facet
{
  _Collvec _Coll;
};

/* 1506 */
struct __cppobj std::moneypunct<char,0> : std::_Mpunct<char>
{
};

/* 1507 */
struct __cppobj std::money_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 1508 */
struct __cppobj std::messages_base : std::locale::facet
{
};

/* 1509 */
struct __cppobj std::messages<char> : std::messages_base
{
};

/* 1510 */
struct __cppobj std::ctype<wchar_t> : std::ctype_base
{
  _Ctypevec _Ctype;
  _Cvtvec _Cvt;
};

/* 1511 */
struct __cppobj std::money_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 1512 */
struct __cppobj std::time_base : std::locale::facet
{
};

/* 1513 */
struct __cppobj std::basic_ostream<wchar_t,std::char_traits<wchar_t> >
{
  _BYTE gap0[56];
};

/* 1514 */
struct __cppobj __declspec(align(4)) std::basic_ios<wchar_t,std::char_traits<wchar_t> > : std::ios_base
{
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *_Mystrbuf;
  std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Tiestr;
  wchar_t _Fillch;
};

/* 1515 */
struct __declspec(align(4)) std::basic_istream<wchar_t,std::char_traits<wchar_t> >
{
  _BYTE gap0[4];
  int _Chcount;
  _BYTE gap8[52];
};

/* 1516 */
struct __cppobj std::iterator<std::input_iterator_tag,wchar_t,long,wchar_t *,wchar_t &>
{
};

/* 1517 */
struct __cppobj std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > : std::iterator<std::input_iterator_tag,wchar_t,long,wchar_t *,wchar_t &>
{
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *_Strbuf;
  bool _Got;
  wchar_t _Val;
};

/* 1518 */
struct __cppobj std::num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 1519 */
struct std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  std::basic_istream<wchar_t,std::char_traits<wchar_t> > *_Myistr;
};

/* 1520 */
struct __cppobj __declspec(align(4)) std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry : std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  bool _Ok;
};

/* 1521 */
struct __cppobj std::codecvt<wchar_t,char,int> : std::codecvt_base
{
  _Cvtvec _Cvt;
};

/* 1522 */
struct __cppobj std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > : std::_Outit
{
  bool _Failed;
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *_Strbuf;
};

/* 1523 */
struct __cppobj std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 1524 */
struct std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Myostr;
};

/* 1525 */
struct __cppobj __declspec(align(4)) std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry : std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  bool _Ok;
};

/* 1526 */
struct __cppobj std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > : std::time_base
{
  const char *_Days;
  const char *_Months;
  std::time_base::dateorder _Dateorder;
  _Cvtvec _Cvt;
};

/* 1527 */
struct __cppobj std::_Mpunct<wchar_t> : std::money_base
{
  const char *_Grouping;
  wchar_t _Decimalpoint;
  wchar_t _Kseparator;
  const wchar_t *_Currencysign;
  const wchar_t *_Plussign;
  const wchar_t *_Minussign;
  int _Fracdigits;
  std::money_base::pattern _Plusformat;
  std::money_base::pattern _Minusformat;
  bool _International;
  _Cvtvec _Cvt;
};

/* 1528 */
struct __cppobj std::moneypunct<wchar_t,1> : std::_Mpunct<wchar_t>
{
};

/* 1529 */
struct __cppobj std::_Mpunct<unsigned short> : std::money_base
{
  const char *_Grouping;
  unsigned __int16 _Decimalpoint;
  unsigned __int16 _Kseparator;
  const unsigned __int16 *_Currencysign;
  const unsigned __int16 *_Plussign;
  const unsigned __int16 *_Minussign;
  int _Fracdigits;
  std::money_base::pattern _Plusformat;
  std::money_base::pattern _Minusformat;
  bool _International;
  _Cvtvec _Cvt;
};

/* 1530 */
struct __cppobj std::moneypunct<unsigned short,0> : std::_Mpunct<unsigned short>
{
};

/* 1531 */
struct __cppobj std::moneypunct<unsigned short,1> : std::_Mpunct<unsigned short>
{
};

/* 1532 */
struct __cppobj std::money_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 1533 */
struct __cppobj std::money_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 1534 */
struct __cppobj std::_Allocator_base<wchar_t>
{
};

/* 1535 */
struct __cppobj std::allocator<wchar_t> : std::_Allocator_base<wchar_t>
{
};

/* 1536 */
struct __cppobj std::_String_val<wchar_t,std::allocator<wchar_t> > : std::_String_base
{
  std::allocator<wchar_t> _Alval;
};

/* 1537 */
union std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Bxty
{
  wchar_t _Buf[8];
  wchar_t *_Ptr;
};

/* 1538 */
struct __cppobj std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : std::_String_val<wchar_t,std::allocator<wchar_t> >
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Bxty _Bx;
  unsigned int _Mysize;
  unsigned int _Myres;
};

/* 1539 */
struct __cppobj std::iterator<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &>
{
};

/* 1540 */
struct __cppobj std::_Ranit<wchar_t,int,wchar_t const *,wchar_t const &> : std::iterator<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &>
{
};

/* 1541 */
struct __cppobj std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::const_iterator : std::_Ranit<wchar_t,int,wchar_t const *,wchar_t const &>
{
  const wchar_t *_Myptr;
};

/* 1542 */
struct __cppobj std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::iterator : std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::const_iterator
{
};

/* 1543 */
struct __cppobj std::time_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::time_base
{
  const unsigned __int16 *_Days;
  const unsigned __int16 *_Months;
  std::time_base::dateorder _Dateorder;
  _Cvtvec _Cvt;
};

/* 1544 */
struct __cppobj std::moneypunct<wchar_t,0> : std::_Mpunct<wchar_t>
{
};

/* 1545 */
struct __cppobj std::money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 1546 */
struct __cppobj std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
  std::_Timevec _Tnames;
  _Cvtvec _Cvt;
};

/* 1547 */
struct __cppobj std::numpunct<wchar_t> : std::locale::facet
{
  const char *_Grouping;
  wchar_t _Dp;
  wchar_t _Kseparator;
  const wchar_t *_Falsename;
  const wchar_t *_Truename;
};

/* 1548 */
struct __cppobj std::allocator<wchar_t>::rebind<wchar_t>
{
};

/* 1549 */
struct __cppobj std::money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::locale::facet
{
  _Cvtvec _Cvt;
};

/* 1550 */
struct __cppobj std::collate<wchar_t> : std::locale::facet
{
  _Collvec _Coll;
};

/* 1551 */
struct __cppobj std::messages<wchar_t> : std::messages_base
{
};

/* 1552 */
struct __cppobj std::messages<unsigned short> : std::messages_base
{
};

/* 1553 */
struct __cppobj std::time_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > : std::locale::facet
{
  std::_Timevec _Tnames;
  _Cvtvec _Cvt;
};

/* 1554 */
struct __cppobj std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : std::time_base
{
  const wchar_t *_Days;
  const wchar_t *_Months;
  std::time_base::dateorder _Dateorder;
  _Cvtvec _Cvt;
};

/* 1555 */
struct __cppobj std::collate<unsigned short> : std::locale::facet
{
  _Collvec _Coll;
};

/* 1556 */
struct __cppobj std::_UShinit
{
};

/* 1557 */
struct __cppobj std::basic_filebuf<unsigned short,std::char_traits<unsigned short> > : std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >
{
  std::codecvt<unsigned short,char,int> *_Pcvt;
  int _State0;
  unsigned __int16 _Mychar;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_Mystr;
  bool _Wrotesome;
  int _State;
  bool _Closef;
  _iobuf *_Myfile;
};

/* 1558 */
struct __cppobj std::_Init_ushcin
{
};

/* 1559 */
struct __cppobj std::_Init_ushcout
{
};

/* 1560 */
struct std::_Fac_node
{
  std::_Fac_node *_Next;
  std::locale::facet *_Facptr;
};

/* 1561 */
struct __cppobj std::numpunct<char> : std::locale::facet
{
  const char *_Grouping;
  char _Dp;
  char _Kseparator;
  const char *_Falsename;
  const char *_Truename;
};

/* 1562 */
struct __cppobj std::codecvt<char,char,int> : std::codecvt_base
{
};

/* 1563 */
struct __cppobj _Init_atexit
{
};

/* 1564 */
struct __cppobj std::basic_filebuf<char,std::char_traits<char> > : std::basic_streambuf<char,std::char_traits<char> >
{
  std::codecvt<char,char,int> *_Pcvt;
  int _State0;
  char _Mychar;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > *_Mystr;
  bool _Wrotesome;
  int _State;
  bool _Closef;
  _iobuf *_Myfile;
};

/* 1565 */
struct __cppobj std::_Init_cout
{
};

/* 1566 */
union _dbl
{
  int lng[2];
  long double dbl;
};

/* 1567 */
struct _exception
{
  int type;
  char *name;
  long double arg1;
  long double arg2;
  long double retval;
};

/* 1568 */
struct _U32ARRAY
{
  unsigned int W[4];
};

/* 1569 */
struct _U64
{
  unsigned int W[2];
};

/* 1570 */
struct _FP128
{
  unsigned int W[4];
};

/* 1571 */
struct _FPIEEE_EXCEPTION_FLAGS
{
  unsigned __int32 Inexact : 1;
  unsigned __int32 Underflow : 1;
  unsigned __int32 Overflow : 1;
  unsigned __int32 ZeroDivide : 1;
  unsigned __int32 InvalidOperation : 1;
};

/* 1572 */
struct _FP80
{
  unsigned __int16 W[5];
};

/* 1573 */
struct _I64
{
  unsigned int W[2];
};

/* 1574 */
struct _BCD80
{
  unsigned __int16 W[5];
};

/* 1575 */
struct _FPQ64
{
  __int64 W[2];
};

/* 1576 */
union $64308239DCE8B82F61807010ED7CA5FF
{
  float Fp32Value;
  long double Fp64Value;
  _FP80 Fp80Value;
  _FP128 Fp128Value;
  __int16 I16Value;
  int I32Value;
  _I64 I64Value;
  unsigned __int16 U16Value;
  unsigned int U32Value;
  _U64 U64Value;
  _BCD80 Bcd80Value;
  char *StringValue;
  int CompareValue;
  _U32ARRAY U32ArrayValue;
  __int64 Q64Value;
  _FPQ64 Fpq64Value;
};

/* 1577 */
struct __declspec(align(16)) _FPIEEE_VALUE
{
  $64308239DCE8B82F61807010ED7CA5FF Value;
  unsigned __int32 OperandValid : 1;
  unsigned __int32 Format : 4;
};

/* 1578 */
struct _FPIEEE_RECORD
{
  unsigned __int32 RoundingMode : 2;
  unsigned __int32 Precision : 3;
  unsigned __int32 Operation : 12;
  _FPIEEE_EXCEPTION_FLAGS Cause;
  _FPIEEE_EXCEPTION_FLAGS Enable;
  _FPIEEE_EXCEPTION_FLAGS Status;
  _FPIEEE_VALUE Operand1;
  _FPIEEE_VALUE Operand2;
  _FPIEEE_VALUE Result;
};

/* 1579 */
struct HINSTANCE__
{
  int unused;
};

/* 1580 */
struct _EXCEPTION_RECORD
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int ExceptionInformation[15];
};

/* 1581 */
struct _FLOATING_SAVE_AREA
{
  unsigned int ControlWord;
  unsigned int StatusWord;
  unsigned int TagWord;
  unsigned int ErrorOffset;
  unsigned int ErrorSelector;
  unsigned int DataOffset;
  unsigned int DataSelector;
  char RegisterArea[80];
  unsigned int Cr0NpxState;
};

/* 1582 */
struct _CONTEXT
{
  unsigned int ContextFlags;
  unsigned int Dr0;
  unsigned int Dr1;
  unsigned int Dr2;
  unsigned int Dr3;
  unsigned int Dr6;
  unsigned int Dr7;
  _FLOATING_SAVE_AREA FloatSave;
  unsigned int SegGs;
  unsigned int SegFs;
  unsigned int SegEs;
  unsigned int SegDs;
  unsigned int Edi;
  unsigned int Esi;
  unsigned int Ebx;
  unsigned int Edx;
  unsigned int Ecx;
  unsigned int Eax;
  unsigned int Ebp;
  unsigned int Eip;
  unsigned int SegCs;
  unsigned int EFlags;
  unsigned int Esp;
  unsigned int SegSs;
  char ExtendedRegisters[512];
};

/* 1583 */
struct _EXCEPTION_POINTERS
{
  _EXCEPTION_RECORD *ExceptionRecord;
  _CONTEXT *ContextRecord;
};

/* 1584 */
struct _FloatOutStruct
{
  __int16 exp;
  char sign;
  char ManLen;
  char man[22];
};

/* 1585 */
struct _LDOUBLE
{
  char ld[10];
};

/* 1586 */
struct _LDBL12
{
  char ld12[12];
};

/* 1587 */
struct FpFormatDescriptor
{
  int max_exp;
  int min_exp;
  int precision;
  int exp_width;
  int format_width;
  int bias;
};

/* 1588 */
struct DOUBLE
{
  long double x;
};

/* 1589 */
struct FLOAT
{
  float f;
};

/* 1590 */
struct _strflt
{
  int sign;
  int decpt;
  int flag;
  char *mantissa;
};

/* 1591 */
struct _flt
{
  int flags;
  int nbytes;
  int lval;
  long double dval;
};

/* 1592 */
struct _SYSTEMTIME
{
  unsigned __int16 wYear;
  unsigned __int16 wMonth;
  unsigned __int16 wDayOfWeek;
  unsigned __int16 wDay;
  unsigned __int16 wHour;
  unsigned __int16 wMinute;
  unsigned __int16 wSecond;
  unsigned __int16 wMilliseconds;
};

/* 1593 */
struct _TIME_ZONE_INFORMATION
{
  int Bias;
  unsigned __int16 StandardName[32];
  _SYSTEMTIME StandardDate;
  int StandardBias;
  unsigned __int16 DaylightName[32];
  _SYSTEMTIME DaylightDate;
  int DaylightBias;
};

/* 1594 */
struct transitiondate
{
  int yr;
  int yd;
  int ms;
};

/* 1595 */
union FT
{
  unsigned __int64 ft_scalar;
  _FILETIME ft_struct;
};

/* 1596 */
struct __lc_time_data
{
  char *wday_abbr[7];
  char *wday[7];
  char *month_abbr[12];
  char *month[12];
  char *ampm[2];
  char *ww_sdatefmt;
  char *ww_ldatefmt;
  char *ww_timefmt;
  unsigned int ww_lcid;
  int ww_caltype;
  int refcount;
};

/* 1597 */
struct threadlocaleinfostruct
{
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned int lc_handle[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  lconv *lconv;
  lconv *lconv_intl;
  int *ctype1_refcount;
  unsigned __int16 *ctype1;
  const unsigned __int16 *pctype;
  __lc_time_data *lc_time_curr;
  __lc_time_data *lc_time_intl;
};

/* 1598 */
union $B4FF2100EA110D8CD0B9C89F852FB035
{
  char sz[512];
  wchar_t wz[512];
};

/* 1599 */
union $519E2A0ABDBAFFC353FD5D86715BA24D
{
  char *sz;
  unsigned __int16 *wz;
};

/* 1600 */
struct _count_string
{
  __int16 Length;
  __int16 MaximumLength;
  char *Buffer;
};

/* 1601 */
struct ioinfo
{
  int osfhnd;
  char osfile;
  char pipech;
  int lockinitflag;
  _RTL_CRITICAL_SECTION lock;
};

/* 1602 */
union $C8014B43F160BFD769FAE3F15553333C
{
  char sz[512];
};

/* 1603 */
struct _IMAGE_FILE_HEADER
{
  unsigned __int16 Machine;
  unsigned __int16 NumberOfSections;
  unsigned int TimeDateStamp;
  unsigned int PointerToSymbolTable;
  unsigned int NumberOfSymbols;
  unsigned __int16 SizeOfOptionalHeader;
  unsigned __int16 Characteristics;
};

/* 1604 */
struct _IMAGE_DATA_DIRECTORY
{
  unsigned int VirtualAddress;
  unsigned int Size;
};

/* 1605 */
struct _IMAGE_OPTIONAL_HEADER
{
  unsigned __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned int BaseOfData;
  unsigned int ImageBase;
  unsigned int SectionAlignment;
  unsigned int FileAlignment;
  unsigned __int16 MajorOperatingSystemVersion;
  unsigned __int16 MinorOperatingSystemVersion;
  unsigned __int16 MajorImageVersion;
  unsigned __int16 MinorImageVersion;
  unsigned __int16 MajorSubsystemVersion;
  unsigned __int16 MinorSubsystemVersion;
  unsigned int Win32VersionValue;
  unsigned int SizeOfImage;
  unsigned int SizeOfHeaders;
  unsigned int CheckSum;
  unsigned __int16 Subsystem;
  unsigned __int16 DllCharacteristics;
  unsigned int SizeOfStackReserve;
  unsigned int SizeOfStackCommit;
  unsigned int SizeOfHeapReserve;
  unsigned int SizeOfHeapCommit;
  unsigned int LoaderFlags;
  unsigned int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 1606 */
struct _IMAGE_NT_HEADERS
{
  unsigned int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER OptionalHeader;
};

/* 1607 */
struct _IMAGE_OPTIONAL_HEADER64
{
  unsigned __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned __int64 ImageBase;
  unsigned int SectionAlignment;
  unsigned int FileAlignment;
  unsigned __int16 MajorOperatingSystemVersion;
  unsigned __int16 MinorOperatingSystemVersion;
  unsigned __int16 MajorImageVersion;
  unsigned __int16 MinorImageVersion;
  unsigned __int16 MajorSubsystemVersion;
  unsigned __int16 MinorSubsystemVersion;
  unsigned int Win32VersionValue;
  unsigned int SizeOfImage;
  unsigned int SizeOfHeaders;
  unsigned int CheckSum;
  unsigned __int16 Subsystem;
  unsigned __int16 DllCharacteristics;
  unsigned __int64 SizeOfStackReserve;
  unsigned __int64 SizeOfStackCommit;
  unsigned __int64 SizeOfHeapReserve;
  unsigned __int64 SizeOfHeapCommit;
  unsigned int LoaderFlags;
  unsigned int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 1608 */
struct _OSVERSIONINFOA
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  char szCSDVersion[128];
};

/* 1609 */
struct _IMAGE_DOS_HEADER
{
  unsigned __int16 e_magic;
  unsigned __int16 e_cblp;
  unsigned __int16 e_cp;
  unsigned __int16 e_crlc;
  unsigned __int16 e_cparhdr;
  unsigned __int16 e_minalloc;
  unsigned __int16 e_maxalloc;
  unsigned __int16 e_ss;
  unsigned __int16 e_sp;
  unsigned __int16 e_csum;
  unsigned __int16 e_ip;
  unsigned __int16 e_cs;
  unsigned __int16 e_lfarlc;
  unsigned __int16 e_ovno;
  unsigned __int16 e_res[4];
  unsigned __int16 e_oemid;
  unsigned __int16 e_oeminfo;
  unsigned __int16 e_res2[10];
  int e_lfanew;
};

/* 1610 */
struct _XCPT_ACTION
{
  unsigned int XcptNum;
  int SigNum;
  void (__cdecl *XcptAction)(int);
};

/* 1611 */
struct __declspec(align(4)) threadmbcinfostruct
{
  int refcount;
  int mbcodepage;
  int ismbcodepage;
  int mblcid;
  unsigned __int16 mbulinfo[6];
  char mbctype[257];
  char mbcasemap[256];
};

/* 1612 */
struct _tiddata
{
  unsigned int _tid;
  unsigned int _thandle;
  int _terrno;
  unsigned int _tdoserrno;
  unsigned int _fpds;
  unsigned int _holdrand;
  char *_token;
  unsigned __int16 *_wtoken;
  char *_mtoken;
  char *_errmsg;
  unsigned __int16 *_werrmsg;
  char *_namebuf0;
  unsigned __int16 *_wnamebuf0;
  char *_namebuf1;
  unsigned __int16 *_wnamebuf1;
  char *_asctimebuf;
  unsigned __int16 *_wasctimebuf;
  void *_gmtimebuf;
  char *_cvtbuf;
  void *_initaddr;
  void *_initarg;
  void *_pxcptacttab;
  void *_tpxcptinfoptrs;
  int _tfpecode;
  threadmbcinfostruct *ptmbcinfo;
  threadlocaleinfostruct *ptlocinfo;
  unsigned int _NLG_dwCode;
  void *_terminate;
  void *_unexpected;
  void *_translator;
  void *_purecall;
  void *_curexception;
  void *_curcontext;
  int _ProcessingThrow;
  void *_pFrameInfoChain;
};

/* 1613 */
struct $C82590C5C6A4E7179C684714E3711CEA
{
  _RTL_CRITICAL_SECTION *lock;
  $1DD7A03358E0D01DD359262876E6A0F0 kind;
};

/* 1614 */
struct rterrmsgs
{
  int rterrno;
  char *rterrtxt;
};

/* 1615 */
struct __declspec(align(4)) _cpinfo
{
  unsigned int MaxCharSize;
  char DefaultChar[2];
  char LeadByte[12];
};

/* 1616 */
struct tagLC_ID
{
  unsigned __int16 wLanguage;
  unsigned __int16 wCountry;
  unsigned __int16 wCodePage;
};

/* 1617 */
struct tagLC_STRINGS
{
  char szLanguage[64];
  char szCountry[64];
  char szCodePage[16];
};

/* 1618 */
struct _is_ctype_compatible
{
  unsigned int id;
  int is_clike;
};

/* 1619 */
struct $CCE4C80AD10999675C882A48A2A518E7
{
  const char *catname;
  char *locale;
  int (__cdecl *init)();
};

/* 1620 */
struct tagRGLOCINFO
{
  unsigned int lcid;
  char chILanguage[8];
  char *pchSEngLanguage;
  char chSAbbrevLangName[4];
  char *pchSEngCountry;
  char chSAbbrevCtryName[4];
  char chIDefaultCodepage[8];
  char chIDefaultAnsiCodepage[8];
};

/* 1621 */
struct tagLOCALETAB
{
  char *szName;
  char chAbbrev[4];
};

/* 1622 */
struct tagUSEROBJECTFLAGS
{
  int fInherit;
  int fReserved;
  unsigned int dwFlags;
};

/* 1623 */
struct HWINSTA__
{
  int unused;
};

/* 1624 */
struct IMAGE_LOAD_CONFIG_DIRECTORY32_2
{
  unsigned int Size;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned int DeCommitFreeBlockThreshold;
  unsigned int DeCommitTotalFreeThreshold;
  unsigned int LockPrefixTable;
  unsigned int MaximumAllocationSize;
  unsigned int VirtualMemoryThreshold;
  unsigned int ProcessHeapFlags;
  unsigned int ProcessAffinityMask;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned int EditList;
  unsigned int *SecurityCookie;
  void **SEHandlerTable;
  unsigned int SEHandlerCount;
};

/* 1625 */
struct __declspec(align(32)) _JMP_BUF
{
  unsigned int saved_ebp;
  unsigned int saved_ebx;
  unsigned int saved_edi;
  unsigned int saved_esi;
  unsigned int saved_esp;
  unsigned int saved_return;
  unsigned int saved_xregistration;
  unsigned int saved_trylevel;
  unsigned int version_cookie;
  unsigned int unwind_func;
  unsigned int unwind_data;
};

/* 1626 */
struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 1627 */
struct _EXCEPTION_REGISTRATION
{
  unsigned int prev;
  unsigned int handler;
};

/* 1628 */
struct _NLG_INFO
{
  unsigned int dwSig;
  unsigned int uoffDestination;
  unsigned int dwCode;
  unsigned int uoffFramePointer;
};

/* 1629 */
struct _C9_EXCEPTION_REGISTRATION
{
  unsigned int er_prev;
  unsigned int er_handler;
  unsigned int scopetable;
  unsigned int trylevel;
};

/* 1630 */
struct _EXCEPTION_REGISTRATION_COMMON
{
  _BYTE gap0[8];
  unsigned int scopetable;
  unsigned int trylevel;
};

/* 1631 */
struct _MEMORY_BASIC_INFORMATION
{
  void *BaseAddress;
  void *AllocationBase;
  unsigned int AllocationProtect;
  unsigned int RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
};

/* 1632 */
union $22971E98F1DCAE471B592EC18ECB1551
{
  unsigned int PhysicalAddress;
  unsigned int VirtualSize;
};

/* 1633 */
struct _IMAGE_SECTION_HEADER
{
  char Name[8];
  $22971E98F1DCAE471B592EC18ECB1551 Misc;
  unsigned int VirtualAddress;
  unsigned int SizeOfRawData;
  unsigned int PointerToRawData;
  unsigned int PointerToRelocations;
  unsigned int PointerToLinenumbers;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int Characteristics;
};

/* 1635 */
union $7A727655067EA29DD1B3C3F7D79CBFD1
{
  void *FiberData;
  unsigned int Version;
};

/* 1634 */
struct _NT_TIB
{
  struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
  void *StackBase;
  void *StackLimit;
  void *SubSystemTib;
  $7A727655067EA29DD1B3C3F7D79CBFD1 ___u4;
  void *ArbitraryUserPointer;
  _NT_TIB *Self;
};

/* 1710 */
typedef void *PVOID;

/* 1718 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 1756 */
typedef unsigned int DWORD;

/* 1636 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 1637 */
struct code_page_info
{
  int code_page;
  unsigned __int16 mbulinfo[6];
  char rgrange[4][8];
};

/* 1638 */
struct _SECURITY_ATTRIBUTES
{
  unsigned int nLength;
  void *lpSecurityDescriptor;
  int bInheritHandle;
};

/* 1639 */
struct $9EDDA679613D7E4E5E37CB563F432A3F
{
  unsigned int lowerhalf;
  int upperhalf;
};

/* 1640 */
union doubleint
{
  __int64 bigint;
  $9EDDA679613D7E4E5E37CB563F432A3F twoints;
};

/* 1641 */
struct _STARTUPINFOA
{
  unsigned int cb;
  char *lpReserved;
  char *lpDesktop;
  char *lpTitle;
  unsigned int dwX;
  unsigned int dwY;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwXCountChars;
  unsigned int dwYCountChars;
  unsigned int dwFillAttribute;
  unsigned int dwFlags;
  unsigned __int16 wShowWindow;
  unsigned __int16 cbReserved2;
  char *lpReserved2;
  void *hStdInput;
  void *hStdOutput;
  void *hStdError;
};

/* 1642 */
struct tagEntry
{
  int sizeFront;
  tagEntry *pEntryNext;
  tagEntry *pEntryPrev;
};

/* 1643 */
struct tagListHead
{
  tagEntry *pEntryNext;
  tagEntry *pEntryPrev;
};

/* 1644 */
struct tagGroup
{
  int cntEntries;
  tagListHead listHead[64];
};

/* 1645 */
struct tagRegion
{
  int indGroupUse;
  char cntRegionSize[64];
  unsigned int bitvGroupHi[32];
  unsigned int bitvGroupLo[32];
  tagGroup grpHeadList[32];
};

/* 1646 */
struct tagHeader
{
  unsigned int bitvEntryHi;
  unsigned int bitvEntryLo;
  unsigned int bitvCommit;
  void *pHeapData;
  tagRegion *pRegion;
};

/* 1647 */
struct tagEntryEnd
{
  int sizeBack;
};

/* 1648 */
struct TypeDescriptor
{
  unsigned int hash;
  void *spare;
  char name[];
};

/* 1649 */
struct PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 1650 */
struct _s_CatchableType
{
  unsigned int properties;
  TypeDescriptor *pType;
  PMD thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)();
};

/* 1651 */
struct _s_CatchableTypeArray
{
  int nCatchableTypes;
  _s_CatchableType *arrayOfCatchableTypes[];
};

/* 1652 */
struct _s_HandlerType
{
  unsigned int adjectives;
  TypeDescriptor *pType;
  int dispCatchObj;
  void *addressOfHandler;
};

/* 1653 */
struct _s_ESTypeList
{
  int nCount;
  _s_HandlerType *pTypeArray;
};

/* 1654 */
struct _s_ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)();
  int (*pForwardCompat)(...);
  _s_CatchableTypeArray *pCatchableTypeArray;
};

/* 1655 */
struct _s_UnwindMapEntry
{
  int toState;
  void (__cdecl *action)();
};

/* 1656 */
struct _s_TryBlockMapEntry
{
  int tryLow;
  int tryHigh;
  int catchHigh;
  int nCatches;
  _s_HandlerType *pHandlerArray;
};

/* 1657 */
struct _s_FuncInfo
{
  unsigned __int32 magicNumber : 29;
  unsigned __int32 bbtFlags : 3;
  int maxState;
  _s_UnwindMapEntry *pUnwindMap;
  unsigned int nTryBlocks;
  _s_TryBlockMapEntry *pTryBlockMap;
  unsigned int nIPMapEntries;
  void *pIPtoStateMap;
  _s_ESTypeList *pESTypeList;
};

/* 1658 */
struct EHExceptionRecord::EHParameters
{
  unsigned int magicNumber;
  void *pExceptionObject;
  _s_ThrowInfo *pThrowInfo;
};

/* 1659 */
struct EHExceptionRecord
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  EHExceptionRecord::EHParameters params;
};

/* 1660 */
struct EHRegistrationNode
{
  EHRegistrationNode *pNext;
  void *frameHandler;
  int state;
};

/* 1661 */
struct CatchGuardRN
{
  EHRegistrationNode *pNext;
  void *pFrameHandler;
  unsigned int RandomCookie;
  _s_FuncInfo *pFuncInfo;
  EHRegistrationNode *pRN;
  int CatchDepth;
};

/* 1662 */
struct TranslatorGuardRN
{
  EHRegistrationNode *pNext;
  void *pFrameHandler;
  unsigned int RandomCookie;
  _s_FuncInfo *pFuncInfo;
  EHRegistrationNode *pRN;
  int CatchDepth;
  EHRegistrationNode *pMarkerRN;
  void *ESP;
  void *EBP;
  int DidUnwind;
};

/* 1663 */
struct FrameInfo
{
  void *pExceptionObject;
  FrameInfo *pNext;
};

/* 1664 */
struct __JUMP_BUFFER
{
  unsigned int Ebp;
  unsigned int Ebx;
  unsigned int Edi;
  unsigned int Esi;
  unsigned int Esp;
  unsigned int Eip;
  unsigned int Registration;
  unsigned int TryLevel;
  unsigned int Cookie;
  unsigned int UnwindFunc;
  unsigned int UnwindData[6];
};

/* 1665 */
struct DNameNode
{
  DNameNodeVtbl *vfptr;
  DNameNode *next;
};

/* 1666 */
struct DNameNodeVtbl
{
  int (__thiscall *length)(DNameNode *this);
  char (__thiscall *getLastChar)(DNameNode *this);
  char *(__thiscall *getString)(DNameNode *this, char *, int);
};

/* 1667 */
struct DName
{
  DNameNode *node;
  __int32 stat : 4;
  unsigned __int32 isIndir : 1;
  unsigned __int32 isAUDC : 1;
  unsigned __int32 isAUDTThunk : 1;
  unsigned __int32 isArrayType : 1;
  unsigned __int32 NoTE : 1;
};

/* 1668 */
struct Replicator
{
  int index;
  DName *dNameBuffer[10];
  DName ErrorDName;
  DName InvalidDName;
};

/* 1669 */
struct HeapManager::Block
{
  HeapManager::Block *next;
  char memBlock[4096];
};

/* 1670 */
struct HeapManager
{
  void *(__cdecl *pOpNew)(unsigned int);
  void (__cdecl *pOpDelete)(void *);
  HeapManager::Block *head;
  HeapManager::Block *tail;
  unsigned int blockLeft;
};

/* 1671 */
struct __cppobj __declspec(align(4)) charNode : DNameNode
{
  char me;
};

/* 1672 */
struct __cppobj pcharNode : DNameNode
{
  char *me;
  int myLen;
};

/* 1673 */
struct UnDecorator
{
  Replicator ArgList;
  Replicator ZNameList;
};

/* 1674 */
struct __cppobj pDNameNode : DNameNode
{
  DName *me;
};

/* 1675 */
struct __cppobj DNameStatusNode : DNameNode
{
  DNameStatus me;
  int myLen;
};

/* 1676 */
struct __cppobj bad_typeid : exception
{
};

/* 1677 */
struct __cppobj __non_rtti_object : bad_typeid
{
};

/* 1678 */
struct _TypeDescriptor
{
  const void *pVFTable;
  void *spare;
  char name[];
};

/* 1679 */
struct _PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 1680 */
struct _s__CatchableType
{
  unsigned int properties;
  _TypeDescriptor *pType;
  _PMD thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)();
};

/* 1681 */
struct _s__CatchableTypeArray
{
  int nCatchableTypes;
  _s__CatchableType *arrayOfCatchableTypes[];
};

/* 1682 */
struct _s__ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)();
  int (*pForwardCompat)(...);
  _s__CatchableTypeArray *pCatchableTypeArray;
};

/* 1683 */
struct errentry
{
  unsigned int oscode;
  int errnocode;
};

/* 1685 */
typedef char *LPBYTE;

/* 1686 */
typedef char *pchar_t;

/* 1687 */
typedef unsigned __int16 PROPVAR_PAD2;

/* 1688 */
typedef HWINSTA__ *HWINSTA;

/* 1689 */
typedef int (__stdcall *FARPROC)();

/* 1690 */
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(unsigned int, unsigned __int16 **);

/* 1691 */
typedef tagHeader *PHEADER;

/* 1692 */
typedef bool _Bool;

/* 1693 */
typedef tagVARIANT *LPVARIANT;

/* 1694 */
typedef unsigned int UINT;

/* 1695 */
typedef tagLC_STRINGS *LPLC_STRINGS;

/* 1696 */
typedef unsigned int _U32;

/* 1697 */
typedef unsigned __int16 PROPVAR_PAD3;

/* 1698 */
typedef tagSAFEARRAY *LPSAFEARRAY;

/* 1699 */
typedef void *(__cdecl *Alloc_t)(unsigned int);

/* 1700 */
typedef void (__cdecl *_inconsistency_function)();

/* 1702 */
typedef unsigned int LCTYPE;

/* 1703 */
typedef unsigned int uintptr_t;

/* 1704 */
typedef char *va_list;

/* 1705 */
typedef _EXCEPTION_POINTERS *LPEXCEPTION_POINTERS;

/* 1706 */
typedef char _TCHAR;

/* 1707 */
typedef void DispatcherContext;

/* 1708 */
typedef char BYTE;

/* 1709 */
typedef _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;

/* 1711 */
typedef unsigned __int16 OLECHAR;

/* 1712 */
typedef unsigned int BITVEC;

/* 1713 */
typedef unsigned __int16 PROPVAR_PAD1;

/* 1714 */
typedef tagEntryEnd *PENTRYEND;

/* 1715 */
typedef int DISPID;

/* 1716 */
typedef _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;

/* 1717 */
typedef __int64 _Q64;

/* 1719 */
typedef __int64 LONGLONG;

/* 1720 */
typedef unsigned __int64 ULONGLONG;

/* 1721 */
typedef void (__cdecl *_purecall_handler)();

/* 1722 */
typedef int streamsize;

/* 1723 */
typedef unsigned __int16 wint_t;

/* 1724 */
typedef threadmbcinfostruct *pthreadmbcinfo;

/* 1725 */
typedef unsigned __int16 WORD;

/* 1726 */
typedef unsigned __int16 USHORT;

/* 1727 */
typedef unsigned __int16 _U16;

/* 1728 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 1729 */
typedef tagEntry *PENTRY;

/* 1730 */
typedef int MEMBERID;

/* 1731 */
typedef void *LPVOID;

/* 1732 */
typedef unsigned __int16 *LPWORD;

/* 1733 */
typedef int (__stdcall *PFN_INIT_CRITSEC_AND_SPIN_COUNT)(_RTL_CRITICAL_SECTION *, unsigned int);

/* 1734 */
typedef int LONG;

/* 1735 */
typedef _EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 1736 */
typedef int (__cdecl *_PNH)(unsigned int);

/* 1737 */
typedef int time_t;

/* 1738 */
typedef threadlocaleinfostruct *pthreadlocinfo;

/* 1739 */
typedef tagGroup *PGROUP;

/* 1740 */
typedef char CHAR;

/* 1741 */
typedef _RTL_CRITICAL_SECTION *PCRITICAL_SECTION;

/* 1742 */
typedef char *(__cdecl *GetParameter_t)(int);

/* 1743 */
typedef _NT_TIB *PNT_TIB;

/* 1744 */
typedef int (__stdcall *PFLS_SETVALUE_FUNCTION)(unsigned int, void *);

/* 1745 */
typedef tagRegion *PREGION;

/* 1746 */
typedef sockaddr_in *LPSOCKADDR_IN;

/* 1747 */
typedef unsigned int size_t;

/* 1748 */
typedef __int16 VARIANT_BOOL;

/* 1749 */
typedef tagLC_ID *LPLC_ID;

/* 1750 */
typedef __int16 SHORT;

/* 1751 */
typedef _strflt *STRFLT;

/* 1752 */
typedef _flt *FLT;

/* 1753 */
typedef const unsigned __int16 *LPCOLESTR;

/* 1754 */
typedef char _TSCHAR;

/* 1755 */
typedef void (__cdecl *_PVFV)();

/* 1757 */
typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS;

/* 1758 */
typedef void (__cdecl *_secerr_handler_func)(int, void *);

/* 1759 */
typedef void (__stdcall *PFN_EXIT_PROCESS)(unsigned int);

/* 1760 */
typedef HINSTANCE__ *HMODULE;

/* 1761 */
typedef unsigned int *PULONG_PTR;

/* 1762 */
typedef char u_char;

/* 1763 */
typedef __int16 _I16;

/* 1764 */
typedef unsigned int *LPDWORD;

/* 1765 */
typedef unsigned int DWORD_PTR;

/* 1766 */
typedef unsigned int *intrnman;

/* 1767 */
typedef _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;

/* 1768 */
typedef _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;

/* 1769 */
typedef int INT;

/* 1770 */
typedef unsigned int LCID;

/* 1771 */
typedef char *LPSTR;

/* 1772 */
typedef const char *pcchar_t;

/* 1773 */
typedef long double DATE;

/* 1774 */
typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER;

/* 1775 */
typedef void (__stdcall *PFLS_CALLBACK_FUNCTION)(void *);

/* 1776 */
typedef int SCODE;

/* 1777 */
typedef __int64 fpos_t;

/* 1778 */
typedef int s_long;

/* 1779 */
typedef unsigned int u_long;

/* 1780 */
typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;

/* 1781 */
typedef _CONTEXT *PCONTEXT;

/* 1782 */
typedef int (__cdecl *_onexit_t)();

/* 1783 */
typedef unsigned __int16 VARTYPE;

/* 1784 */
typedef int (__cdecl *_PIFV)();

/* 1785 */
typedef __int16 s_short;

/* 1786 */
typedef unsigned __int16 u_short;

/* 1787 */
typedef int mbstate_t;

/* 1788 */
typedef tagVersionedStream *LPVERSIONEDSTREAM;

/* 1789 */
typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;

/* 1790 */
typedef SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;

/* 1791 */
typedef void (__cdecl *_PMFN)();

/* 1792 */
typedef unsigned int SOCKET;

/* 1793 */
typedef _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;

/* 1794 */
typedef HINSTANCE__ *HINSTANCE;

/* 1795 */
typedef int __ehstate_t;

/* 1796 */
typedef int _I32;

/* 1797 */
typedef const char *LPCSTR;

/* 1798 */
typedef int intptr_t;

/* 1799 */
typedef void *HANDLE;

/* 1800 */
typedef tagPARAMDESCEX *LPPARAMDESCEX;

/* 1801 */
typedef _OVERLAPPED *LPOVERLAPPED;

/* 1802 */
typedef int streamoff;

/* 1803 */
typedef long double _FP64;

/* 1804 */
typedef hostent *PHOSTENT;

/* 1805 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 1806 */
typedef unsigned __int16 wctype_t;

/* 1807 */
typedef unsigned int HREFTYPE;

/* 1808 */
typedef unsigned int ULONG_PTR;

/* 1809 */
typedef HWND__ *HWND;

/* 1810 */
typedef int _Once_t;

/* 1811 */
typedef int BOOL;

/* 1812 */
typedef void (__cdecl *_PHNDLR)(int);

/* 1813 */
typedef unsigned __int16 TCHAR;

/* 1814 */
typedef char UCHAR;

/* 1815 */
typedef const unsigned __int16 *LPCWSTR;

/* 1816 */
typedef unsigned __int16 LANGID;

/* 1817 */
typedef unsigned int (__stdcall *PFLS_ALLOC_FUNCTION)(void (__stdcall *)(void *));

/* 1818 */
typedef unsigned __int16 *BSTR;

/* 1819 */
typedef unsigned __int16 *LPWSTR;

/* 1820 */
typedef unsigned int ULONG;

/* 1821 */
typedef void (__cdecl *PMFN)();

/* 1822 */
typedef int ptrdiff_t;

/* 1823 */
typedef char BOOLEAN;

/* 1824 */
typedef _tiddata *_ptiddata;

/* 1825 */
typedef void (__cdecl *Free_t)(void *);

/* 1826 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 1827 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 1828 */
enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0x0,
  ExceptionContinueSearch = 0x1,
  ExceptionNestedException = 0x2,
  ExceptionCollidedUnwind = 0x3,
};

/* 1829 */
typedef _GUID GUID;

/* 1830 */
struct _msExcept7
{
  int Magic;
  int Count;
  void *InfoPtr;
  int CountDtr;
  void *DtrPtr;
  int _unk[2];
};

/* 1831 */
struct _msExcInfo
{
  int Id;
  void *Proc;
};

/* 1832 */
struct _msExcExt
{
  int _unk[3];
  int Count;
  void *RttiBlkPtr;
};

/* 1833 */
struct _msRttiDscr
{
  int _unk;
  void *RttiPtr;
  int spoff;
  void *Dtr;
};

